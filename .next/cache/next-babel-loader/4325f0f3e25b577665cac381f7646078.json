{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Layout from '../components/layout.js';\nimport { SetConstAdj, SetAcAdj, SetDmgHitAdj, setherostats, setmonsterstats, RollforIniative, AttackRoll, AttackTurn } from '../components/DandDfunctions';\nimport { CharacterSheet, NameForm, AttackSection, CenterFlexWrapDiv, AttackStatusDisplay } from '../components/customComponents';\nimport { Row, Col, Button } from 'reactstrap';\n\nvar AttackSim = /*#__PURE__*/function (_React$Component) {\n  _inherits(AttackSim, _React$Component);\n\n  var _super = _createSuper(AttackSim);\n\n  function AttackSim(props) {\n    var _this;\n\n    _classCallCheck(this, AttackSim);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      base: {\n        Hp: 50,\n        ArmorClass: 10,\n        Damage: 10\n      },\n      herostats: {\n        Str: 0,\n        Const: 0,\n        Dext: 0\n      },\n      monsterstats: {\n        Str: 0,\n        Const: 0,\n        Dext: 0\n      },\n      heroHp: 0,\n      heroAc: 0,\n      heroDmg: 0,\n      heroHitAdj: 0,\n      heroNametext: '',\n      heroName: 'Hero',\n      heroInitiative: 0,\n      heroAttackVisible: false,\n      heroRoll: 0,\n      heroDidHit: '',\n      monsterHp: 0,\n      monsterAc: 0,\n      monsterDmg: 0,\n      monsterHitAdj: 0,\n      monsterNametext: '',\n      monsterName: 'Monster',\n      monsterInitiative: 0,\n      monsterAttackVisible: false,\n      monsterRoll: 0,\n      monsterDidHit: '',\n      initiativeButtonVisible: true\n    }; //Hero bind function statements\n\n    _this.setherostats = setherostats.bind(_assertThisInitialized(_this));\n    _this.heroNameChange = _this.heroNameChange.bind(_assertThisInitialized(_this));\n    _this.heroNameSubmit = _this.heroNameSubmit.bind(_assertThisInitialized(_this)); //monster bind function statements\n\n    _this.setmonsterstats = setmonsterstats.bind(_assertThisInitialized(_this));\n    _this.monsterNameChange = _this.monsterNameChange.bind(_assertThisInitialized(_this));\n    _this.monsterNameSubmit = _this.monsterNameSubmit.bind(_assertThisInitialized(_this)); //combined hero/monster function statesments\n\n    _this.SetConstAdj = SetConstAdj.bind(_assertThisInitialized(_this));\n    _this.SetAcAdj = SetAcAdj.bind(_assertThisInitialized(_this));\n    _this.SetDmgHitAdj = SetDmgHitAdj.bind(_assertThisInitialized(_this));\n    _this.RollforIniative = RollforIniative.bind(_assertThisInitialized(_this));\n    _this.AttackRoll = AttackRoll.bind(_assertThisInitialized(_this));\n    _this.AttackTurn = AttackTurn.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AttackSim, [{\n    key: \"heroNameChange\",\n    value: function heroNameChange(event) {\n      this.setState({\n        heroNametext: event.target.value\n      });\n    }\n  }, {\n    key: \"heroNameSubmit\",\n    value: function heroNameSubmit(event) {\n      this.setState({\n        heroName: this.state.heroNametext\n      });\n    }\n  }, {\n    key: \"monsterNameChange\",\n    value: function monsterNameChange(event) {\n      this.setState({\n        monsterNametext: event.target.value\n      });\n    }\n  }, {\n    key: \"monsterNameSubmit\",\n    value: function monsterNameSubmit(event) {\n      this.setState({\n        monsterName: this.state.monsterNametext\n      });\n    }\n  }, {\n    key: \"IntButton\",\n    value: function IntButton() {\n      if (this.state.initiativeButtonVisible === true) {\n        return __jsx(Button, {\n          className: \"m-5 w-50\",\n          onClick: this.RollforIniative\n        }, \"Roll for iniative\");\n      } else {\n        return __jsx(\"h4\", {\n          className: \"text-white m-5 text-center\"\n        }, \"Round in Progress\");\n      }\n\n      ;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(CenterFlexWrapDiv, {\n        className: \"m-0 p-0\"\n      }, __jsx(Row, {\n        className: \"w-100\"\n      }, __jsx(Col, {\n        className: \"m-1 bg-dark text-white\"\n      }, __jsx(\"h5\", {\n        className: \"mt-5 ml-5\"\n      }, __jsx(\"b\", null, \"Hero Name: \"), __jsx(\"span\", {\n        className: \"text-info ml-5 h3\"\n      }, this.state.heroName)), __jsx(CharacterSheet, {\n        Strength: this.state.herostats.Str,\n        Constitution: this.state.herostats.Const,\n        Dexterity: this.state.herostats.Dext,\n        Hitpoints: this.state.heroHp,\n        Damage: this.state.heroDmg,\n        ImgUrl: \"../static/images/hero.png\"\n      }), __jsx(\"div\", {\n        className: \"text-center m-3\"\n      }, __jsx(Button, {\n        onClick: this.setherostats\n      }, \"Set Attrubutes\")), __jsx(NameForm, {\n        Value: this.state.value,\n        NameChange: this.heroNameChange,\n        NameSubmit: this.heroNameSubmit\n      })), __jsx(Col, {\n        className: \"m-1 bg-dark text-white\"\n      }, __jsx(\"h5\", {\n        className: \"mt-5 ml-5\"\n      }, __jsx(\"b\", null, \"Monster Name: \"), __jsx(\"span\", {\n        className: \"text-info ml-5 h3\"\n      }, this.state.monsterName)), __jsx(CharacterSheet, {\n        Strength: this.state.monsterstats.Str,\n        Constitution: this.state.monsterstats.Const,\n        Dexterity: this.state.monsterstats.Dext,\n        Hitpoints: this.state.monsterHp,\n        Damage: this.state.monsterDmg,\n        ImgUrl: \"../static/images/monster.png\"\n      }), __jsx(\"div\", {\n        className: \"text-center m-3\"\n      }, __jsx(Button, {\n        onClick: this.setmonsterstats\n      }, \"Set Attrubutes\")), __jsx(NameForm, {\n        Value: this.state.value,\n        NameChange: this.monsterNameChange,\n        NameSubmit: this.monsterNameSubmit\n      })))), __jsx(CenterFlexWrapDiv, {\n        className: \"m-0 p-0\"\n      }, __jsx(\"div\", {\n        className: \"bg-dark m-1 p-0 mb-2 col\"\n      }, __jsx(AttackSection, {\n        AC: this.state.heroAc,\n        HitAdj: this.state.heroHitAdj,\n        AttackRoll: this.AttackRoll,\n        RollTitle: \"Hero Roll for Attack\",\n        Roll: this.state.heroRoll,\n        DidHit: this.state.heroDidHit,\n        NextTurn: this.AttackTurn,\n        AttackTurn: this.state.heroAttackVisible\n      })), __jsx(\"div\", {\n        className: \"bg-dark m-1 mb-2 p-0 col text-center text-white\"\n      }, this.IntButton(), __jsx(Row, null, __jsx(Col, {\n        className: \"w-50\"\n      }, __jsx(AttackStatusDisplay, {\n        Name: this.state.heroName,\n        Initiative: this.state.heroInitiative,\n        HP: this.state.heroHp\n      })), __jsx(Col, null, __jsx(AttackStatusDisplay, {\n        Name: this.state.monsterName,\n        Initiative: this.state.monsterInitiative,\n        HP: this.state.monsterHp\n      })))), __jsx(\"div\", {\n        className: \"bg-dark m-1 p-0 mb-2 col\"\n      }, __jsx(AttackSection, {\n        AC: this.state.monsterAc,\n        HitAdj: this.state.monsterHitAdj,\n        AttackRoll: this.AttackRoll,\n        RollTitle: \"Monster Roll for Attack\",\n        Roll: this.state.monsterRoll,\n        DidHit: this.state.monsterDidHit,\n        NextTurn: this.AttackTurn,\n        AttackTurn: this.state.monsterAttackVisible\n      }))));\n    }\n  }]);\n\n  return AttackSim;\n}(React.Component);\n\nfunction DandD() {\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"ml-5\"\n  }, __jsx(\"h1\", null, \"Dungeons and Dragons attack simulation\"), __jsx(\"h4\", null, \"Calculations are based on SE 2 rules from late 80's and early 90's.\"), __jsx(\"ol\", null, __jsx(\"b\", null, \"Instructions:\"), __jsx(\"li\", null, \"Press the \\\"Set Attributes\\\" buttons for both Hero and Monster.\"), __jsx(\"li\", null, \"Press the \\\"Roll for Initiative\\\" button to see who attacks first.\"), __jsx(\"li\", null, \"Follow the instructions and press the \\\"Roll for Attack\\\" buttons.\"), __jsx(\"li\", null, \"After each round, repeat by rolling for Initiative and continue attacking until a character dies.\"))), __jsx(AttackSim, null));\n}\n\nexport default DandD;","map":null,"metadata":{},"sourceType":"module"}