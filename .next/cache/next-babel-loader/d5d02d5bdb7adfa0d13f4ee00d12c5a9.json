{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\newtest\\\\my-page\\\\pages\\\\provider_data\\\\networkTable.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport ReactTable from 'react-table';\nimport \"react-table/react-table.css\";\n\nvar networkdata = require('./network.json');\n/*counts number of Region types there are in the json\r\nconst uniqueNames = new Set(data.map(item => item.Region)).size;\r\n*/\n//Function for case insensitivity allowing for more flexibility on filter results based\n//on user input.\n\n\nfunction filterCaseInsensitive(filter, row) {\n  const id = filter.pivotId || filter.id;\n  return row[id] !== undefined ? String(row[id].toLowerCase()).startsWith(filter.value.toLowerCase()) : true;\n} //creates dropdown list for each table column listing available selection options for \n//each json listing.  Example: Region - Central, Southwest, East\n\n\nconst customFilter = ({\n  fieldName,\n  filter,\n  onChange\n}) => {\n  return __jsx(\"select\", {\n    onChange: event => onChange(event.target.value),\n    style: {\n      width: \"100%\"\n    },\n    value: filter ? filter.value : '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Show All\"), networkdata.sort((a, b) => {\n    const One = a[fieldName];\n    const Two = b[fieldName];\n    return One < Two ? -1 : One > Two ? 1 : 0;\n  }).map(item => item[fieldName]).filter((item, i, s) => s.lastIndexOf(item) == i).map(function (value) {\n    return __jsx(\"option\", {\n      key: value,\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, value);\n  }));\n};\n\nclass NetworkList extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, __jsx(ReactTable, {\n      className: \"Provider-table -striped -highlight center shadow-sm mb-5\",\n      data: networkdata,\n      defaultPageSize: 20,\n      style: {\n        height: \"800px\"\n      } //sets filtering options in react-table for no dropdown option.  Calls the filtercaseinsensitive\n      //function as mentioned above\n      ,\n      filterable: true,\n      defaultFilterMethod: (filter, row) => filterCaseInsensitive(filter, row),\n      columns: [{\n        Header: \"Provider\",\n        columns: [{\n          Header: \"Name\",\n          id: \"Name\",\n          accessor: d => d.Name,\n          width: 140,\n          //*sorting method to allow for listing of numerical order listed in the name\n          sortMethod: (a, b) => {\n            if (a.length === b.length) {\n              return a > b ? 1 : -1;\n            }\n\n            return a.length > b.length ? 1 : -1;\n          }\n        }, {\n          Header: \"Address\",\n          id: \"Address\",\n          accessor: d => d.Address,\n          width: 300,\n          size: 2,\n          style: {\n            whiteSpace: 'unset',\n            fontSize: '14px'\n          }\n        }, {\n          Header: \"Phone\",\n          id: \"Phone\",\n          accessor: d => d.Phone,\n          width: 150\n        }, {\n          Header: \"Email\",\n          id: \"Email\",\n          accessor: d => d.Email,\n          width: 220,\n          style: {\n            fontSize: '14px'\n          }\n        }]\n      }, {\n        Header: \"Provider Info\",\n        columns: [{\n          Header: \"Region\",\n          id: \"Region\",\n          width: 110,\n          style: {\n            'textAlign': 'center'\n          },\n          accessor: d => d.Region,\n          filterMethod: (filter, row) => {\n            return row[filter.id] === filter.value;\n          },\n          //calls the customfilter function above creating a dropdown list for\n          //filter\n          Filter: ({\n            filter,\n            onChange\n          }) => customFilter({\n            fieldName: 'Region',\n            filter,\n            onChange\n          })\n        }, {\n          Header: \"County\",\n          id: \"County\",\n          style: {\n            'textAlign': 'center'\n          },\n          width: 110,\n          accessor: d => d.County,\n          filterMethod: (filter, row) => {\n            return row[filter.id] === filter.value;\n          },\n          //calls the customfilter function above creating a dropdown list for\n          //filter\n          Filter: ({\n            filter,\n            onChange\n          }) => customFilter({\n            fieldName: 'County',\n            filter,\n            onChange\n          })\n        }]\n      }, {\n        Header: \"Level of Service\",\n        columns: [{\n          Header: \"Ambulatory\",\n          accessor: \"Amb\",\n          style: {\n            'textAlign': 'center'\n          },\n          width: 110,\n          filterMethod: (filter, row) => {\n            return row[filter.id] === filter.value;\n          },\n          //calls the customfilter function above creating a dropdown list for\n          //filter\n          Filter: ({\n            filter,\n            onChange\n          }) => customFilter({\n            fieldName: 'Amb',\n            filter,\n            onChange\n          })\n        }, {\n          Header: \"Wheelchair\",\n          id: \"WCHR\",\n          style: {\n            'textAlign': 'center'\n          },\n          width: 110,\n          accessor: d => d.WCHR,\n          filterMethod: (filter, row) => {\n            return row[filter.id] === filter.value;\n          },\n          //calls the customfilter function above creating a dropdown list for\n          //filter\n          Filter: ({\n            filter,\n            onChange\n          }) => customFilter({\n            fieldName: 'WCHR',\n            filter,\n            onChange\n          })\n        }, {\n          Header: \"Stretcher\",\n          id: \"Stretcher\",\n          style: {\n            'textAlign': 'center'\n          },\n          width: 110,\n          accessor: d => d.Stretcher,\n          filterMethod: (filter, row) => {\n            return row[filter.id] === filter.value;\n          },\n          //calls the customfilter function above creating a dropdown list for\n          //filter\n          Filter: ({\n            filter,\n            onChange\n          }) => customFilter({\n            fieldName: 'Stretcher',\n            filter,\n            onChange\n          })\n        }]\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, (state, makeTable, instance) => {\n      let recordsInfoText = \"\";\n      const {\n        filtered,\n        pageRows,\n        pageSize,\n        sortedData,\n        page\n      } = state;\n\n      if (sortedData && sortedData.length > 0) {\n        let isFiltered = filtered.length > 0;\n        let totalRecords = sortedData.length;\n        let recordsCountFrom = page * pageSize + 1;\n        let recordsCountTo = recordsCountFrom + pageRows.length - 1;\n        if (isFiltered) recordsInfoText = `${totalRecords} filtered Providers`;else recordsInfoText = `${recordsCountFrom}-${recordsCountTo} of ${totalRecords} records`;\n      } else recordsInfoText = \"No records\";\n\n      return __jsx(\"div\", {\n        className: \"main-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"records-info h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, recordsInfoText)), makeTable());\n    }));\n  }\n\n}\n\nexport default NetworkList;","map":{"version":3,"sources":["C:\\Users\\Mark\\Desktop\\newtest\\my-page\\pages\\provider_data\\networkTable.js"],"names":["React","Component","ReactTable","networkdata","require","filterCaseInsensitive","filter","row","id","pivotId","undefined","String","toLowerCase","startsWith","value","customFilter","fieldName","onChange","event","target","width","sort","a","b","One","Two","map","item","i","s","lastIndexOf","NetworkList","constructor","props","render","height","Header","columns","accessor","d","Name","sortMethod","length","Address","size","style","whiteSpace","fontSize","Phone","Email","Region","filterMethod","Filter","County","WCHR","Stretcher","state","makeTable","instance","recordsInfoText","filtered","pageRows","pageSize","sortedData","page","isFiltered","totalRecords","recordsCountFrom","recordsCountTo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactTable from 'react-table'\r\nimport \"react-table/react-table.css\"\r\n\r\nvar networkdata = require('./network.json');\r\n\r\n/*counts number of Region types there are in the json\r\nconst uniqueNames = new Set(data.map(item => item.Region)).size;\r\n*/\r\n\r\n//Function for case insensitivity allowing for more flexibility on filter results based\r\n//on user input.\r\nfunction filterCaseInsensitive(filter, row) {\r\n  const id = filter.pivotId || filter.id;\r\n  return (\r\n    row[id] !== undefined ?\r\n      String(row[id].toLowerCase()).startsWith(filter.value.toLowerCase())\r\n    :  true\r\n  );\r\n}\r\n\r\n//creates dropdown list for each table column listing available selection options for \r\n//each json listing.  Example: Region - Central, Southwest, East\r\nconst customFilter = ({ fieldName, filter, onChange }) => {\r\n  return (\r\n    <select\r\n      onChange={event => onChange(event.target.value)}\r\n      style={{ width: \"100%\" }}\r\n      value={filter ? filter.value : ''}> \r\n      <option value= ''>Show All</option>\r\n      {networkdata.sort((a, b) => {\r\n          const One = a[fieldName];\r\n          const Two = b[fieldName];\r\n      \r\n          return (One < Two) ? -1 : (One > Two) ? 1 : 0;\r\n        })\r\n        .map(item => item[fieldName])\r\n        .filter((item, i, s) => s.lastIndexOf(item) == i)\r\n        .map(function (value) {\r\n          return (\r\n            <option key={value} value={value}>\r\n              {value}\r\n            </option>\r\n          );\r\n        })\r\n      }\r\n    </select>\r\n  );\r\n};\r\n\r\n\r\nclass NetworkList extends Component {\r\n  constructor(props) {\r\n    super(props); \r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <div>\r\n        <ReactTable \r\n          className= \"Provider-table -striped -highlight center shadow-sm mb-5\"\r\n          data= {networkdata}\r\n          defaultPageSize={20}\r\n          style={{\r\n            height: \"800px\"\r\n          }}\r\n          //sets filtering options in react-table for no dropdown option.  Calls the filtercaseinsensitive\r\n          //function as mentioned above\r\n          filterable defaultFilterMethod=\r\n          {(filter, row) => filterCaseInsensitive(filter, row) }\r\n          columns={[\r\n            {\r\n              Header: \"Provider\",\r\n              columns: [\r\n                {\r\n                  Header: \"Name\",\r\n                  id: \"Name\",\r\n                  accessor: d => d.Name,\r\n                  width: 140,\r\n                  //*sorting method to allow for listing of numerical order listed in the name\r\n                  sortMethod: (a, b) => {\r\n                    if (a.length === b.length) {\r\n                      return a > b ? 1 : -1;\r\n                    }\r\n                    return a.length > b.length ? 1 : -1;\r\n                  },\r\n                },\r\n                {\r\n                  Header: \"Address\",\r\n                  id: \"Address\",\r\n                  accessor: d => d.Address,\r\n                  width: 300,\r\n                  size: 2,\r\n                  style: {\r\n                    whiteSpace: 'unset',\r\n                    fontSize: '14px'\r\n                  },\r\n                },\r\n                {\r\n                  Header: \"Phone\",\r\n                  id: \"Phone\",\r\n                  accessor: d => d.Phone,\r\n                  width: 150,\r\n                },\r\n                {\r\n                  Header: \"Email\",\r\n                  id: \"Email\",\r\n                  accessor: d => d.Email,\r\n                  width: 220,\r\n                  style: {fontSize: '14px'},\r\n                }\r\n              ]\r\n            },              \r\n            {\r\n              Header: \"Provider Info\",\r\n              columns: [\r\n                {\r\n                  Header: \"Region\",\r\n                  id: \"Region\",\r\n                  width: 110,\r\n                  style: {'textAlign': 'center'},\r\n                  accessor: d => d.Region,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'Region', filter, onChange })\r\n                },\r\n                {\r\n                  Header: \"County\",\r\n                  id: \"County\",\r\n                  style: {'textAlign': 'center'},\r\n                  width: 110,\r\n                  accessor: d => d.County,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'County', filter, onChange })\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              Header: \"Level of Service\",\r\n              columns: [\r\n                {\r\n                  Header: \"Ambulatory\",\r\n                  accessor: \"Amb\",\r\n                  style: {'textAlign': 'center'},\r\n                  width: 110,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'Amb', filter, onChange })\r\n                },\r\n                {\r\n                  Header: \"Wheelchair\",\r\n                  id: \"WCHR\",\r\n                  style: {'textAlign': 'center'},\r\n                  width: 110,\r\n                  accessor: d => d.WCHR,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'WCHR', filter, onChange })\r\n                },\r\n                {\r\n                  Header: \"Stretcher\",\r\n                  id: \"Stretcher\",\r\n                  style: {'textAlign': 'center'},\r\n                  width: 110,\r\n                  accessor: d => d.Stretcher,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'Stretcher', filter, onChange })\r\n                },\r\n              ]\r\n            },\r\n          ]}\r\n        > \r\n        {/*functions to display totals of filtered data. */}\r\n        {(state, makeTable, instance) => {\r\n          let recordsInfoText = \"\";\r\n          const { filtered, pageRows, pageSize, sortedData, page } = state;\r\n\r\n          if (sortedData && sortedData.length > 0) {\r\n            let isFiltered = filtered.length > 0;\r\n            let totalRecords = sortedData.length;\r\n            let recordsCountFrom = page * pageSize + 1;\r\n            let recordsCountTo = recordsCountFrom + pageRows.length - 1;\r\n\r\n            if (isFiltered)\r\n              recordsInfoText = `${totalRecords} filtered Providers`;\r\n            else\r\n              recordsInfoText = `${recordsCountFrom}-${recordsCountTo} of ${totalRecords} records`;\r\n          } else recordsInfoText = \"No records\";\r\n\r\n          return (\r\n            <div className=\"main-grid\">\r\n                <div>\r\n                  <span className=\"records-info h3\">{recordsInfoText}</span>\r\n                </div>\r\n              {makeTable()}\r\n            </div>\r\n          );\r\n        }}\r\n      </ReactTable>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NetworkList;\r\n"]},"metadata":{},"sourceType":"module"}