{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport ReactTable from 'react-table';\nimport \"react-table/react-table.css\";\n\nvar networkdata = require('./network.json');\n/*counts number of Region types there are in the json\r\nconst uniqueNames = new Set(data.map(item => item.Region)).size;\r\n*/\n//Function for case insensitivity allowing for more flexibility on filter results based\n//on user input.\n\n\nfunction filterCaseInsensitive(filter, row) {\n  const id = filter.pivotId || filter.id;\n  return row[id] !== undefined ? String(row[id].toLowerCase()).startsWith(filter.value.toLowerCase()) : true;\n} //creates dropdown list for each table column listing available selection options for \n//each json listing.  Example: Region - Central, Southwest, East\n\n\nconst customFilter = ({\n  fieldName,\n  filter,\n  onChange\n}) => {\n  return __jsx(\"select\", {\n    onChange: event => onChange(event.target.value),\n    style: {\n      width: \"100%\"\n    },\n    value: filter ? filter.value : ''\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Show All\"), networkdata.sort((a, b) => {\n    const One = a[fieldName];\n    const Two = b[fieldName];\n    return One < Two ? -1 : One > Two ? 1 : 0;\n  }).map(item => item[fieldName]).filter((item, i, s) => s.lastIndexOf(item) == i).map(function (value) {\n    return __jsx(\"option\", {\n      key: value,\n      value: value\n    }, value);\n  }));\n};\n\nclass NetworkList extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(ReactTable, {\n      className: \"Provider-table -striped -highlight center shadow-sm mb-5\",\n      data: networkdata,\n      defaultPageSize: 20,\n      style: {\n        height: \"800px\"\n      } //sets filtering options in react-table for no dropdown option.  Calls the filtercaseinsensitive\n      //function as mentioned above\n      ,\n      filterable: true,\n      defaultFilterMethod: (filter, row) => filterCaseInsensitive(filter, row),\n      columns: [{\n        Header: \"Provider\",\n        columns: [{\n          Header: \"Name\",\n          id: \"Name\",\n          accessor: d => d.Name,\n          width: 140,\n          //*sorting method to allow for listing of numerical order listed in the name\n          sortMethod: (a, b) => {\n            if (a.length === b.length) {\n              return a > b ? 1 : -1;\n            }\n\n            return a.length > b.length ? 1 : -1;\n          }\n        }, {\n          Header: \"Address\",\n          id: \"Address\",\n          accessor: d => d.Address,\n          width: 300,\n          size: 2,\n          style: {\n            whiteSpace: 'unset',\n            fontSize: '14px'\n          }\n        }, {\n          Header: \"Phone\",\n          id: \"Phone\",\n          accessor: d => d.Phone,\n          width: 150\n        }, {\n          Header: \"Email\",\n          id: \"Email\",\n          accessor: d => d.Email,\n          width: 220,\n          style: {\n            fontSize: '14px'\n          }\n        }]\n      }, {\n        Header: \"Provider Info\",\n        columns: [{\n          Header: \"Region\",\n          id: \"Region\",\n          width: 110,\n          style: {\n            'textAlign': 'center'\n          },\n          accessor: d => d.Region,\n          filterMethod: (filter, row) => {\n            return row[filter.id] === filter.value;\n          },\n          //calls the customfilter function above creating a dropdown list for\n          //filter\n          Filter: ({\n            filter,\n            onChange\n          }) => customFilter({\n            fieldName: 'Region',\n            filter,\n            onChange\n          })\n        }, {\n          Header: \"County\",\n          id: \"County\",\n          style: {\n            'textAlign': 'center'\n          },\n          width: 110,\n          accessor: d => d.County,\n          filterMethod: (filter, row) => {\n            return row[filter.id] === filter.value;\n          },\n          //calls the customfilter function above creating a dropdown list for\n          //filter\n          Filter: ({\n            filter,\n            onChange\n          }) => customFilter({\n            fieldName: 'County',\n            filter,\n            onChange\n          })\n        }]\n      }, {\n        Header: \"Level of Service\",\n        columns: [{\n          Header: \"Ambulatory\",\n          accessor: \"Amb\",\n          style: {\n            'textAlign': 'center'\n          },\n          width: 110,\n          filterMethod: (filter, row) => {\n            return row[filter.id] === filter.value;\n          },\n          //calls the customfilter function above creating a dropdown list for\n          //filter\n          Filter: ({\n            filter,\n            onChange\n          }) => customFilter({\n            fieldName: 'Amb',\n            filter,\n            onChange\n          })\n        }, {\n          Header: \"Wheelchair\",\n          id: \"WCHR\",\n          style: {\n            'textAlign': 'center'\n          },\n          width: 110,\n          accessor: d => d.WCHR,\n          filterMethod: (filter, row) => {\n            return row[filter.id] === filter.value;\n          },\n          //calls the customfilter function above creating a dropdown list for\n          //filter\n          Filter: ({\n            filter,\n            onChange\n          }) => customFilter({\n            fieldName: 'WCHR',\n            filter,\n            onChange\n          })\n        }, {\n          Header: \"Stretcher\",\n          id: \"Stretcher\",\n          style: {\n            'textAlign': 'center'\n          },\n          width: 110,\n          accessor: d => d.Stretcher,\n          filterMethod: (filter, row) => {\n            return row[filter.id] === filter.value;\n          },\n          //calls the customfilter function above creating a dropdown list for\n          //filter\n          Filter: ({\n            filter,\n            onChange\n          }) => customFilter({\n            fieldName: 'Stretcher',\n            filter,\n            onChange\n          })\n        }]\n      }]\n    }, (state, makeTable, instance) => {\n      let recordsInfoText = \"\";\n      const {\n        filtered,\n        pageRows,\n        pageSize,\n        sortedData,\n        page\n      } = state;\n\n      if (sortedData && sortedData.length > 0) {\n        let isFiltered = filtered.length > 0;\n        let totalRecords = sortedData.length;\n        let recordsCountFrom = page * pageSize + 1;\n        let recordsCountTo = recordsCountFrom + pageRows.length - 1;\n        if (isFiltered) recordsInfoText = `${totalRecords} filtered Providers`;else recordsInfoText = `${recordsCountFrom}-${recordsCountTo} of ${totalRecords} records`;\n      } else recordsInfoText = \"No records\";\n\n      return __jsx(\"div\", {\n        className: \"main-grid\"\n      }, __jsx(\"div\", null, __jsx(\"span\", {\n        className: \"records-info h3\"\n      }, recordsInfoText)), makeTable());\n    }));\n  }\n\n}\n\nexport default NetworkList;","map":null,"metadata":{},"sourceType":"module"}