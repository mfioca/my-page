{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Layout from '../components/layout';\nimport { Row, Col, Table } from 'reactstrap';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport { TvPostInfoLabel, TvPostInfoValue, NewTabLink, LeftFlexWrapDiv, TvMazePage, CustomTabs, TvMazeCard } from '../components/customComponents';\nimport fetch from 'isomorphic-unfetch';\nconst noimage = '/static/images/no-img.png';\n\nconst tvPost = props => {\n  return __jsx(Layout, null, __jsx(\"h1\", {\n    className: \"text-center\"\n  }, \"the below content has been imported from\", __jsx(NewTabLink, {\n    Link: \"https://www.tvmaze.com\",\n    Title: \"TVMaze link\"\n  }, \"TVmaze.com\")), __jsx(TvMazePage, null, __jsx(\"div\", {\n    className: \"h3 m-3\"\n  }, __jsx(Row, null, __jsx(Col, null, __jsx(\"h1\", null, props.show.name), __jsx(Table, {\n    borderless: true,\n    className: \"\"\n  }, __jsx(\"tbody\", null, __jsx(\"tr\", null, __jsx(TvPostInfoLabel, null, \"Type:\"), __jsx(TvPostInfoValue, null, props.show.type ? props.show.type : 'no data')), __jsx(\"tr\", null, __jsx(TvPostInfoLabel, null, \"Premiered:\"), __jsx(TvPostInfoValue, null, props.show.premiered ? props.show.premiered : 'no data')), __jsx(\"tr\", null, __jsx(TvPostInfoLabel, null, \"Status:\"), __jsx(TvPostInfoValue, null, props.show.status ? props.show.status : 'no data')), __jsx(\"tr\", null, __jsx(TvPostInfoLabel, null, \"Rating:\"), __jsx(TvPostInfoValue, null, props.show.rating.average ? props.show.rating.average : 'no data')), __jsx(\"tr\", null, __jsx(TvPostInfoLabel, null, \"Genre:\"), __jsx(TvPostInfoValue, null, props.show.genres.map((value, index) => {\n    return __jsx(\"span\", {\n      key: index\n    }, value, \" \\xA0\");\n  }))), __jsx(\"tr\", null, __jsx(TvPostInfoLabel, null, \"Seasons:\"), __jsx(TvPostInfoValue, null, props.show._embedded.seasons.filter(seasons => seasons.number).length))))), __jsx(Col, {\n    sm: {\n      size: 'auto',\n      offset: 1\n    }\n  }, __jsx(\"div\", {\n    className: \"text-center mr-5 mt-2\"\n  }, __jsx(\"img\", {\n    src: props.show.image ? props.show.image.medium : noimage,\n    alt: \"no image\"\n  })))), __jsx(Row, {\n    className: \"m-3\"\n  }, __jsx(\"h4\", null, \"Summary:\", __jsx(\"br\", null), __jsx(\"small\", null, props.show.summary.replace(/<[/]?p>/g, '').replace(/<[/]?b>/g, '').replace(/<[/]?i>/g, '')))), __jsx(Row, {\n    className: \"m-3\"\n  }, __jsx(\"h3\", null, \"Link:\", __jsx(\"small\", {\n    className: \"ml-2\"\n  }, __jsx(NewTabLink, {\n    Link: props.show.url,\n    Title: props.show.url\n  }, props.show.name ? props.show.name : 'null')))), __jsx(CustomTabs, {\n    Tab1Name: \"Cast\",\n    Tab2Name: \"Episodes\",\n    Tab1Content: __jsx(LeftFlexWrapDiv, null, props.show._embedded.cast.map(cast => __jsx(\"div\", {\n      className: \"p-3\",\n      key: cast.person.id\n    }, __jsx(TvMazeCard, {\n      CardStyle: {\n        height: '570px'\n      },\n      Title: cast.person.name,\n      ImgSrc: cast.person.image === null && noimage || cast.character.image === null && cast.person.image.medium || cast.character.image.medium,\n      ImgAlt: \"castimage\",\n      SubTitle: __jsx(\"p\", null, \"As: \\xA0\", __jsx(\"small\", null, cast.character.name)),\n      Link: __jsx(NewTabLink, {\n        Style: \"btn btn-dark w-100 mt-3\",\n        Link: cast.person.url,\n        Title: \"Actor Page\"\n      }, \"Actor Page\")\n    }))))\n    /*end of Tab1Content*/\n    ,\n    Tab2Content:\n    /*React Table for Episode List */\n    __jsx(ReactTable, {\n      className: \"-striped -highlight\",\n      data: props.show._embedded.episodes,\n      defaultPageSize: 20,\n      style: {\n        height: \"600px\",\n        fontSize: \"14px\"\n      },\n      filterable: true,\n      defaultFilterMethod: (filter, row) => String(row[filter.id]) === filter.value,\n      columns: [{\n        Header: \"Season\",\n        id: \"season\",\n        accessor: d => d.season,\n        maxWidth: 110,\n        style: {\n          'textAlign': 'center'\n        },\n        //Dropdown list to filter table based on number\n        //of seasons\n        Filter: ({\n          filter,\n          onChange\n        }) => {\n          return __jsx(\"select\", {\n            onChange: event => onChange(event.target.value),\n            style: {\n              width: \"100%\"\n            },\n            value: filter ? filter.value : ''\n          }, __jsx(\"option\", {\n            value: \"\"\n          }, \"Show All\"), props.show._embedded.episodes.map(item => item.season).filter((item, i, s) => s.lastIndexOf(item) == i).map(function (value) {\n            return __jsx(\"option\", {\n              key: value,\n              value: value\n            }, value);\n          }));\n        }\n      }, {\n        Header: \"Episode #\",\n        accessor: \"number\",\n        maxWidth: 80,\n        style: {\n          'textAlign': 'center'\n        }\n      }, {\n        Header: \"Name\",\n        id: \"name\",\n        accessor: d => //Converts Episode Name into a link to the TvMaze \n        //page for that episode\n        __jsx(NewTabLink, {\n          Link: d.url,\n          Title: \"Episode Link\"\n        }, d.name),\n        minWidth: 70,\n        style: {\n          'whiteSpace': 'unset',\n          'textAlign': 'center'\n        }\n      }, {\n        Header: \"Air Date\",\n        id: \"airdate\",\n        accessor: d => d.airdate,\n        maxWidth: 120,\n        style: {\n          'whiteSpace': 'unset',\n          'textAlign': 'center'\n        }\n      }, {\n        Header: \"Summary\",\n        id: \"summary\",\n        accessor: d => d.summary != null && __jsx(\"span\", null, d.summary.replace(/<[/]?p>/g, '')),\n        style: {\n          'whiteSpace': 'unset'\n        }\n      }]\n    })\n    /*End of Tab2Content*/\n\n  }))));\n};\n\ntvPost.getInitialProps = async function (context) {\n  const {\n    id\n  } = context.query; //pules tvmaze api json based on selected show on the search page.\n\n  const res = await fetch(`https://api.tvmaze.com/shows/${id}?embed[]=episodes&embed[]=cast&embed[]=seasons`);\n  const show = await res.json();\n  console.log(show);\n  console.log(`Fetched show: ${show.name}`);\n  return {\n    show\n  };\n};\n\nexport default tvPost;","map":null,"metadata":{},"sourceType":"module"}