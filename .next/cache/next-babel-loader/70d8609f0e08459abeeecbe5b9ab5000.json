{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport ReactTable from 'react-table';\nimport \"react-table/react-table.css\";\n\nvar networkdata = require('./network.json');\n/*counts number of Region types there are in the json\r\nconst uniqueNames = new Set(data.map(item => item.Region)).size;\r\n*/\n//Function for case insensitivity allowing for more flexibility on filter results based\n//on user input.\n\n\nfunction filterCaseInsensitive(filter, row) {\n  var id = filter.pivotId || filter.id;\n  return row[id] !== undefined ? String(row[id].toLowerCase()).startsWith(filter.value.toLowerCase()) : true;\n} //creates dropdown list for each table column listing available selection options for \n//each json listing.  Example: Region - Central, Southwest, East\n\n\nvar customFilter = function customFilter(_ref) {\n  var fieldName = _ref.fieldName,\n      filter = _ref.filter,\n      _onChange = _ref.onChange;\n  return __jsx(\"select\", {\n    onChange: function onChange(event) {\n      return _onChange(event.target.value);\n    },\n    style: {\n      width: \"100%\"\n    },\n    value: filter ? filter.value : ''\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Show All\"), networkdata.sort(function (a, b) {\n    var One = a[fieldName];\n    var Two = b[fieldName];\n    return One < Two ? -1 : One > Two ? 1 : 0;\n  }).map(function (item) {\n    return item[fieldName];\n  }).filter(function (item, i, s) {\n    return s.lastIndexOf(item) == i;\n  }).map(function (value) {\n    return __jsx(\"option\", {\n      key: value,\n      value: value\n    }, value);\n  }));\n};\n\nvar NetworkList = /*#__PURE__*/function (_Component) {\n  _inherits(NetworkList, _Component);\n\n  var _super = _createSuper(NetworkList);\n\n  function NetworkList(props) {\n    _classCallCheck(this, NetworkList);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(NetworkList, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(ReactTable, {\n        className: \"Provider-table -striped -highlight center shadow-sm mb-5\",\n        data: networkdata,\n        defaultPageSize: 20,\n        style: {\n          height: \"800px\"\n        } //sets filtering options in react-table for no dropdown option.  Calls the filtercaseinsensitive\n        //function as mentioned above\n        ,\n        filterable: true,\n        defaultFilterMethod: function defaultFilterMethod(filter, row) {\n          return filterCaseInsensitive(filter, row);\n        },\n        columns: [{\n          Header: \"Provider\",\n          columns: [{\n            Header: \"Name\",\n            id: \"Name\",\n            accessor: function accessor(d) {\n              return d.Name;\n            },\n            width: 140,\n            //*sorting method to allow for listing of numerical order listed in the name\n            sortMethod: function sortMethod(a, b) {\n              if (a.length === b.length) {\n                return a > b ? 1 : -1;\n              }\n\n              return a.length > b.length ? 1 : -1;\n            }\n          }, {\n            Header: \"Address\",\n            id: \"Address\",\n            accessor: function accessor(d) {\n              return d.Address;\n            },\n            width: 300,\n            size: 2,\n            style: {\n              whiteSpace: 'unset',\n              fontSize: '14px'\n            }\n          }, {\n            Header: \"Phone\",\n            id: \"Phone\",\n            accessor: function accessor(d) {\n              return d.Phone;\n            },\n            width: 150\n          }, {\n            Header: \"Email\",\n            id: \"Email\",\n            accessor: function accessor(d) {\n              return d.Email;\n            },\n            width: 220,\n            style: {\n              fontSize: '14px'\n            }\n          }]\n        }, {\n          Header: \"Provider Info\",\n          columns: [{\n            Header: \"Region\",\n            id: \"Region\",\n            width: 110,\n            style: {\n              'textAlign': 'center'\n            },\n            accessor: function accessor(d) {\n              return d.Region;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref2) {\n              var filter = _ref2.filter,\n                  onChange = _ref2.onChange;\n              return customFilter({\n                fieldName: 'Region',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }, {\n            Header: \"County\",\n            id: \"County\",\n            style: {\n              'textAlign': 'center'\n            },\n            width: 110,\n            accessor: function accessor(d) {\n              return d.County;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref3) {\n              var filter = _ref3.filter,\n                  onChange = _ref3.onChange;\n              return customFilter({\n                fieldName: 'County',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }]\n        }, {\n          Header: \"Level of Service\",\n          columns: [{\n            Header: \"Ambulatory\",\n            accessor: \"Amb\",\n            style: {\n              'textAlign': 'center'\n            },\n            width: 110,\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref4) {\n              var filter = _ref4.filter,\n                  onChange = _ref4.onChange;\n              return customFilter({\n                fieldName: 'Amb',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }, {\n            Header: \"Wheelchair\",\n            id: \"WCHR\",\n            style: {\n              'textAlign': 'center'\n            },\n            width: 110,\n            accessor: function accessor(d) {\n              return d.WCHR;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref5) {\n              var filter = _ref5.filter,\n                  onChange = _ref5.onChange;\n              return customFilter({\n                fieldName: 'WCHR',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }, {\n            Header: \"Stretcher\",\n            id: \"Stretcher\",\n            style: {\n              'textAlign': 'center'\n            },\n            width: 110,\n            accessor: function accessor(d) {\n              return d.Stretcher;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref6) {\n              var filter = _ref6.filter,\n                  onChange = _ref6.onChange;\n              return customFilter({\n                fieldName: 'Stretcher',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }]\n        }]\n      }, function (state, makeTable, instance) {\n        var recordsInfoText = \"\";\n        var filtered = state.filtered,\n            pageRows = state.pageRows,\n            pageSize = state.pageSize,\n            sortedData = state.sortedData,\n            page = state.page;\n\n        if (sortedData && sortedData.length > 0) {\n          var isFiltered = filtered.length > 0;\n          var totalRecords = sortedData.length;\n          var recordsCountFrom = page * pageSize + 1;\n          var recordsCountTo = recordsCountFrom + pageRows.length - 1;\n          if (isFiltered) recordsInfoText = \"\".concat(totalRecords, \" filtered Providers\");else recordsInfoText = \"\".concat(recordsCountFrom, \"-\").concat(recordsCountTo, \" of \").concat(totalRecords, \" records\");\n        } else recordsInfoText = \"No records\";\n\n        return __jsx(\"div\", {\n          className: \"main-grid\"\n        }, __jsx(\"div\", null, __jsx(\"span\", {\n          className: \"records-info h3\"\n        }, recordsInfoText)), makeTable());\n      }));\n    }\n  }]);\n\n  return NetworkList;\n}(Component);\n\nexport default NetworkList;","map":null,"metadata":{},"sourceType":"module"}