{"version":3,"file":"static/webpack/static\\development\\pages\\tvpost.js.2b63bdb417bc3be2239e.hot-update.js","sources":["webpack:///./pages/tvpost.js"],"sourcesContent":["import Layout from '../components/layout'\r\nimport Layout2 from './tv_info/MyLayout'\r\nimport { Card, CardImg, CardBody, CardTitle, Row, Col, Button } from 'reactstrap'\r\nimport ReactTable from \"react-table\"\r\nimport \"react-table/react-table.css\"\r\nimport { TvImage, TvCast, TvTitle } from './jsxstyles'\r\nimport fetch from 'isomorphic-unfetch'\r\n\r\nconst noimage = '/static/images/no-img.png'\r\n\r\n\r\nconst tvPost = props => (\r\n  <Layout>\r\n    <h1 className=\"text-center\">the below content has been imported from \r\n      <a href=\"https://www.tvmaze.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        TVmaze.com\r\n      </a>\r\n    </h1>\r\n    <Layout2>\r\n      <div className=\"h3 m-3\">\r\n        <Row>\r\n          <Col>\r\n            <h1>{props.show.name}</h1>\r\n            <h3><b>Type:</b> <small>{props.show.type ? props.show.type : 'no data'}</small></h3>\r\n            <h3><b>Premiered:</b> <small>{props.show.premiered ? props.show.premiered : 'no data'}</small></h3>\r\n            <h3><b>status:</b> <small>{props.show.status ? props.show.status : 'no data'}</small></h3>\r\n            <h3><b>Rating:</b> <small>{props.show.rating.average}</small></h3>\r\n            <h3>\r\n              {/* since tvmaze api json has genre as an imbedded array,\r\n                pulls the data in genres in a key map to list all entries*/}\r\n              <b>Genre:</b> &nbsp;\r\n              <small>\r\n                {props.show.genres.map(genres => (\r\n                  <span key={props.show.genres}>\r\n                  {genres} &nbsp;\r\n                  </span>\r\n               ))} \r\n              </small>\r\n            </h3>\r\n          </Col>\r\n          <Col sm={{ size: 'auto', offset: 1 }} className=\"mr-5 mt-3\">\r\n            <img src={props.show.image ? props.show.image.medium : noimage} alt=\"no image\"/>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"m-3\">\r\n            <h4>Summary:<br /><small>{props.show.summary.replace(/<[/]?p>/g, '').replace(/<[/]?b>/g, '').replace(/<[/]?i>/g, '')}</small></h4>\r\n        </Row>\r\n        <Row className=\"m-3\">\r\n          <h3>Link: \r\n            <small className=\"ml-2\">\r\n              <a href={props.show.url}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  title={props.show.url}>\r\n              {props.show.name ? props.show.name : 'null'} \r\n              </a>\r\n            </small>\r\n          </h3>\r\n        </Row>\r\n        <h2>Cast:</h2>\r\n        <div className=\"d-flex flex-wrap justify-content-left\">\r\n          {props.show._embedded.cast.map(cast => (\r\n            <div key={cast.person.id}>\r\n              <Card className=\"m-2\">\r\n                <CardTitle className=\"m-4 text-center\" style={TvTitle}>{cast.person.name}</CardTitle>\r\n                <CardBody>\r\n                  <div>\r\n                    <CardImg className=\"p-2\" style={TvImage} src={cast.person.image.medium? cast.person.image.medium: noimage} alt=\"castimage\" />\r\n                  </div>\r\n                  <div className=\"text-center my-2\">\r\n                    <h4 style={TvCast}>As:<small className=\"ml-2\">{cast.character.name}</small></h4>\r\n                  </div>\r\n                </CardBody>\r\n                <Button className=\"btn-dark mt-5\">\r\n                  <a className=\"btn-dark w-100\" \r\n                    href={cast.person.url}\r\n                    target=\"_blank\" \r\n                    rel=\"noopener noreferrer\"> \r\n                      Actor page\r\n                  </a>\r\n                </Button>\r\n              </Card>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"mt-4\">\r\n          <h1>Episodes:</h1>\r\n          <ReactTable\r\n            className= \"-striped -highlight\"\r\n            data= {props.show._embedded.episodes}\r\n            defaultPageSize={20}\r\n            style={{\r\n              height: \"600px\",\r\n              fontSize: \"14px\" // This will force the table body to overflow and scroll, since there is not enough room\r\n            }}\r\n            filterable\r\n            defaultFilterMethod={(filter, row) =>\r\n              String(row[filter.id]) === filter.value}\r\n            columns= {[\r\n              {\r\n                Header: \"Season\",\r\n                id: \"season\",\r\n                accessor: d => d.season,\r\n                width: 70,\r\n                style: {'textAlign': 'center'},\r\n\r\n\r\n                Filter: ({ show, fieldName, filter, onChange }) => {\r\n                  return (\r\n                    <select\r\n                      onChange={event => onChange(event.target.value)}\r\n                      style={{ width: \"100%\" }}\r\n                      value={filter ? filter.value : ''}> \r\n                      <option value= ''>Show All</option>\r\n                      {show\r\n                        .map(item => item[fieldName])\r\n                        .filter((item, i, s) => s.lastIndexOf(item) == i)\r\n                        .map(function (value) {\r\n                          return (\r\n                            <option key={value} value={value}>\r\n                              {value}\r\n                            </option>\r\n                          );\r\n                        })\r\n                      }\r\n                    </select>\r\n                  );\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              },\r\n              {\r\n                Header: \"Episode #\",\r\n                accessor: \"number\",\r\n                width: 80,\r\n                style: {'textAlign': 'center'}\r\n              },\r\n              {\r\n                Header:\"Name\",\r\n                id: \"name\",\r\n                accessor: d =>\r\n                <a href={d.url} target=\"_blank\" rel=\"noopener noreferrer\">{d.name}</a>, \r\n                minWidth: 70,\r\n                style: { 'whiteSpace': 'unset', 'textAlign': 'center' },\r\n              },\r\n              {\r\n                Header:\"Summary\",\r\n                id: \"summary\",\r\n                accessor: d => \r\n                d.summary != null && <span>{d.summary.replace(/<[/]?p>/g, '')}</span>,\r\n                style: { 'whiteSpace': 'unset' },\r\n              }\r\n            ]}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Layout2>\r\n  </Layout>\r\n);\r\n\r\ntvPost.getInitialProps = async function(context) {\r\n  const { id } = context.query;\r\n  //pules tvmaze api json based on selected show on the search page.\r\n  const res = await fetch(`https://api.tvmaze.com/shows/${id}?embed[]=episodes&embed[]=cast&embed[]=seasons`);\r\n  const show = await res.json();\r\n  \r\n  console.log(show);\r\n\r\n  console.log(`Fetched show: ${show.name}`);\r\n\r\n  return { show };\r\n};\r\n\r\nexport default tvPost;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAIA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AA5BA;AAuCA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AANA;AASA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AALA;AAhEA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5EA;AACA;AA0JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAIA;AAEA;AAEA;AARA;AAUA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAYA;;;;A","sourceRoot":""}