/// <reference types="node" />
import { Socket } from "net";
import { URL } from "url";
import { Http1Options } from "./core";
import { Request } from "./request";
export interface ConnectOptions {
    rejectUnauthorized: boolean | undefined;
    createConnection: () => Socket;
}
export interface SocketAndCleanup {
    socket: Socket;
    cleanup: () => void;
}
export interface FreeSocketInfoWithSocket extends SocketAndCleanup {
    shouldCreateNew: boolean;
}
export interface FreeSocketInfoWithoutSocket {
    socket: never;
    cleanup: never;
    shouldCreateNew: boolean;
}
export declare type FreeSocketInfo = FreeSocketInfoWithSocket | FreeSocketInfoWithoutSocket;
export declare class H1Context {
    private contextPool;
    constructor(options: Partial<Http1Options>);
    getFreeSocketForOrigin(origin: string): FreeSocketInfo;
    addUsedSocket(origin: string, socket: Socket): () => void;
    waitForSocket(origin: string): Promise<SocketAndCleanup>;
    connect(url: URL, extraOptions: ConnectOptions, request: Request): import("http").ClientRequest;
    makeNewConnection(url: string): Promise<Socket>;
    disconnect(url: string): void;
    disconnectAll(): void;
}
