/// <reference types="node" />
import { Server as HttpServer } from "http";
import { Http2Server, IncomingHttpHeaders, SecureServerOptions, ServerHttp2Stream } from "http2";
import { Server as HttpsServer } from "https";
import { HttpProtocols } from "../../index";
export interface TestData {
    proto: "http:" | "https:";
    version: HttpProtocols;
}
export interface MatchData {
    path: string;
    stream: ServerHttp2Stream;
    headers: IncomingHttpHeaders;
}
export declare type Matcher = (matchData: MatchData) => boolean;
export declare const ignoreError: (cb: () => any) => void;
export interface ServerOptions {
    port?: number;
    matchers?: ReadonlyArray<Matcher>;
    serverOptions?: SecureServerOptions;
}
export declare abstract class Server {
    port: number | null;
    protected _opts: ServerOptions;
    protected _server: HttpServer | HttpsServer | Http2Server;
    listen(port?: number | undefined): Promise<number>;
    shutdown(): Promise<void>;
    protected _shutdown(): Promise<void>;
}
export declare abstract class TypedServer<ServerType extends HttpServer | HttpsServer | Http2Server> extends Server {
    protected _server: ServerType;
}
