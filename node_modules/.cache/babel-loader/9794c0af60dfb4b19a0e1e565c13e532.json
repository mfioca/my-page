{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport { SetheroConstAdj, SetheroHitAdj, SetheroDmgAdj, SetheroacAdj, setherostats, heroattackroll } from './herofunctions';\nimport { SetmonsterConstAdj, SetmonsterHitAdj, SetmonsterDmgAdj, SetmonsteracAdj, setmonsterstats, monsterattackroll } from './monsterfunctions';\n\nvar AttackSim =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AttackSim, _React$Component);\n\n  function AttackSim(props) {\n    var _this;\n\n    _classCallCheck(this, AttackSim);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AttackSim).call(this, props));\n    _this.state = {\n      herostats: {\n        Str: 0,\n        Const: 0,\n        Dext: 0\n      },\n      herobase: {\n        Hp: 50,\n        ArmorClass: 10,\n        Damage: 10,\n        HitAdj: 0\n      },\n      monsterstats: {\n        Str: 0,\n        Const: 0,\n        Dext: 0\n      },\n      monsterbase: {\n        Name: '',\n        Hp: 50,\n        ArmorClass: 10,\n        Damage: 10,\n        HitAdj: 0\n      },\n      heroHp: 0,\n      heroAc: 0,\n      heroDmg: 0,\n      heroHitAdj: 0,\n      heroName: '',\n      heroinitiative: 0,\n      heroroll: 0,\n      herodidhit: '',\n      monsterHp: 0,\n      monsterAc: 0,\n      monsterDmg: 0,\n      monsterHitAdj: 0,\n      monsterName: '',\n      monsterinitiative: 0,\n      monsterroll: 0,\n      monsterdidhit: ''\n    }; //Hero bind function statements\n\n    _this.setherostats = setherostats.bind(_assertThisInitialized(_this));\n    _this.SetheroConstAdj = SetheroConstAdj.bind(_assertThisInitialized(_this));\n    _this.SetheroacAdj = SetheroacAdj.bind(_assertThisInitialized(_this));\n    _this.SetheroDmgAdj = SetheroDmgAdj.bind(_assertThisInitialized(_this));\n    _this.SetheroHitAdj = SetheroHitAdj.bind(_assertThisInitialized(_this));\n    _this.heroNameChange = _this.heroNameChange.bind(_assertThisInitialized(_this));\n    _this.heroattackroll = heroattackroll.bind(_assertThisInitialized(_this)); //monster bind function statements\n\n    _this.setmonsterstats = setmonsterstats.bind(_assertThisInitialized(_this));\n    _this.SetmonsterConstAdj = SetmonsterConstAdj.bind(_assertThisInitialized(_this));\n    _this.SetmonsteracAdj = SetmonsteracAdj.bind(_assertThisInitialized(_this));\n    _this.SetmonsterDmgAdj = SetmonsterDmgAdj.bind(_assertThisInitialized(_this));\n    _this.SetmonsterHitAdj = SetmonsterHitAdj.bind(_assertThisInitialized(_this));\n    _this.monsterNameChange = _this.monsterNameChange.bind(_assertThisInitialized(_this));\n    _this.monsterattackroll = monsterattackroll.bind(_assertThisInitialized(_this));\n    _this.rollforiniative = _this.rollforiniative.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AttackSim, [{\n    key: \"heroNameChange\",\n    value: function heroNameChange(event) {\n      this.setState({\n        heroName: event.target.value\n      });\n    }\n  }, {\n    key: \"monsterNameChange\",\n    value: function monsterNameChange(event) {\n      this.setState({\n        monsterName: event.target.value\n      });\n    }\n  }, {\n    key: \"rollforiniative\",\n    value: function rollforiniative() {\n      this.Heroinitiative = Math.floor(Math.random() * 10 + 1);\n      this.Monsterinitiative = Math.floor(Math.random() * 10 + 1); //if hero 1-10 role is lower, hero goes first.\n\n      if (this.Heroinitiative < this.Monsterinitiative) {\n        this.setState({\n          heroinitiative: 'First',\n          monsterinitiative: 'Second'\n        }); //if monster 1-10 role is lower, monster goes first\n      } else if (this.Heroinitiative > this.Monsterinitiative) {\n        this.setState({\n          monsterinitiative: 'First',\n          heroinitiative: 'Second'\n        });\n      } else {\n        //if both have same result, roll again\n        this.setState({\n          heroinitiative: 'ReRoll',\n          monsterinitiative: 'ReRoll'\n        });\n      }\n\n      ; //clears out the hit/miss comments since it is a new round.\n\n      this.setState({\n        herodidhit: '',\n        monsterdidhit: ''\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", null, React.createElement(\"div\", {\n        className: \"DandD_character Fsize-2\"\n      }, React.createElement(\"div\", {\n        className: \"Hero\"\n      }, React.createElement(\"div\", {\n        className: \"HeroBox\"\n      }, React.createElement(\"div\", null, React.createElement(\"p\", null, React.createElement(\"b\", null, \"Name: \"), this.state.heroName), React.createElement(\"table\", {\n        className: \"DandDstat_table\"\n      }, React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Strength:\"), React.createElement(\"td\", null, \" \", this.state.herostats.Str)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Constitution:\"), React.createElement(\"td\", null, \" \", this.state.herostats.Const)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Dexterity:\"), React.createElement(\"td\", null, \" \", this.state.herostats.Dext)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Hitpoints:\"), React.createElement(\"td\", null, \" \", this.state.heroHp)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Damage per Hit:\"), React.createElement(\"td\", null, \" \", this.state.heroDmg)))), React.createElement(\"div\", null, React.createElement(\"img\", {\n        className: \"DnD_Hero Float-right\",\n        src: \"../static/images/hero.png\",\n        alt: \"hero\"\n      }))), React.createElement(\"div\", {\n        className: \"Stats-roll align-center\"\n      }, React.createElement(\"button\", {\n        onClick: this.setherostats\n      }, \"Set Attrubutes\")), React.createElement(\"div\", null, React.createElement(\"form\", null, React.createElement(\"label\", null, \"Name:\", React.createElement(\"input\", {\n        type: \"text\",\n        maxLength: \"20\",\n        value: this.state.value,\n        onChange: this.heroNameChange\n      }))))), React.createElement(\"div\", {\n        className: \"Monster\"\n      }, React.createElement(\"div\", {\n        className: \"MonsterBox\"\n      }, React.createElement(\"div\", null, React.createElement(\"p\", null, React.createElement(\"b\", null, \"Name: \"), this.state.monsterName), React.createElement(\"table\", {\n        className: \"DandDstat_table\"\n      }, React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Strength:\"), React.createElement(\"td\", null, \" \", this.state.monsterstats.Str)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Constitution:\"), React.createElement(\"td\", null, \" \", this.state.monsterstats.Const)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Dexterity:\"), React.createElement(\"td\", null, \" \", this.state.monsterstats.Dext)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Hitpoints:\"), React.createElement(\"td\", null, \" \", this.state.monsterHp)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Damage per Hit:\"), React.createElement(\"td\", null, \" \", this.state.monsterDmg)))), React.createElement(\"div\", null, React.createElement(\"img\", {\n        className: \"DnD_Monster Float-right\",\n        src: \"../static/images/monster.png\",\n        alt: \"monster\"\n      }))), React.createElement(\"div\", {\n        className: \"Stats-roll align-center\"\n      }, React.createElement(\"button\", {\n        onClick: this.setmonsterstats\n      }, \"Set Attrubutes\")), React.createElement(\"div\", null, React.createElement(\"form\", null, React.createElement(\"label\", null, \"Name:\", React.createElement(\"input\", {\n        type: \"text\",\n        maxLength: \"20\",\n        value: this.state.value,\n        onChange: this.monsterNameChange\n      })))))), React.createElement(\"div\", {\n        className: \"Attack-section\"\n      }, React.createElement(\"div\", {\n        className: \"AC-Icon\"\n      }, React.createElement(\"img\", {\n        src: \"../static/images/acicon.png\",\n        alt: \"shield\"\n      }), React.createElement(\"p\", {\n        className: \"AC-Icon-text Fsize-3\"\n      }, this.state.heroAc)), React.createElement(\"div\", {\n        className: \"HitAdj-Icon\"\n      }, React.createElement(\"img\", {\n        src: \"../static/images/hitadjust.png\",\n        alt: \"icon\"\n      }), React.createElement(\"p\", {\n        className: \"HitAdj-Icon-text Fsize-3\"\n      }, this.state.heroHitAdj)), React.createElement(\"div\", {\n        className: \"Attack-roll\"\n      }, React.createElement(\"button\", {\n        onClick: this.heroattackroll\n      }, \"Hero Roll for Attack\")), React.createElement(\"div\", {\n        className: \"Attack-result Fsize-3 center\"\n      }, this.state.herodidhit)), React.createElement(\"div\", {\n        className: \"Attack-section\"\n      }, React.createElement(\"div\", {\n        className: \"Initiative DandD_button\"\n      }, React.createElement(\"button\", {\n        onClick: this.rollforiniative\n      }, \"Roll for iniative\")), React.createElement(\"div\", {\n        className: \"Heroinitiative center Fsize-2\"\n      }, React.createElement(\"p\", null, \"Hero \", React.createElement(\"br\", null), \"iniative:\"), React.createElement(\"p\", {\n        className: \"Fsize-3\"\n      }, this.state.heroinitiative)), React.createElement(\"div\", {\n        className: \"Monsterinitiative center Fsize-2\"\n      }, React.createElement(\"p\", null, \"Monster initiative:\"), React.createElement(\"p\", {\n        className: \"Fsize-3\"\n      }, this.state.monsterinitiative)), React.createElement(\"div\", {\n        className: \"HeroHP-icon\"\n      }, React.createElement(\"img\", {\n        src: \"../static/images/herohp.png\",\n        alt: \"icon\"\n      }), React.createElement(\"p\", {\n        className: \"HeroHP-text Fsize-3 center\"\n      }, this.state.heroHp)), React.createElement(\"div\", {\n        className: \"MonsterHP-icon\"\n      }, React.createElement(\"img\", {\n        src: \"../static/images/monsterhp.png\",\n        alt: \"icon\"\n      }), React.createElement(\"p\", {\n        className: \"MonsterHP-text Fsize-3 center\"\n      }, this.state.monsterHp))), React.createElement(\"div\", {\n        className: \"Attack-section\"\n      }, React.createElement(\"div\", {\n        className: \"AC-Icon\"\n      }, React.createElement(\"img\", {\n        src: \"../static/images/acicon.png\",\n        alt: \"shield\"\n      }), React.createElement(\"p\", {\n        className: \"AC-Icon-text Fsize-3\"\n      }, this.state.monsterAc)), React.createElement(\"div\", {\n        className: \"HitAdj-Icon\"\n      }, React.createElement(\"img\", {\n        src: \"../static/images/hitadjust.png\",\n        alt: \"icon\"\n      }), React.createElement(\"p\", {\n        className: \"HitAdj-Icon-text Fsize-3\"\n      }, this.state.monsterHitAdj)), React.createElement(\"div\", {\n        className: \"Attack-roll\"\n      }, React.createElement(\"button\", {\n        onClick: this.monsterattackroll\n      }, \"Monster Roll for Attack\")), React.createElement(\"div\", {\n        className: \"Attack-result Fsize-3 center\"\n      }, this.state.monsterdidhit)));\n    }\n  }]);\n\n  return AttackSim;\n}(React.Component);\n\nexport default AttackSim;","map":null,"metadata":{},"sourceType":"module"}