{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\newtest\\\\my-page\\\\pages\\\\test_items\\\\jsonsearch.js\";\nimport React, { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { createSorter } from './sort';\n\nvar List =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(List, _Component);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      sorters: _this.props.sorters\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoad\", function (data) {\n      _this.setState({\n        data: _this.parseData(data)\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      fetch('/something.json').then(function (res) {\n        return res.json();\n      }).then(this.onLoad);\n    }\n  }, {\n    key: \"parseData\",\n    value: function parseData(data) {\n      var sorters = this.state.sorters;\n\n      if (data && data.length) {\n        if (_Array$isArray(sorters) && sorters.length) {\n          data.sort(createSorter.apply(void 0, _toConsumableArray(sorters)));\n        }\n      }\n\n      return data;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = this.state.data;\n      return data ? this.renderData(data) : this.renderLoading();\n    }\n  }, {\n    key: \"renderData\",\n    value: function renderData(data) {\n      if (data && data.length > 0) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, data.map(function (item) {\n          return React.createElement(\"div\", {\n            key: item.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            href: \"mailto:$(item.email)\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, item.name), \" \", item.company);\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, \"No items found\");\n      }\n    }\n  }, {\n    key: \"renderLoading\",\n    value: function renderLoading() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }]);\n\n  return List;\n}(Component);\n/* unsorted list....\r\nclass List extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data\r\n        };\r\n    }\r\n  \r\n    componentDidMount () {\r\n        fetch('/something.json')\r\n        .then(res => res.json())\r\n        .then(this.onLoad);\r\n    }\r\n  \r\n    parseData (response) {\r\n      return response.data;\r\n    }\r\n  \r\n    onLoad = (data) => {\r\n      this.setState({\r\n        data: this.parseData(data)\r\n      });\r\n    }\r\n  \r\n    render () {\r\n      const { data } = this.state;\r\n  \r\n      return data ?\r\n        this.renderData(data) :\r\n        this.renderLoading()\r\n    }\r\n  \r\n    renderData (data) {\r\n      if (data && data.length) {\r\n        return (\r\n          <div>\r\n            {\r\n              data.map(item => (\r\n                <div key={item.id}>\r\n                  <a href={`mailto:${item.email}`}>{item.name}</a> {item.company}\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n        );\r\n      } else {\r\n        return <div>No items found</div>\r\n      }\r\n    }\r\n  \r\n    renderLoading () {\r\n      return <div>Fetch is not working</div>\r\n    }\r\n  }\r\n*/\n\n\n_defineProperty(List, \"defaultProps\", {\n  sorters: [{\n    property: 'name'\n  }, {\n    property: 'company'\n  }]\n});\n\nexport default List;","map":{"version":3,"sources":["C:\\Users\\Mark\\Desktop\\newtest\\my-page\\pages\\test_items\\jsonsearch.js"],"names":["React","Component","fetch","createSorter","List","sorters","props","data","setState","parseData","then","res","json","onLoad","state","length","sort","renderData","renderLoading","map","item","id","name","company","property"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,YAAT,QAA6B,QAA7B;;IAGMC,I;;;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,OAAO,EAAE,MAAKC,KAAL,CAAWD;AADd,K;;6DA8BC,UAAAE,IAAI,EAAI;AACf,YAAKC,QAAL,CAAc;AACZD,QAAAA,IAAI,EAAE,MAAKE,SAAL,CAAeF,IAAf;AADM,OAAd;AAGD,K;;;;;;;wCAtBmB;AAClBL,MAAAA,KAAK,CAAC,iBAAD,CAAL,CACCQ,IADD,CACM,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OADT,EAECF,IAFD,CAEM,KAAKG,MAFX;AAGD;;;8BAESN,I,EAAM;AAAA,UACNF,OADM,GACM,KAAKS,KADX,CACNT,OADM;;AAGd,UAAIE,IAAI,IAAIA,IAAI,CAACQ,MAAjB,EAAyB;AACvB,YAAI,eAAcV,OAAd,KAA0BA,OAAO,CAACU,MAAtC,EAA8C;AAC5CR,UAAAA,IAAI,CAACS,IAAL,CAAUb,YAAY,MAAZ,4BAAgBE,OAAhB,EAAV;AACD;AACF;;AAED,aAAOE,IAAP;AACD;;;6BAQQ;AAAA,UACCA,IADD,GACU,KAAKO,KADf,CACCP,IADD;AAGP,aAAOA,IAAI,GAAG,KAAKU,UAAL,CAAgBV,IAAhB,CAAH,GAA2B,KAAKW,aAAL,EAAtC;AACD;;;+BAEUX,I,EAAM;AACf,UAAIA,IAAI,IAAIA,IAAI,CAACQ,MAAL,GAAc,CAA1B,EAA6B;AAC3B,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGR,IAAI,CAACY,GAAL,CAAS,UAAAC,IAAI;AAAA,iBACZ;AAAK,YAAA,GAAG,EAAEA,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAG,YAAA,IAAI,wBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAkCD,IAAI,CAACE,IAAvC,CADF,OACoDF,IAAI,CAACG,OADzD,CADY;AAAA,SAAb,CADH,CADF;AASD,OAVD,MAUO;AACL,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AACD;AACF;;;oCAEe;AACd,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;;;EA7DgBtB,S;AAkEnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAlEMG,I,kBAKkB;AACpBC,EAAAA,OAAO,EAAE,CAAC;AACRmB,IAAAA,QAAQ,EAAE;AADF,GAAD,EAEN;AACDA,IAAAA,QAAQ,EAAE;AADT,GAFM;AADW,C;;AAqHxB,eAAepB,IAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport fetch from 'isomorphic-unfetch';\r\nimport { createSorter } from './sort';\r\n\r\n\r\nclass List extends Component {\r\n  state = {\r\n    sorters: this.props.sorters\r\n  };\r\n\r\n  static defaultProps = {\r\n    sorters: [{\r\n      property: 'name'\r\n    }, {\r\n      property: 'company'\r\n    }]\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch('/something.json')\r\n    .then(res => res.json())\r\n    .then(this.onLoad);\r\n  }\r\n\r\n  parseData(data) {\r\n    const { sorters } = this.state;\r\n\r\n    if (data && data.length) {\r\n      if (Array.isArray(sorters) && sorters.length) {\r\n        data.sort(createSorter(...sorters));\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  onLoad = data => {\r\n    this.setState({\r\n      data: this.parseData(data)\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { data } = this.state;\r\n\r\n    return data ? this.renderData(data) : this.renderLoading();\r\n  }\r\n\r\n  renderData(data) {\r\n    if (data && data.length > 0) {\r\n      return (\r\n        <div>\r\n          {data.map(item => (\r\n            <div key={item.id}>\r\n              <a href={`mailto:$(item.email)`}>{item.name}</a> {item.company}\r\n              </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>No items found</div>;\r\n    }\r\n  }\r\n\r\n  renderLoading() {\r\n    return <div>Loading...</div>;\r\n  }\r\n}\r\n\r\n\r\n\r\n/* unsorted list....\r\nclass List extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data\r\n        };\r\n    }\r\n  \r\n    componentDidMount () {\r\n        fetch('/something.json')\r\n        .then(res => res.json())\r\n        .then(this.onLoad);\r\n    }\r\n  \r\n    parseData (response) {\r\n      return response.data;\r\n    }\r\n  \r\n    onLoad = (data) => {\r\n      this.setState({\r\n        data: this.parseData(data)\r\n      });\r\n    }\r\n  \r\n    render () {\r\n      const { data } = this.state;\r\n  \r\n      return data ?\r\n        this.renderData(data) :\r\n        this.renderLoading()\r\n    }\r\n  \r\n    renderData (data) {\r\n      if (data && data.length) {\r\n        return (\r\n          <div>\r\n            {\r\n              data.map(item => (\r\n                <div key={item.id}>\r\n                  <a href={`mailto:${item.email}`}>{item.name}</a> {item.company}\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n        );\r\n      } else {\r\n        return <div>No items found</div>\r\n      }\r\n    }\r\n  \r\n    renderLoading () {\r\n      return <div>Fetch is not working</div>\r\n    }\r\n  }\r\n*/\r\nexport default List;"]},"metadata":{},"sourceType":"module"}