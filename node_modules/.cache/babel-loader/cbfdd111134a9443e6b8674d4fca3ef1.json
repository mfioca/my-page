{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport { SetConstAdj } from './monster_functions';\nimport { setHitAdj } from './monster_functions';\nimport { setDmgAdj } from './monster_functions';\nimport { setacAdj } from './monster_functions';\nimport { MonsteradjStats } from './attacksim';\nexport { newMonster };\nvar newMonster = {\n  Str: 0,\n  Const: 0,\n  Dext: 0,\n  BaseHitPoints: 50,\n  BaseArmorClass: 10,\n  BaseDamage: 10,\n  BaseHitAdj: 0\n};\n\nvar Monster =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Monster, _React$Component);\n\n  function Monster(props) {\n    var _this;\n\n    _classCallCheck(this, Monster);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Monster).call(this, props));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Monster, [{\n    key: \"handleClick\",\n    value: function handleClick() {\n      //random number 1-20 to set newmonster stats\n      newMonster.Str = Math.floor(Math.random() * 20 + 1);\n      newMonster.Const = Math.floor(Math.random() * 20 + 1);\n      newMonster.Dext = Math.floor(Math.random() * 20 + 1); //calls the adjusted functions in monster_functions to set adjusted monster\n      //stats in the attacksim.js\n\n      MonsteradjStats.MonsterHp = newMonster.BaseHitPoints + SetConstAdj();\n      MonsteradjStats.MonsterAc = newMonster.BaseArmorClass + setacAdj();\n      MonsteradjStats.MonsterDmg = newMonster.BaseDamage + setDmgAdj();\n      MonsteradjStats.MonsterHitAdj = newMonster.BaseHitAdj + setHitAdj();\n      this.forceUpdate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", null, React.createElement(\"div\", null, React.createElement(\"p\", null, React.createElement(\"b\", null, \"Name: \"), \"Insert random Name Here\")), React.createElement(\"div\", null, React.createElement(\"table\", {\n        className: \"DandDstat_table\"\n      }, React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Strength:\"), React.createElement(\"td\", null, \" \", newMonster.Str)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Constitution:\"), React.createElement(\"td\", null, \" \", newMonster.Const)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Dexterity:\"), React.createElement(\"td\", null, \" \", newMonster.Dext)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Hitpoints:\"), React.createElement(\"td\", null, \" \", MonsteradjStats.MonsterHp)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Base Damage:\"), React.createElement(\"td\", null, \" \", MonsteradjStats.MonsterDmg)))), React.createElement(\"div\", {\n        className: \"Stats-roll\"\n      }, React.createElement(\"button\", {\n        onClick: this.handleClick\n      }, \"Set Attrubutes\")));\n    }\n  }]);\n\n  return Monster;\n}(React.Component);\n\nexport default Monster;","map":null,"metadata":{},"sourceType":"module"}