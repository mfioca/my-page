{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Documents\\\\github\\\\my-page\\\\pages\\\\tvpost.js\";\nimport React from \"react\";\nimport Layout from '../components/layout';\nimport Layout2 from './tv_info/MyLayout';\nimport { Card, CardImg, CardBody, CardTitle } from 'reactstrap';\nimport { TvImage } from './jsxstyles';\nimport fetch from 'isomorphic-unfetch';\nvar noimage = '/static/images/no-img.png';\n\nvar tvPost = function tvPost(props) {\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"the below content has been imported from\", React.createElement(\"a\", {\n    href: \"https://www.tvmaze.com\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"TVmaze.com\")), React.createElement(Layout2, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, props.show.name), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Type:\"), \" \", React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, props.show.type ? props.show.type : 'no data')), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Premiered:\"), \" \", React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, props.show.premiered ? props.show.premiered : 'no data')), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"status:\"), \" \", React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, props.show.status ? props.show.status : 'no data')), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Rating:\"), \" \", React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, props.show.rating.average ? props.show.average : 'no data')), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Genre:\"), \" \\xA0\", React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, props.show.genres.map(function (genre) {\n    return React.createElement(\"span\", {\n      key: props.show.genres,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, genre, \" \\xA0\");\n  }))), React.createElement(\"img\", {\n    src: props.show.image ? props.show.image.medium : noimage,\n    alt: \"no image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, props.show.summary.replace(/<[/]?p>/g, '').replace(/<[/]?b>/g, '').replace(/<[/]?i>/g, ''))), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Link:\", React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: props.show.url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    title: props.show.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, props.show.name ? props.show.name : 'null'))), React.createElement(\"div\", {\n    className: \"d-flex flex-wrap justify-content-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Cast:\"), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), props.show._embedded.cast.map(function (cast) {\n    return React.createElement(\"div\", {\n      key: cast.person.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(CardTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, cast.person.name), React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(CardImg, {\n      style: TvImage,\n      src: cast.person.image.medium ? cast.person.image.medium : noimage,\n      alt: \"castimage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"As: \", cast.character.name), React.createElement(\"a\", {\n      href: cast.person._links.self.href,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \" Actor page\"))));\n  })))));\n};\n\ntvPost.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var id, res, show;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            id = context.query.id; //pules tvmaze api json based on selected show on the search page.\n\n            _context.next = 3;\n            return fetch(\"https://api.tvmaze.com/shows/\".concat(id, \"?embed[]=cast\"));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            show = _context.sent;\n            console.log(show);\n            console.log(\"Fetched show: \".concat(show.name));\n            return _context.abrupt(\"return\", {\n              show: show\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default tvPost;","map":{"version":3,"sources":["C:\\Users\\Mark\\Documents\\github\\my-page\\pages\\tvpost.js"],"names":["Layout","Layout2","Card","CardImg","CardBody","CardTitle","TvImage","fetch","noimage","tvPost","props","show","name","type","premiered","status","rating","average","genres","map","genre","image","medium","summary","replace","url","_embedded","cast","person","id","character","_links","self","href","getInitialProps","context","query","res","json","console","log"],"mappings":"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","sourcesContent":["import Layout from '../components/layout'\r\nimport Layout2 from './tv_info/MyLayout'\r\nimport { Card, CardImg, CardBody, CardTitle } from 'reactstrap'\r\nimport { TvImage } from './jsxstyles'\r\nimport fetch from 'isomorphic-unfetch'\r\n\r\nconst noimage = '/static/images/no-img.png'\r\n\r\n\r\nconst tvPost = props => (\r\n  <Layout>\r\n    <h1 className=\"text-center\">the below content has been imported from \r\n      <a href=\"https://www.tvmaze.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        TVmaze.com\r\n      </a>\r\n    </h1>\r\n    <Layout2>\r\n      <div className=\"h3\">\r\n        <h1>{props.show.name}</h1>\r\n        <h3><b>Type:</b> <small>{props.show.type ? props.show.type : 'no data'}</small></h3>\r\n        <h3><b>Premiered:</b> <small>{props.show.premiered ? props.show.premiered : 'no data'}</small></h3>\r\n        <h3><b>status:</b> <small>{props.show.status ? props.show.status : 'no data'}</small></h3>\r\n        <h3><b>Rating:</b> <small>{props.show.rating.average ? props.show.average : 'no data'}</small></h3>\r\n        <h3>\r\n          {/* since tvmaze api json has genre as an imbedded array,\r\n            pulls the data in genres in a key map to list all entries*/}\r\n          <b>Genre:</b> &nbsp;\r\n          <small>\r\n            {props.show.genres.map(genre => (\r\n              <span key={props.show.genres}>\r\n              {genre} &nbsp;\r\n              </span>\r\n            ))}\r\n          </small>\r\n        </h3>\r\n        <img src={props.show.image ? props.show.image.medium : noimage} alt=\"no image\"/>\r\n        <h4><small>{props.show.summary.replace(/<[/]?p>/g, '').replace(/<[/]?b>/g, '').replace(/<[/]?i>/g, '')}</small></h4>\r\n        <h3>Link: \r\n          <small>\r\n            <a href={props.show.url}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                title={props.show.url}>\r\n            {props.show.name ? props.show.name : 'null'} \r\n            </a>\r\n          </small>\r\n        </h3>\r\n        <div className=\"d-flex flex-wrap justify-content-left\">\r\n            <h2>Cast:</h2> < br />\r\n            {props.show._embedded.cast.map(cast => (\r\n              <div key={cast.person.id}>\r\n                <Card>\r\n                  <CardTitle>{cast.person.name}</CardTitle>\r\n                  <CardBody>\r\n                    <CardImg style={TvImage} src={cast.person.image.medium? cast.person.image.medium: noimage} alt=\"castimage\" />\r\n                    <h4>As: {cast.character.name}</h4>\r\n                    <a href={cast.person._links.self.href}> Actor page</a>\r\n                  </CardBody>\r\n                </Card>\r\n                \r\n                </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </Layout2>\r\n  </Layout>\r\n);\r\n\r\ntvPost.getInitialProps = async function(context) {\r\n  const { id } = context.query;\r\n  //pules tvmaze api json based on selected show on the search page.\r\n  const res = await fetch(`https://api.tvmaze.com/shows/${id}?embed[]=cast`);\r\n  const show = await res.json();\r\n  \r\n  console.log(show);\r\n\r\n  console.log(`Fetched show: ${show.name}`);\r\n\r\n  return { show };\r\n};\r\n\r\nexport default tvPost;"]},"metadata":{},"sourceType":"module"}