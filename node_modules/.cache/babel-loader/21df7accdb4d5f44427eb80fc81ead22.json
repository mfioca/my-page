{"ast":null,"code":"var dirMap = {\n  // greater-than\n  gt: {\n    asc: 1,\n    desc: -1\n  },\n  // less-than\n  lt: {\n    asc: -1,\n    desc: 1\n  }\n};\n\nvar doSort = function doSort(A, B, property) {\n  var direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'ASC';\n  var a = A[property];\n  var b = B[property];\n\n  if (a < b) {\n    return dirMap.lt[direction.toLowerCase()];\n  }\n\n  if (a > b) {\n    return dirMap.gt[direction.toLowerCase()];\n  }\n\n  return 0;\n};\n\nvar createSorter = function createSorter() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (typeof args[0] === 'string') {\n    args = [{\n      direction: args[1],\n      property: args[0]\n    }];\n  }\n\n  return function (A, B) {\n    var ret = 0;\n    args.some(function (sorter) {\n      var property = sorter.property,\n          _sorter$direction = sorter.direction,\n          direction = _sorter$direction === void 0 ? 'ASC' : _sorter$direction;\n      var value = doSort(A, B, property, direction);\n\n      if (value === 0) {\n        // they are equal, continue to next sorter if any\n        return false;\n      } else {\n        // they are different, stop at current sorter\n        ret = value;\n        return true;\n      }\n    });\n    return ret;\n  };\n};\n\nexport { createSorter };","map":null,"metadata":{},"sourceType":"module"}