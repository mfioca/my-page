{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\newtest\\\\my-page\\\\pages\\\\provider_data\\\\providerimport.js\";\nimport React, { Component } from 'react';\nimport { createFilter } from './Filter';\nimport { createSorter } from './sort';\nimport ReactTable from 'react-table';\nimport \"react-table/react-table.css\";\n\nvar data = require('./provider.json');\n\nfunction filterCaseInsensitive(filter, row) {\n  var id = filter.pivotId || filter.id;\n  return row[id] !== undefined ? String(row[id].toLowerCase()).startsWith(filter.value.toLowerCase()) : true;\n}\n\nvar ProviderList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProviderList, _Component);\n\n  function ProviderList(props) {\n    _classCallCheck(this, ProviderList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProviderList).call(this, props));\n    /*\r\n    this.state = {\r\n      filters: this.props.filters,\r\n      sorter: this.props.sorter\r\n    };*/\n  }\n  /*\r\n    static defaultProps = {\r\n      filters: [{\r\n        property: 'Type',\r\n        value: ''\r\n      }, {\r\n        property: test1.region.property,\r\n        value: test1.region.value\r\n      }, {\r\n        property: 'County',\r\n        value: ''\r\n      }, {\r\n        property: 'WCHR',\r\n        value: ''\r\n      }, {\r\n        property: 'Stretcher',\r\n        value: ''\r\n      }],\r\n      sorter: [{\r\n        property: 'name'\r\n      }, {\r\n        property: 'county'\r\n      }]\r\n    };*/\n\n\n  _createClass(ProviderList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      fetch(\"/provider.json\").then(function (res) {\n        return res.json();\n      });\n    }\n  }, {\n    key: \"parseData\",\n    value: function parseData(data) {\n      var sorter = this.state.sorter;\n\n      if (data && data.length) {\n        if (_Array$isArray(sorter) && sorter.length) {\n          data.sort(createSorter.apply(void 0, _toConsumableArray(sorter)));\n        }\n      }\n\n      return data;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //const  data   = this.parseData(data);\n      return data ? this.renderData(data) : this.renderLoading();\n    }\n  }, {\n    key: \"renderData\",\n    value: function renderData(data) {\n      /*const { filters } = this.state;\r\n      \r\n      if (data && data.length > 0) {\r\n        if (Array.isArray(filters) && filters.length) {\r\n          data = data.filter(createFilter(...filters));\r\n        }*/\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(ReactTable, {\n        data: data,\n        filterable: true,\n        defaultFilterMethod: function defaultFilterMethod(filter, row) {\n          return filterCaseInsensitive(filter, row);\n        },\n        columns: [{\n          Header: \"Provider\",\n          columns: [{\n            Header: \"Name\",\n            accessor: \"Name\",\n            sortMethod: function sortMethod(a, b) {\n              if (a.length === b.length) {\n                return a > b ? 1 : -1;\n              }\n\n              return a.length > b.length ? 1 : -1;\n            }\n          }]\n        }, {\n          Header: \"Provider Info\",\n          columns: [{\n            Header: \"Type\",\n            id: \"Type\",\n            accessor: function accessor(d) {\n              return d.Type;\n            }\n          }, {\n            Header: \"Region\",\n            id: \"Region\",\n            accessor: function accessor(d) {\n              return d.Region;\n            }\n          }, {\n            Header: \"County\",\n            id: \"County\",\n            accessor: function accessor(d) {\n              return d.County;\n            }\n          }]\n        }, {\n          Header: \"Level of Service\",\n          columns: [{\n            Header: \"Ambulatory\",\n            accessor: \"Amb\"\n          }, {\n            Header: \"Wheelchair\",\n            id: \"WCHR\",\n            accessor: function accessor(d) {\n              return d.WCHR;\n            }\n          }, {\n            Header: \"Stretcher\",\n            id: \"Stretcher\",\n            accessor: function accessor(d) {\n              return d.Stretcher;\n            }\n          }]\n        }],\n        defaultPageSize: 20,\n        style: {\n          height: \"400px\" // This will force the table body to overflow and scroll, since there is not enough room\n\n        },\n        className: \"ReactTable Provider-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }));\n    }\n    /*else {\r\n      return <div>No items found</div>;\r\n    }\r\n    }*/\n\n  }, {\n    key: \"renderLoading\",\n    value: function renderLoading() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }]);\n\n  return ProviderList;\n}(Component);\n\nexport default ProviderList;\n/* codxe used while working on generating page\r\nrender () {\r\n   \r\n    const  {sorter}  = this.state;\r\n \r\n     if (data && data.length > 0) {\r\n       if (Array.isArray(sorter) && sorter.length) {\r\n         data.sort(createSorter(...sorter));\r\n       }\r\n     }\r\n \r\n     return (\r\n       \r\n       <div>\r\n                   \r\n         {\r\n           data.map(item => (\r\n             <div key={item.id}>\r\n               <span>{item.id}</span>&nbsp;&nbsp;\r\n               \r\n               <span><a href={`mailto:${item.email}`}>{item.name}</a></span>;&nbsp; \r\n               <span>{item.company}</span>\r\n             </div>\r\n           ))\r\n         }\r\n       </div>\r\n       \r\n     );\r\n   } \r\n   }\r\n\n\nexport default List;*/","map":{"version":3,"sources":["C:\\Users\\Mark\\Desktop\\newtest\\my-page\\pages\\provider_data\\providerimport.js"],"names":["React","Component","createFilter","createSorter","ReactTable","data","require","filterCaseInsensitive","filter","row","id","pivotId","undefined","String","toLowerCase","startsWith","value","ProviderList","props","fetch","then","res","json","sorter","state","length","sort","renderData","renderLoading","Header","columns","accessor","sortMethod","a","b","d","Type","Region","County","WCHR","Stretcher","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { createFilter } from './Filter';\r\nimport { createSorter } from './sort';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\n\r\nvar data = require('./provider.json');\r\n\r\n\r\nfunction filterCaseInsensitive(filter, row) {\r\n  const id = filter.pivotId || filter.id;\r\n  return (\r\n      row[id] !== undefined ?\r\n          String(row[id].toLowerCase()).startsWith(filter.value.toLowerCase())\r\n      :\r\n          true\r\n  );\r\n}\r\n\r\nclass ProviderList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    /*\r\n    this.state = {\r\n      filters: this.props.filters,\r\n      sorter: this.props.sorter\r\n  };*/\r\n}\r\n\r\n/*\r\n  static defaultProps = {\r\n    filters: [{\r\n      property: 'Type',\r\n      value: ''\r\n    }, {\r\n      property: test1.region.property,\r\n      value: test1.region.value\r\n    }, {\r\n      property: 'County',\r\n      value: ''\r\n    }, {\r\n      property: 'WCHR',\r\n      value: ''\r\n    }, {\r\n      property: 'Stretcher',\r\n      value: ''\r\n    }],\r\n    sorter: [{\r\n      property: 'name'\r\n    }, {\r\n      property: 'county'\r\n    }]\r\n  };*/\r\n  \r\n  componentDidMount () {\r\n    fetch(`/provider.json`)\r\n      .then(res => res.json());\r\n       \r\n  }\r\n\r\n  parseData(data) {\r\n    const { sorter } = this.state;\r\n\r\n    if (data && data.length) {\r\n      if (Array.isArray(sorter) && sorter.length) {\r\n        data.sort(createSorter(...sorter));\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    //const  data   = this.parseData(data);\r\n    return data ? this.renderData(data) : this.renderLoading();\r\n  }\r\n\r\n  renderData(data) {\r\n    /*const { filters } = this.state;\r\n    \r\n    if (data && data.length > 0) {\r\n      if (Array.isArray(filters) && filters.length) {\r\n        data = data.filter(createFilter(...filters));\r\n      }*/\r\n      return (\r\n        <div>\r\n          \r\n          <ReactTable \r\n          data= {data}\r\n          filterable\r\n            defaultFilterMethod={(filter, row) => filterCaseInsensitive(filter, row) }\r\n          columns={[\r\n            {\r\n              Header: \"Provider\",\r\n              columns: [\r\n                {\r\n                  Header: \"Name\",\r\n                  accessor: \"Name\",\r\n                  sortMethod: (a, b) => {\r\n                    if (a.length === b.length) {\r\n                      return a > b ? 1 : -1;\r\n                    }\r\n                    return a.length > b.length ? 1 : -1;\r\n                  }\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              Header: \"Provider Info\",\r\n              columns: [\r\n                {\r\n                  Header: \"Type\",\r\n                  id: \"Type\",\r\n                  accessor: d => d.Type\r\n                },\r\n                {\r\n                  Header: \"Region\",\r\n                  id: \"Region\",\r\n                  accessor: d => d.Region\r\n                },\r\n                {\r\n                  Header: \"County\",\r\n                  id: \"County\",\r\n                  accessor: d => d.County\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              Header: \"Level of Service\",\r\n              columns: [\r\n                {\r\n                  Header: \"Ambulatory\",\r\n                  accessor: \"Amb\"\r\n                },\r\n                {\r\n                  Header: \"Wheelchair\",\r\n                  id: \"WCHR\",\r\n                  accessor: d => d.WCHR\r\n                },\r\n                {\r\n                  Header: \"Stretcher\",\r\n                  id: \"Stretcher\",\r\n                  accessor: d => d.Stretcher\r\n                }\r\n              ]\r\n            },\r\n          ]}\r\n          defaultPageSize={20}\r\n          style={{\r\n            height: \"400px\" // This will force the table body to overflow and scroll, since there is not enough room\r\n          }}\r\n          className= \"ReactTable Provider-table\"\r\n        />\r\n            {/*\r\n              <table \r\n              defaultPageSize={20}\r\n              className=\"Provider-table\">\r\n              <tr>\r\n                <th>Type</th>\r\n                <th>Provider Name</th>\r\n                <th>Provider Region</th>\r\n                <th>County</th>\r\n                <th>Ambulatory</th>\r\n                <th>Wheelchair</th>\r\n                <th>Stretcher</th>\r\n              </tr>\r\n              {data.map(item => (\r\n                <tr key={item.id}>\r\n                  <td>{item.Type}</td>\r\n                  <td>{item.Name}</td>\r\n                  <td>{item.Region}</td>\r\n                  <td>{item.County}</td>\r\n                  <td>{item.Amb}</td>\r\n                  <td>{item.WCHR}</td>\r\n                  <td>{item.Stretcher}</td>\r\n                </tr>\r\n              ))}\r\n              </table>*/}\r\n          \r\n        </div>\r\n      );\r\n    } \r\n    /*else {\r\n      return <div>No items found</div>;\r\n    }\r\n  }*/\r\n\r\n  renderLoading() {\r\n    return <div>Loading...</div>;\r\n  }\r\n}\r\n\r\nexport default ProviderList;\r\n\r\n\r\n /* codxe used while working on generating page\r\n render () {\r\n    \r\n     const  {sorter}  = this.state;\r\n  \r\n      if (data && data.length > 0) {\r\n        if (Array.isArray(sorter) && sorter.length) {\r\n          data.sort(createSorter(...sorter));\r\n        }\r\n      }\r\n  \r\n      return (\r\n        \r\n        <div>\r\n                    \r\n          {\r\n            data.map(item => (\r\n              <div key={item.id}>\r\n                <span>{item.id}</span>&nbsp;&nbsp;\r\n                \r\n                <span><a href={`mailto:${item.email}`}>{item.name}</a></span>;&nbsp; \r\n                <span>{item.company}</span>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n        \r\n      );\r\n    } \r\n    }\r\n\r\n\r\nexport default List;*/\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}