{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _Set from \"@babel/runtime-corejs2/core-js/set\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\newtest\\\\my-page\\\\pages\\\\provider_data\\\\providerimport.js\";\nimport React, { Component } from 'react';\nimport { createFilter } from './Filter';\nimport { createSorter } from './sort';\nimport ReactTable from 'react-table';\nimport \"react-table/react-table.css\";\n\nvar data = require('./provider.json');\n\nfunction ProviderData(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"total Providers: \", data.length, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), \"Central Region: \", data.filter(function (item) {\n    return item.Region === 'Central';\n  }).length, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), \"Soutwest Region: \", data.filter(function (item) {\n    return item.Region === 'SouthWest';\n  }).length, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), \"East Region: \", data.filter(function (item) {\n    return item.Region === 'East';\n  }).length, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }));\n} //counts number of Region types there are in the json\n\n\nvar uniqueNames = new _Set(data.map(function (item) {\n  return item.Region;\n})).size;\nvar pizza = data.filter(function (item) {\n  return item.Region === 'East' && item.WCHR === 'Yes';\n}).length; //const pizzathehutt = pizza.length;\n//Function for case insensitivity allowing for more flexibility on filter results based\n//on user input.\n\nfunction filterCaseInsensitive(filter, row) {\n  var id = filter.pivotId || filter.id;\n  return row[id] !== undefined ? String(row[id].toLowerCase()).startsWith(filter.value.toLowerCase()) : true;\n} //creates dropdown list for each table column listing available selection options for \n//each json listing.  Example: Region - Central, Southwest, East\n\n\nvar customFilter = function customFilter(_ref) {\n  var fieldName = _ref.fieldName,\n      filter = _ref.filter,\n      _onChange = _ref.onChange;\n  return React.createElement(\"select\", {\n    onChange: function onChange(event) {\n      return _onChange(event.target.value);\n    },\n    style: {\n      width: \"100%\"\n    },\n    value: filter ? filter.value : '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Show All\"), data.map(function (item) {\n    return item[fieldName];\n  }).filter(function (item, i, s) {\n    return s.lastIndexOf(item) == i;\n  }).map(function (value) {\n    return React.createElement(\"option\", {\n      key: value,\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, value);\n  }));\n};\n\nvar ProviderList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProviderList, _Component);\n\n  function ProviderList(props) {\n    var _this;\n\n    _classCallCheck(this, ProviderList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProviderList).call(this, props));\n    _this.state = {\n      Region: 'East',\n      Tproviders: data.length\n    };\n    return _this;\n  } //pulls the json file on initial load\n\n\n  _createClass(ProviderList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      fetch(\"/provider.json\").then(function (res) {\n        return res.json();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return data ? this.renderData(data) : this.renderLoading();\n    }\n  }, {\n    key: \"renderData\",\n    value: function renderData(data) {\n      var _this2 = this;\n\n      var eastwheelchair = data.filter(function (item) {\n        return item.Region === _this2.state.Region;\n      }).length;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.state.Tproviders), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, uniqueNames), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, pizza), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, eastwheelchair), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \" \", data.filter(function (item) {\n        return item.Region === 'East';\n      }).length), this.props.ProviderData, React.createElement(ReactTable, {\n        className: \"Provider-table -striped -highlight\",\n        data: data,\n        defaultPageSize: 20,\n        style: {\n          height: \"400px\" // This will force the table body to overflow and scroll, since there is not enough room\n\n        } //sets filtering options in react-table for no dropdown option.  Calls the filtercaseinsensitive\n        //function as mentioned above\n        ,\n        filterable: true,\n        defaultFilterMethod: function defaultFilterMethod(filter, row) {\n          return filterCaseInsensitive(filter, row);\n        },\n        columns: [{\n          Header: \"Provider\",\n          columns: [{\n            Header: \"Name\",\n            accessor: \"Name\",\n            //*sorting method to allow for listing of numerical order listed in the name\n            sortMethod: function sortMethod(a, b) {\n              if (a.length === b.length) {\n                return a > b ? 1 : -1;\n              }\n\n              return a.length > b.length ? 1 : -1;\n            }\n          }]\n        }, {\n          Header: \"Provider Info\",\n          columns: [{\n            Header: \"Type\",\n            id: \"Type\",\n            accessor: function accessor(d) {\n              return d.Type;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            Filter: function Filter(_ref2) {\n              var filter = _ref2.filter,\n                  onChange = _ref2.onChange;\n              return customFilter({\n                fieldName: 'Type',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }, {\n            Header: \"Region\",\n            id: \"Region\",\n            accessor: function accessor(d) {\n              return d.Region;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref3) {\n              var filter = _ref3.filter,\n                  onChange = _ref3.onChange;\n              return customFilter({\n                fieldName: 'Region',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }, {\n            Header: \"County\",\n            id: \"County\",\n            accessor: function accessor(d) {\n              return d.County;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref4) {\n              var filter = _ref4.filter,\n                  onChange = _ref4.onChange;\n              return customFilter({\n                fieldName: 'County',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }]\n        }, {\n          Header: \"Level of Service\",\n          columns: [{\n            Header: \"Ambulatory\",\n            accessor: \"Amb\",\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref5) {\n              var filter = _ref5.filter,\n                  onChange = _ref5.onChange;\n              return customFilter({\n                fieldName: 'Amb',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }, {\n            Header: \"Wheelchair\",\n            id: \"WCHR\",\n            accessor: function accessor(d) {\n              return d.WCHR;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref6) {\n              var filter = _ref6.filter,\n                  onChange = _ref6.onChange;\n              return customFilter({\n                fieldName: 'WCHR',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }, {\n            Header: \"Stretcher\",\n            id: \"Stretcher\",\n            accessor: function accessor(d) {\n              return d.Stretcher;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref7) {\n              var filter = _ref7.filter,\n                  onChange = _ref7.onChange;\n              return customFilter({\n                fieldName: 'Stretcher',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, function (state, makeTable, instance) {\n        var recordsInfoText = \"\";\n        var filtered = state.filtered,\n            pageRows = state.pageRows,\n            pageSize = state.pageSize,\n            sortedData = state.sortedData,\n            page = state.page;\n\n        if (sortedData && sortedData.length > 0) {\n          var isFiltered = filtered.length > 0;\n          var totalRecords = sortedData.length;\n          var recordsCountFrom = page * pageSize + 1;\n          var recordsCountTo = recordsCountFrom + pageRows.length - 1;\n          if (isFiltered) recordsInfoText = \"\".concat(totalRecords, \" filtered Providers\");else recordsInfoText = \"\".concat(recordsCountFrom, \"-\").concat(recordsCountTo, \" of \").concat(totalRecords, \" records\");\n        } else recordsInfoText = \"No records\";\n\n        return React.createElement(\"div\", {\n          className: \"main-grid\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"above-table text-right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-sm-12\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"records-info\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }, recordsInfoText))), makeTable());\n      }));\n    }\n  }, {\n    key: \"renderLoading\",\n    value: function renderLoading() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }]);\n\n  return ProviderList;\n}(Component);\n\nexport default ProviderList;","map":{"version":3,"sources":["C:\\Users\\Mark\\Desktop\\newtest\\my-page\\pages\\provider_data\\providerimport.js"],"names":["React","Component","createFilter","createSorter","ReactTable","data","require","ProviderData","props","length","filter","item","Region","uniqueNames","map","size","pizza","WCHR","filterCaseInsensitive","row","id","pivotId","undefined","String","toLowerCase","startsWith","value","customFilter","fieldName","onChange","event","target","width","i","s","lastIndexOf","ProviderList","state","Tproviders","fetch","then","res","json","renderData","renderLoading","eastwheelchair","height","Header","columns","accessor","sortMethod","a","b","d","Type","filterMethod","Filter","County","Stretcher","makeTable","instance","recordsInfoText","filtered","pageRows","pageSize","sortedData","page","isFiltered","totalRecords","recordsCountFrom","recordsCountTo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { createFilter } from './Filter';\r\nimport { createSorter } from './sort';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\n\r\nvar data = require('./provider.json');\r\n\r\n\r\nfunction ProviderData(props) {\r\n  \r\n    return (\r\n      <div>\r\n        total Providers: {data.length}<br/>\r\n        Central Region: {data.filter(item => item.Region === 'Central').length}<br/>\r\n        Soutwest Region: {data.filter(item => item.Region === 'SouthWest').length}<br/>\r\n        East Region: {data.filter(item => item.Region === 'East').length}<br/>\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\n//counts number of Region types there are in the json\r\nconst uniqueNames = new Set(data.map(item => item.Region)).size;\r\n\r\nconst pizza = data.filter(item => item.Region === 'East' && item.WCHR === 'Yes').length;\r\n//const pizzathehutt = pizza.length;\r\n\r\n\r\n//Function for case insensitivity allowing for more flexibility on filter results based\r\n//on user input.\r\nfunction filterCaseInsensitive(filter, row) {\r\n  const id = filter.pivotId || filter.id;\r\n  return (\r\n      row[id] !== undefined ?\r\n        String(row[id].toLowerCase()).startsWith(filter.value.toLowerCase())\r\n        :  true\r\n  );\r\n}\r\n\r\n//creates dropdown list for each table column listing available selection options for \r\n//each json listing.  Example: Region - Central, Southwest, East\r\nconst customFilter = ({ fieldName, filter, onChange }) => {\r\n  return (\r\n    <select\r\n      onChange={event => onChange(event.target.value)}\r\n      style={{ width: \"100%\" }}\r\n      value={filter ? filter.value : ''}> \r\n      <option value= ''>Show All</option>\r\n      {data\r\n        .map(item => item[fieldName])\r\n        .filter((item, i, s) => s.lastIndexOf(item) == i)\r\n        .map(function (value) {\r\n          return (\r\n            <option key={value} value={value}>\r\n              {value}\r\n            </option>\r\n          );\r\n        })}\r\n    </select>\r\n  );\r\n};\r\n\r\n\r\nclass ProviderList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      Region: 'East',\r\n      Tproviders : data.length\r\n    };\r\n}\r\n\r\n\r\n//pulls the json file on initial load\r\n  componentDidMount () {\r\n    fetch(`/provider.json`)\r\n      .then(res => res.json());\r\n  }\r\n\r\n  render() {\r\n    return data ? this.renderData(data) : this.renderLoading();\r\n  }\r\n\r\n  renderData(data) {\r\n    const eastwheelchair = data.filter(item => item.Region === this.state.Region).length;\r\n      return (\r\n        <div>\r\n          \r\n          <p>{this.state.Tproviders}</p>\r\n          \r\n          <p>{uniqueNames}</p>\r\n          \r\n          \r\n          <p>{pizza}</p>\r\n          <p>{eastwheelchair}</p>\r\n          <p> {data.filter(item => item.Region === 'East').length}</p>\r\n          {this.props.ProviderData}\r\n          <ReactTable \r\n            className= \"Provider-table -striped -highlight\"\r\n            data= {data}\r\n            defaultPageSize={20}\r\n            style={{\r\n              height: \"400px\" // This will force the table body to overflow and scroll, since there is not enough room\r\n            }}\r\n            //sets filtering options in react-table for no dropdown option.  Calls the filtercaseinsensitive\r\n            //function as mentioned above\r\n            filterable defaultFilterMethod=\r\n            {(filter, row) => filterCaseInsensitive(filter, row) }\r\n            columns={[\r\n              {\r\n                Header: \"Provider\",\r\n                columns: [\r\n                  {\r\n                    Header: \"Name\",\r\n                    accessor: \"Name\",\r\n                    //*sorting method to allow for listing of numerical order listed in the name\r\n                    sortMethod: (a, b) => {\r\n                      if (a.length === b.length) {\r\n                        return a > b ? 1 : -1;\r\n                      }\r\n                      return a.length > b.length ? 1 : -1;\r\n                    }\r\n                  }\r\n                ]\r\n              },              \r\n              {\r\n                Header: \"Provider Info\",\r\n                columns: [\r\n                  {\r\n                    Header: \"Type\",\r\n                    id: \"Type\",\r\n                    accessor: d => d.Type,\r\n                    filterMethod: (filter, row) => {\r\n                      return row[filter.id] === filter.value;\r\n                    },\r\n                    Filter: ({ filter, onChange }) =>\r\n                    customFilter({ fieldName:'Type', filter, onChange })\r\n                  },\r\n                  {\r\n                    Header: \"Region\",\r\n                    id: \"Region\",\r\n                    accessor: d => d.Region,\r\n                    filterMethod: (filter, row) => {\r\n                      return row[filter.id] === filter.value;\r\n                    },\r\n                    //calls the customfilter function above creating a dropdown list for\r\n                    //filter\r\n                    Filter: ({ filter, onChange }) =>\r\n                    customFilter({ fieldName:'Region', filter, onChange })\r\n                  },\r\n                  {\r\n                    Header: \"County\",\r\n                    id: \"County\",\r\n                    accessor: d => d.County,\r\n                    filterMethod: (filter, row) => {\r\n                      return row[filter.id] === filter.value;\r\n                    },\r\n                    //calls the customfilter function above creating a dropdown list for\r\n                    //filter\r\n                    Filter: ({ filter, onChange }) =>\r\n                    customFilter({ fieldName:'County', filter, onChange })\r\n                  }\r\n                ]\r\n              },\r\n              {\r\n                Header: \"Level of Service\",\r\n                columns: [\r\n                  {\r\n                    Header: \"Ambulatory\",\r\n                    accessor: \"Amb\",\r\n                    filterMethod: (filter, row) => {\r\n                      return row[filter.id] === filter.value;\r\n                    },\r\n                    //calls the customfilter function above creating a dropdown list for\r\n                    //filter\r\n                    Filter: ({ filter, onChange }) =>\r\n                    customFilter({ fieldName:'Amb', filter, onChange })\r\n                  },\r\n                  {\r\n                    Header: \"Wheelchair\",\r\n                    id: \"WCHR\",\r\n                    accessor: d => d.WCHR,\r\n                    filterMethod: (filter, row) => {\r\n                      return row[filter.id] === filter.value;\r\n                    },\r\n                    //calls the customfilter function above creating a dropdown list for\r\n                    //filter\r\n                    Filter: ({ filter, onChange }) =>\r\n                    customFilter({ fieldName:'WCHR', filter, onChange })\r\n                  },\r\n                  {\r\n                    Header: \"Stretcher\",\r\n                    id: \"Stretcher\",\r\n                    accessor: d => d.Stretcher,\r\n                    filterMethod: (filter, row) => {\r\n                      return row[filter.id] === filter.value;\r\n                    },\r\n                    //calls the customfilter function above creating a dropdown list for\r\n                    //filter\r\n                    Filter: ({ filter, onChange }) =>\r\n                    customFilter({ fieldName:'Stretcher', filter, onChange })\r\n                  },\r\n                ]\r\n              },\r\n            ]}\r\n          > \r\n          {/*functions to display totals of filtered data. */}\r\n          {(state, makeTable, instance) => {\r\n            let recordsInfoText = \"\";\r\n\r\n            const { filtered, pageRows, pageSize, sortedData, page } = state;\r\n\r\n            if (sortedData && sortedData.length > 0) {\r\n              let isFiltered = filtered.length > 0;\r\n\r\n              let totalRecords = sortedData.length;\r\n\r\n              let recordsCountFrom = page * pageSize + 1;\r\n\r\n              let recordsCountTo = recordsCountFrom + pageRows.length - 1;\r\n\r\n              if (isFiltered)\r\n                recordsInfoText = `${totalRecords} filtered Providers`;\r\n              else\r\n                recordsInfoText = `${recordsCountFrom}-${recordsCountTo} of ${totalRecords} records`;\r\n            } else recordsInfoText = \"No records\";\r\n\r\n            return (\r\n              <div className=\"main-grid\">\r\n                <div className=\"above-table text-right\">\r\n                  <div className=\"col-sm-12\">\r\n                    <span className=\"records-info\">{recordsInfoText}</span>\r\n                  </div>\r\n                </div>\r\n                {makeTable()}\r\n              </div>\r\n            );\r\n          }}\r\n        </ReactTable>\r\n        </div>\r\n      );\r\n    } \r\n  renderLoading() {\r\n    return <div>Loading...</div>;\r\n  }\r\n}\r\n\r\nexport default ProviderList;\r\n\r\n\r\n \r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}