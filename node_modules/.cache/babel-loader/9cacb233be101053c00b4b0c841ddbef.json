{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\newtest\\\\my-page\\\\pages\\\\DandD\\\\attacksim.js\";\nimport React from 'react';\nimport { SetConstAdj, SetAcAdj, SetDmgHitAdj, setherostats, setmonsterstats,\n/*heroattackroll, */\nmonsterattackroll, heroAttackTurn, monsterAttackTurn } from './mainfunctions';\nimport { CharacterSheet, NameForm, AttackSection, CenterFlexWrapDiv, AttackStatusDisplay } from '../customComponents';\nimport { Row, Col, Button } from 'reactstrap';\n\nfunction AttackRoll() {\n  if (this.state.monsterAttackVisible === true) {\n    var attackroll = _parseInt(Math.random() * 20 + 1);\n\n    var adjattackroll = attackroll + this.state.monsterHitAdj;\n    var critstrike = this.state.monsterDmg * 2;\n\n    if (attackroll < 20 && adjattackroll >= this.state.heroAc) {\n      this.setState({\n        monsterDidHit: 'Hit',\n        monsterRoll: adjattackroll\n      }); //performs check to see if the hero hp after monster damange is 0 or lower\n\n      if (this.state.heroHp - this.state.monsterDmg <= 0) {\n        this.setState({\n          heroHp: 'Dead',\n          monsterRoll: adjattackroll // if yes, hero is dead\n\n        });\n      } else {\n        //if no, sets the herohp state to reflect new damage\n        this.setState({\n          heroHp: this.state.heroHp - this.state.monsterDmg\n        });\n      }\n    } else if (attackroll === 20) {\n      this.setState({\n        monsterDidHit: 'Hit',\n        monsterRoll: 'Crit Strike'\n      });\n\n      if (this.state.heroHp - critstrike <= 0) {\n        this.setState({\n          heroHp: 'Dead',\n          monsterRoll: 'Crit Strike' // if yes, monster is dead\n\n        });\n      } else {\n        this.setState({\n          heroHp: this.state.heroHp - critstrike\n        });\n      }\n    } else {\n      this.setState({\n        monsterDidHit: 'Miss',\n        monsterRoll: adjattackroll\n      });\n    }\n\n    ;\n  }\n\n  if (this.state.heroAttackVisible === true) {\n    var _attackroll = 20; //(parseInt((Math.random() * 20) + 1));\n\n    var _adjattackroll = _attackroll + this.state.heroHitAdj;\n\n    var _critstrike = this.state.heroDmg * 2;\n\n    if (_attackroll < 20 && _adjattackroll >= this.state.monsterAc) {\n      this.setState({\n        heroDidHit: 'Hit',\n        heroRoll: _adjattackroll\n      }); //performs check to see if the monster hp after hero damange is 0 or lower\n\n      if (this.state.monsterHp - this.state.heroDmg <= 0) {\n        this.setState({\n          monsterHp: 'Dead',\n          heroRoll: _adjattackroll // if yes, monster is dead\n\n        });\n      } else {\n        this.setState({\n          monsterHp: this.state.monsterHp - this.state.heroDmg\n        });\n      }\n    } else if (_attackroll === 20) {\n      this.setState({\n        heroDidHit: 'Hit',\n        heroRoll: 'Crit Strike'\n      });\n\n      if (this.state.monsterHp - _critstrike <= 0) {\n        this.setState({\n          monsterHp: 'Dead',\n          heroRoll: 'Crit Strike' // if yes, monster is dead\n\n        });\n      } else {\n        this.setState({\n          monsterHp: this.state.monsterHp - _critstrike\n        });\n      }\n    } else {\n      this.setState({\n        heroDidHit: 'Miss',\n        heroRoll: _adjattackroll\n      });\n    }\n\n    ;\n  }\n}\n\nvar AttackSim =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AttackSim, _React$Component);\n\n  function AttackSim(props) {\n    var _this;\n\n    _classCallCheck(this, AttackSim);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AttackSim).call(this, props));\n    _this.state = {\n      herostats: {\n        Str: 0,\n        Const: 0,\n        Dext: 0\n      },\n      herobase: {\n        Hp: 50,\n        ArmorClass: 10,\n        Damage: 10,\n        HitAdj: 0\n      },\n      monsterstats: {\n        Str: 0,\n        Const: 0,\n        Dext: 0\n      },\n      monsterbase: {\n        Hp: 50,\n        ArmorClass: 10,\n        Damage: 10,\n        HitAdj: 0\n      },\n      heroHp: 0,\n      heroAc: 0,\n      heroDmg: 0,\n      heroHitAdj: 0,\n      heroNametext: '',\n      heroName: 'Hero',\n      heroInitiative: 0,\n      heroAttackVisible: false,\n      heroRoll: 0,\n      heroDidHit: '',\n      monsterHp: 0,\n      monsterAc: 0,\n      monsterDmg: 0,\n      monsterHitAdj: 0,\n      monsterNametext: '',\n      monsterName: 'Monster',\n      monsterInitiative: 0,\n      monsterAttackVisible: false,\n      monsterRoll: 0,\n      monsterDidHit: ''\n    }; //Hero bind function statements\n\n    _this.setherostats = setherostats.bind(_assertThisInitialized(_this));\n    _this.heroNameChange = _this.heroNameChange.bind(_assertThisInitialized(_this));\n    _this.heroNameSubmit = _this.heroNameSubmit.bind(_assertThisInitialized(_this)); //this.heroattackroll = heroattackroll.bind(this);\n\n    _this.heroAttackTurn = heroAttackTurn.bind(_assertThisInitialized(_this)); //monster bind function statements\n\n    _this.setmonsterstats = setmonsterstats.bind(_assertThisInitialized(_this));\n    _this.monsterNameChange = _this.monsterNameChange.bind(_assertThisInitialized(_this));\n    _this.monsterNameSubmit = _this.monsterNameSubmit.bind(_assertThisInitialized(_this));\n    _this.monsterattackroll = monsterattackroll.bind(_assertThisInitialized(_this));\n    _this.monsterAttackTurn = monsterAttackTurn.bind(_assertThisInitialized(_this));\n    _this.rollforiniative = _this.rollforiniative.bind(_assertThisInitialized(_this));\n    _this.SetConstAdj = SetConstAdj.bind(_assertThisInitialized(_this));\n    _this.SetAcAdj = SetAcAdj.bind(_assertThisInitialized(_this));\n    _this.SetDmgHitAdj = SetDmgHitAdj.bind(_assertThisInitialized(_this));\n    _this.AttackRoll = AttackRoll.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AttackSim, [{\n    key: \"heroNameChange\",\n    value: function heroNameChange(event) {\n      this.setState({\n        heroNametext: event.target.value\n      });\n    }\n  }, {\n    key: \"heroNameSubmit\",\n    value: function heroNameSubmit(event) {\n      this.setState({\n        heroName: this.state.heroNametext\n      });\n    }\n  }, {\n    key: \"monsterNameChange\",\n    value: function monsterNameChange(event) {\n      this.setState({\n        monsterNametext: event.target.value\n      });\n    }\n  }, {\n    key: \"monsterNameSubmit\",\n    value: function monsterNameSubmit(event) {\n      this.setState({\n        monsterName: this.state.monsterNametext\n      });\n    } //initiative shows what character attacks first\n\n  }, {\n    key: \"rollforiniative\",\n    value: function rollforiniative() {\n      var heroinit = Math.floor(Math.random() * 10 + 1);\n      var monsterinit = Math.floor(Math.random() * 10 + 1);\n\n      if (heroinit < monsterinit) {\n        this.setState({\n          heroInitiative: 'First',\n          monsterInitiative: 'Second',\n          heroAttackVisible: true //displays attack button\n\n        });\n      } else if (heroinit > monsterinit) {\n        this.setState({\n          monsterInitiative: 'First',\n          heroInitiative: 'Second',\n          monsterAttackVisible: true //displays attack button\n\n        });\n      } else {\n        this.setState({\n          heroInitiative: 'ReRoll',\n          monsterInitiative: 'ReRoll',\n          //hides attck buttons due to reroll\n          heroAttackVisible: false,\n          monsterAttackVisible: false\n        });\n      }\n\n      ; //clears out the hit/miss comments and roll result since it is a new round.\n\n      this.setState({\n        heroDidHit: '',\n        monsterDidHit: '',\n        heroRoll: 0,\n        monsterRoll: 0\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(CenterFlexWrapDiv, {\n        className: \"m-0 p-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"w-100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(Col, {\n        className: \"m-1 bg-dark text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"mt-5 ml-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"Hero Name: \"), React.createElement(\"span\", {\n        className: \"text-info ml-5 h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, this.state.heroName))), React.createElement(CharacterSheet, {\n        Strength: this.state.herostats.Str,\n        Constitution: this.state.herostats.Const,\n        Dexterity: this.state.herostats.Dext,\n        Hitpoints: this.state.heroHp,\n        Damage: this.state.heroDmg,\n        ImgUrl: \"../static/images/hero.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"text-center m-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.setherostats,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, \"Set Attrubutes\")), React.createElement(NameForm, {\n        Value: this.state.value,\n        NameChange: this.heroNameChange,\n        NameSubmit: this.heroNameSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      })), React.createElement(Col, {\n        className: \"m-1 bg-dark text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"mt-5 ml-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, \"Monster Name: \"), React.createElement(\"span\", {\n        className: \"text-info ml-5 h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, this.state.monsterName)), React.createElement(CharacterSheet, {\n        Strength: this.state.monsterstats.Str,\n        Constitution: this.state.monsterstats.Const,\n        Dexterity: this.state.monsterstats.Dext,\n        Hitpoints: this.state.monsterHp,\n        Damage: this.state.monsterDmg,\n        ImgUrl: \"../static/images/monster.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"text-center m-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.setmonsterstats,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, \"Set Attrubutes\")), React.createElement(NameForm, {\n        Value: this.state.value,\n        NameChange: this.monsterNameChange,\n        NameSubmit: this.monsterNameSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      })))), React.createElement(CenterFlexWrapDiv, {\n        className: \"m-0 p-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"bg-dark m-1 p-0 mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, React.createElement(AttackSection, {\n        AC: this.state.heroAc,\n        HitAdj: this.state.heroHitAdj,\n        AttackRoll: this.AttackRoll //{this.heroattackroll}\n        ,\n        RollTitle: \"Hero Roll for Attack\",\n        Roll: this.state.heroRoll,\n        DidHit: this.state.heroDidHit,\n        NextTurn: this.heroAttackTurn,\n        AttackTurn: this.state.heroAttackVisible,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"bg-dark m-1 mb-2 p-0 col\",\n        xs: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-center m-0 p-0 text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        className: \"m-5 w-50\",\n        onClick: this.rollforiniative,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, \"Roll for iniative\"), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(Col, {\n        className: \"w-50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(AttackStatusDisplay, {\n        Name: this.state.heroName,\n        Initiative: this.state.heroInitiative,\n        HP: this.state.heroHp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      })), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, React.createElement(AttackStatusDisplay, {\n        Name: this.state.monsterName,\n        Initiative: this.state.monsterInitiative,\n        HP: this.state.monsterHp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"bg-dark m-1 p-0 mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, React.createElement(AttackSection, {\n        AC: this.state.monsterAc,\n        HitAdj: this.state.monsterHitAdj,\n        AttackRoll: this.monsterattackroll,\n        RollTitle: \"Monster Roll for Attack\",\n        Roll: this.state.monsterRoll,\n        DidHit: this.state.monsterDidHit,\n        NextTurn: this.monsterAttackTurn,\n        AttackTurn: this.state.monsterAttackVisible,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return AttackSim;\n}(React.Component);\n\nexport default AttackSim;","map":{"version":3,"sources":["C:\\Users\\Mark\\Desktop\\newtest\\my-page\\pages\\DandD\\attacksim.js"],"names":["React","SetConstAdj","SetAcAdj","SetDmgHitAdj","setherostats","setmonsterstats","monsterattackroll","heroAttackTurn","monsterAttackTurn","CharacterSheet","NameForm","AttackSection","CenterFlexWrapDiv","AttackStatusDisplay","Row","Col","Button","AttackRoll","state","monsterAttackVisible","attackroll","Math","random","adjattackroll","monsterHitAdj","critstrike","monsterDmg","heroAc","setState","monsterDidHit","monsterRoll","heroHp","heroAttackVisible","heroHitAdj","heroDmg","monsterAc","heroDidHit","heroRoll","monsterHp","AttackSim","props","herostats","Str","Const","Dext","herobase","Hp","ArmorClass","Damage","HitAdj","monsterstats","monsterbase","heroNametext","heroName","heroInitiative","monsterNametext","monsterName","monsterInitiative","bind","heroNameChange","heroNameSubmit","monsterNameChange","monsterNameSubmit","rollforiniative","event","target","value","heroinit","floor","monsterinit","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { SetConstAdj, SetAcAdj, SetDmgHitAdj, setherostats, setmonsterstats,\r\n    /*heroattackroll, */monsterattackroll, heroAttackTurn, monsterAttackTurn } from './mainfunctions'\r\n\r\nimport { CharacterSheet, NameForm, AttackSection, CenterFlexWrapDiv, AttackStatusDisplay } from '../customComponents'\r\nimport { Row, Col, Button } from 'reactstrap'\r\n\r\nfunction AttackRoll() {\r\n    if (this.state.monsterAttackVisible === true) {\r\n        let attackroll = (parseInt((Math.random() * 20) + 1));\r\n    let adjattackroll = attackroll + (this.state.monsterHitAdj);\r\n    let critstrike = (this.state.monsterDmg * 2);\r\n    \r\n    if (attackroll < 20 && adjattackroll >= this.state.heroAc) {\r\n        this.setState(\r\n            {\r\n                monsterDidHit: 'Hit', monsterRoll: adjattackroll\r\n            }\r\n        )\r\n        //performs check to see if the hero hp after monster damange is 0 or lower\r\n        if ((this.state.heroHp - this.state.monsterDmg) <= 0) {\r\n            this.setState (\r\n                {\r\n                    heroHp: 'Dead', monsterRoll: adjattackroll  // if yes, hero is dead\r\n                }\r\n            )  \r\n        } else {\r\n            //if no, sets the herohp state to reflect new damage\r\n            this.setState (\r\n                {\r\n                    heroHp: this.state.heroHp - this.state.monsterDmg\r\n                }\r\n            )\r\n        }\r\n    } else if (attackroll === 20) {\r\n        this.setState({\r\n            monsterDidHit: 'Hit', monsterRoll: 'Crit Strike'\r\n        });\r\n\r\n        if ((this.state.heroHp - critstrike) <= 0) {\r\n            this.setState (\r\n                {\r\n                    heroHp: 'Dead', monsterRoll: 'Crit Strike'  // if yes, monster is dead\r\n                }\r\n            ) \r\n        } else {\r\n            this.setState (\r\n                {\r\n                    heroHp: this.state.heroHp - critstrike\r\n                }\r\n            )\r\n        } \r\n    } else {\r\n        this.setState (\r\n            {\r\n                monsterDidHit: 'Miss', monsterRoll: adjattackroll\r\n            }\r\n        );\r\n    };\r\n    }\r\n\r\n    if (this.state.heroAttackVisible === true) {\r\n        let attackroll = 20; //(parseInt((Math.random() * 20) + 1));\r\n    let adjattackroll = attackroll + (this.state.heroHitAdj); \r\n    let critstrike = (this.state.heroDmg * 2);\r\n    \r\n    if (attackroll < 20 && adjattackroll >= this.state.monsterAc ) {\r\n        this.setState(\r\n            {\r\n                heroDidHit: 'Hit', heroRoll: adjattackroll\r\n            }\r\n        );\r\n        //performs check to see if the monster hp after hero damange is 0 or lower\r\n        if ((this.state.monsterHp - this.state.heroDmg) <= 0) {\r\n            this.setState (\r\n                {\r\n                    monsterHp: 'Dead', heroRoll: adjattackroll  // if yes, monster is dead\r\n                }\r\n            ) \r\n        } else {\r\n            this.setState (\r\n                {\r\n                    monsterHp: this.state.monsterHp - this.state.heroDmg\r\n                }\r\n            )\r\n        }\r\n    } else if (attackroll === 20) {\r\n        this.setState(\r\n            {\r\n                heroDidHit: 'Hit', heroRoll: 'Crit Strike'\r\n            }\r\n        );\r\n        if ((this.state.monsterHp - critstrike) <= 0) {\r\n            this.setState (\r\n                {\r\n                    monsterHp: 'Dead', heroRoll: 'Crit Strike'  // if yes, monster is dead\r\n                }\r\n            ) \r\n        } else {\r\n            this.setState (\r\n                {\r\n                    monsterHp: this.state.monsterHp - critstrike\r\n                }\r\n            )\r\n        }\r\n    } else {\r\n        this.setState (\r\n            {\r\n                heroDidHit: 'Miss', heroRoll: adjattackroll\r\n            }\r\n        );\r\n    };\r\n    }\r\n}\r\n\r\nclass AttackSim extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        \r\n        this.state = { \r\n            herostats: {\r\n                Str: 0,\r\n                Const: 0,\r\n                Dext: 0\r\n            },\r\n            herobase: {\r\n                Hp: 50,\r\n                ArmorClass: 10,\r\n                Damage: 10,\r\n                HitAdj: 0\r\n            },\r\n            monsterstats: {\r\n                Str: 0,\r\n                Const: 0,\r\n                Dext: 0\r\n            },\r\n            monsterbase: {\r\n                Hp: 50,\r\n                ArmorClass: 10,\r\n                Damage: 10,\r\n                HitAdj: 0\r\n            },\r\n            heroHp: 0,\r\n            heroAc: 0,\r\n            heroDmg: 0,\r\n            heroHitAdj: 0,\r\n            heroNametext: '',\r\n            heroName: 'Hero',\r\n            heroInitiative: 0,\r\n            heroAttackVisible: false,\r\n            heroRoll: 0,\r\n            heroDidHit: '',\r\n            monsterHp: 0,\r\n            monsterAc: 0,\r\n            monsterDmg: 0,\r\n            monsterHitAdj: 0,\r\n            monsterNametext: '',\r\n            monsterName: 'Monster',\r\n            monsterInitiative: 0,\r\n            monsterAttackVisible: false,\r\n            monsterRoll: 0,\r\n            monsterDidHit: '',\r\n            \r\n        };\r\n\r\n        //Hero bind function statements\r\n        this.setherostats = setherostats.bind(this);\r\n        this.heroNameChange = this.heroNameChange.bind(this);\r\n        this.heroNameSubmit = this.heroNameSubmit.bind(this);\r\n        //this.heroattackroll = heroattackroll.bind(this);\r\n        this.heroAttackTurn = heroAttackTurn.bind(this);\r\n        //monster bind function statements\r\n        this.setmonsterstats = setmonsterstats.bind(this);\r\n        this.monsterNameChange = this.monsterNameChange.bind(this);\r\n        this.monsterNameSubmit = this.monsterNameSubmit.bind(this);\r\n        this.monsterattackroll = monsterattackroll.bind(this);\r\n        this.monsterAttackTurn = monsterAttackTurn.bind(this);\r\n\r\n        this.rollforiniative = this.rollforiniative.bind(this);\r\n        this.SetConstAdj = SetConstAdj.bind(this);\r\n        this.SetAcAdj = SetAcAdj.bind(this);\r\n        this.SetDmgHitAdj = SetDmgHitAdj.bind(this);\r\n        this.AttackRoll = AttackRoll.bind(this);\r\n        \r\n    }\r\n\r\n    heroNameChange(event) {\r\n        this.setState ({heroNametext : event.target.value});\r\n    }\r\n\r\n    heroNameSubmit(event) {\r\n        this.setState ({heroName: this.state.heroNametext})\r\n    }\r\n\r\n    monsterNameChange(event) {\r\n        this.setState ({monsterNametext : event.target.value});\r\n    }\r\n\r\n    monsterNameSubmit(event) {\r\n        this.setState ({monsterName: this.state.monsterNametext});\r\n    }\r\n\r\n    //initiative shows what character attacks first\r\n    rollforiniative() {\r\n        const heroinit = Math.floor((Math.random() * 10) + 1);\r\n        const monsterinit = Math.floor((Math.random() * 10) + 1);\r\n        \r\n        if (heroinit < monsterinit) {\r\n            this.setState ({\r\n                heroInitiative: 'First',\r\n                monsterInitiative: 'Second',\r\n                heroAttackVisible: true  //displays attack button\r\n            });\r\n        } else if (heroinit > monsterinit) {\r\n            this.setState ({\r\n                monsterInitiative: 'First',\r\n                heroInitiative: 'Second',\r\n                monsterAttackVisible: true //displays attack button\r\n            }); \r\n        } else {\r\n            this.setState ({\r\n                heroInitiative: 'ReRoll',\r\n                monsterInitiative: 'ReRoll',\r\n                //hides attck buttons due to reroll\r\n                heroAttackVisible: false,  \r\n                monsterAttackVisible: false\r\n            });\r\n        };\r\n\r\n        //clears out the hit/miss comments and roll result since it is a new round.\r\n        this.setState ({\r\n            heroDidHit: '',\r\n            monsterDidHit: '',\r\n            heroRoll: 0,\r\n            monsterRoll: 0\r\n        });\r\n    }\r\n\r\n    render() {  \r\n        return (\r\n            <div>\r\n                <CenterFlexWrapDiv className=\"m-0 p-0\"> \r\n                    <Row className=\"w-100\">\r\n                        <Col className=\"m-1 bg-dark text-white\">\r\n                            <div>\r\n                               <h5 className=\"mt-5 ml-5\"><b>Hero Name: </b>\r\n                                    <span className=\"text-info ml-5 h3\">\r\n                                        {this.state.heroName}\r\n                                    </span>\r\n                                </h5>\r\n                            </div>\r\n                            <CharacterSheet \r\n                                Strength = {this.state.herostats.Str}\r\n                                Constitution = {this.state.herostats.Const}\r\n                                Dexterity = {this.state.herostats.Dext}\r\n                                Hitpoints = {this.state.heroHp}\r\n                                Damage = {this.state.heroDmg}\r\n                                ImgUrl= \"../static/images/hero.png\"\r\n                            />\r\n                            <div className=\"text-center m-3\">\r\n                                <Button onClick={this.setherostats}>Set Attrubutes</Button>\r\n                            </div>\r\n                            <NameForm\r\n                                Value = {this.state.value}\r\n                                NameChange = {this.heroNameChange}\r\n                                NameSubmit = {this.heroNameSubmit}\r\n                            />\r\n                        </Col>\r\n                        <Col className=\"m-1 bg-dark text-white\">\r\n                            <h5 className=\"mt-5 ml-5\"><b>Monster Name: </b>\r\n                                <span className=\"text-info ml-5 h3\">\r\n                                    {this.state.monsterName}\r\n                                </span>\r\n                            </h5>\r\n                            <CharacterSheet\r\n                                Strength = {this.state.monsterstats.Str}\r\n                                Constitution = {this.state.monsterstats.Const}\r\n                                Dexterity = {this.state.monsterstats.Dext}\r\n                                Hitpoints = {this.state.monsterHp}\r\n                                Damage = {this.state.monsterDmg}\r\n                                ImgUrl = \"../static/images/monster.png\"\r\n                            />\r\n                            <div className=\"text-center m-3\">\r\n                                <Button onClick={this.setmonsterstats}>Set Attrubutes</Button>\r\n                            </div>\r\n                            <NameForm \r\n                                Value = {this.state.value}\r\n                                NameChange = {this.monsterNameChange}\r\n                                NameSubmit = {this.monsterNameSubmit}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </CenterFlexWrapDiv>\r\n                <CenterFlexWrapDiv className=\"m-0 p-0\">\r\n                    <div  className=\"bg-dark m-1 p-0 mb-2\">\r\n                        <AttackSection\r\n                            AC = {this.state.heroAc}\r\n                            HitAdj = {this.state.heroHitAdj}\r\n                            AttackRoll = {this.AttackRoll} //{this.heroattackroll}\r\n                            RollTitle = \"Hero Roll for Attack\"\r\n                            Roll = {this.state.heroRoll}\r\n                            DidHit = {this.state.heroDidHit}\r\n                            NextTurn = {this.heroAttackTurn}\r\n                            AttackTurn = {this.state.heroAttackVisible}\r\n                        /> \r\n                    </div>\r\n                    <div className=\"bg-dark m-1 mb-2 p-0 col\" xs=\"3\">\r\n                        <div className=\"text-center m-0 p-0 text-white\">\r\n                            <Button \r\n                                type=\"button\" \r\n                                className=\"m-5 w-50\"  \r\n                                onClick={this.rollforiniative}>\r\n                                Roll for iniative\r\n                            </Button>\r\n                            <Row>\r\n                                <Col className=\"w-50\">\r\n                                    <AttackStatusDisplay\r\n                                        Name = {this.state.heroName}\r\n                                        Initiative = {this.state.heroInitiative}\r\n                                        HP = {this.state.heroHp}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <AttackStatusDisplay\r\n                                        Name = {this.state.monsterName}\r\n                                        Initiative = {this.state.monsterInitiative}\r\n                                        HP = {this.state.monsterHp}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bg-dark m-1 p-0 mb-2\">\r\n                        <AttackSection\r\n                            AC = {this.state.monsterAc}\r\n                            HitAdj = {this.state.monsterHitAdj}\r\n                            AttackRoll = {this.monsterattackroll}\r\n                            RollTitle = \"Monster Roll for Attack\"\r\n                            Roll = {this.state.monsterRoll}\r\n                            DidHit = {this.state.monsterDidHit}\r\n                            NextTurn = {this.monsterAttackTurn}\r\n                            AttackTurn = {this.state.monsterAttackVisible}\r\n                        />\r\n                    </div>\r\n                </CenterFlexWrapDiv>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default AttackSim;\r\n\r\n"]},"metadata":{},"sourceType":"module"}