{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\newtest\\\\my-page\\\\pages\\\\tvpost.js\";\nimport React from \"react\";\nimport Layout from '../components/layout';\nimport Layout2 from './tv_info/MyLayout';\nimport { Card, CardImg, CardBody, CardTitle, Row, Col, Button, Table } from 'reactstrap';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport { TvImage, TvCast, TvTitle } from './jsxstyles';\nimport { TvPostInfoLabel, TvPostInfoValue } from './customComponents';\nimport fetch from 'isomorphic-unfetch';\nimport classnames from 'classnames';\nvar noimage = '/static/images/no-img.png';\n\nvar tvPost =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(tvPost, _React$Component);\n\n  function tvPost(props) {\n    var _this;\n\n    _classCallCheck(this, tvPost);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(tvPost).call(this, props));\n\n    componentDidMount =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(context) {\n        var id, res, show;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                id = context.query.id; //pules tvmaze api json based on selected show on the search page.\n\n                _context.next = 3;\n                return fetch(\"https://api.tvmaze.com/shows/\".concat(id, \"?embed[]=episodes&embed[]=cast&embed[]=seasons\"));\n\n              case 3:\n                res = _context.sent;\n                _context.next = 6;\n                return res.json();\n\n              case 6:\n                show = _context.sent;\n                console.log(show);\n                console.log(\"Fetched show: \".concat(show.name));\n                return _context.abrupt(\"return\", {\n                  show: show\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function componentDidMount(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(tvPost, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Layout2, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Table, {\n        borderless: true,\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(TvPostInfoLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Type:\"), React.createElement(TvPostInfoValue, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, props.show.type ? props.show.type : 'no data')), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(TvPostInfoLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Premiered:\"), React.createElement(TvPostInfoValue, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, props.show.premiered ? props.show.premiered : 'no data')), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(TvPostInfoLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Status:\"), React.createElement(TvPostInfoValue, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, props.show.status ? props.show.status : 'no data')), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(TvPostInfoLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Rating:\"), React.createElement(TvPostInfoValue, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, props.show.rating.average)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(TvPostInfoLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Genre:\"), React.createElement(TvPostInfoValue, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, props.show.genres.map(function (value, index) {\n        return React.createElement(\"span\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, value, \" \\xA0\");\n      }))), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(TvPostInfoLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Seasons\"), React.createElement(TvPostInfoValue, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, props.show._embedded.seasons.filter(function (seasons) {\n        return seasons.number;\n      }).length))))));\n    }\n  }]);\n\n  return tvPost;\n}(React.Component);\n\nexport default tvPost;","map":{"version":3,"sources":["C:\\Users\\Mark\\Desktop\\newtest\\my-page\\pages\\tvpost.js"],"names":["Layout","Layout2","Card","CardImg","CardBody","CardTitle","Row","Col","Button","Table","ReactTable","TvImage","TvCast","TvTitle","TvPostInfoLabel","TvPostInfoValue","fetch","classnames","noimage","tvPost","props","componentDidMount","context","id","query","res","json","show","console","log","name","type","premiered","status","rating","average","genres","map","value","index","_embedded","seasons","filter","number","length","React","Component"],"mappings":";;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,GAA7C,EAAkDC,GAAlD,EAAuDC,MAAvD,EAA+DC,KAA/D,QAA4E,YAA5E;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,6BAAP;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,OAA1B,QAAyC,aAAzC;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,IAAMC,OAAO,GAAG,2BAAhB;;IAIMC,M;;;;;AACJ,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gFAAMA,KAAN;;AAEAC,IAAAA,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAE,iBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,gBAAAA,EADS,GACFD,OAAO,CAACE,KADN,CACTD,EADS,EAErB;;AAFqB;AAAA,uBAGHP,KAAK,wCAAiCO,EAAjC,oDAHF;;AAAA;AAGfE,gBAAAA,GAHe;AAAA;AAAA,uBAIFA,GAAG,CAACC,IAAJ,EAJE;;AAAA;AAIfC,gBAAAA,IAJe;AAMrBC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEAC,gBAAAA,OAAO,CAACC,GAAR,yBAA6BF,IAAI,CAACG,IAAlC;AARqB,iDAUd;AAAEH,kBAAAA,IAAI,EAAJA;AAAF,iBAVc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OAAjB;;AAHiB;AAiBlB;;;;6BAEQ;AACP,aACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAO,QAAA,UAAU,MAAjB;AAAkB,QAAA,SAAS,EAAC,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkBP,KAAK,CAACO,IAAN,CAAWI,IAAX,GAAkBX,KAAK,CAACO,IAAN,CAAWI,IAA7B,GAAoC,SAAtD,CAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkBX,KAAK,CAACO,IAAN,CAAWK,SAAX,GAAuBZ,KAAK,CAACO,IAAN,CAAWK,SAAlC,GAA8C,SAAhE,CAFF,CALF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkBZ,KAAK,CAACO,IAAN,CAAWM,MAAX,GAAoBb,KAAK,CAACO,IAAN,CAAWM,MAA/B,GAAwC,SAA1D,CAFF,CATF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkBb,KAAK,CAACO,IAAN,CAAWO,MAAX,CAAkBC,OAApC,CAFF,CAbF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGf,KAAK,CAACO,IAAN,CAAWS,MAAX,CAAkBC,GAAlB,CAAsB,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACvC,eAAO;AAAM,UAAA,GAAG,EAAEA,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAmBD,KAAnB,UAAP;AACC,OAFF,CADH,CAFF,CAjBF,EA0BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGlB,KAAK,CAACO,IAAN,CAAWa,SAAX,CAAqBC,OAArB,CAA6BC,MAA7B,CAAoC,UAAAD,OAAO;AAAA,eAAIA,OAAO,CAACE,MAAZ;AAAA,OAA3C,EAA+DC,MADlE,CAFF,CA1BF,CADN,CADA,CADF,CADF;AA0CD;;;;EA/DkBC,KAAK,CAACC,S;;AAsE3B,eAAe3B,MAAf","sourcesContent":["import Layout from '../components/layout'\r\nimport Layout2 from './tv_info/MyLayout'\r\nimport { Card, CardImg, CardBody, CardTitle, Row, Col, Button, Table } from 'reactstrap'\r\nimport ReactTable from \"react-table\"\r\nimport \"react-table/react-table.css\"\r\nimport { TvImage, TvCast, TvTitle } from './jsxstyles'\r\nimport { TvPostInfoLabel, TvPostInfoValue } from './customComponents'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport classnames from 'classnames';\r\n\r\nconst noimage = '/static/images/no-img.png'\r\n\r\n\r\n\r\nclass tvPost extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    componentDidMount= async function(context) {\r\n      const { id } = context.query;\r\n  //pules tvmaze api json based on selected show on the search page.\r\n  const res = await fetch(`https://api.tvmaze.com/shows/${id}?embed[]=episodes&embed[]=cast&embed[]=seasons`);\r\n  const show = await res.json();\r\n  \r\n  console.log(show);\r\n\r\n  console.log(`Fetched show: ${show.name}`);\r\n\r\n  return { show };\r\n};\r\n    \r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Layout2>\r\n        <Table borderless className=\"\">\r\n              <tbody>\r\n                <tr>\r\n                  <TvPostInfoLabel>Type:</TvPostInfoLabel>\r\n                  <TvPostInfoValue>{props.show.type ? props.show.type : 'no data'}</TvPostInfoValue>\r\n                </tr>\r\n                <tr>\r\n                  <TvPostInfoLabel>Premiered:</TvPostInfoLabel>\r\n                  <TvPostInfoValue>{props.show.premiered ? props.show.premiered : 'no data'}</TvPostInfoValue>\r\n                </tr>\r\n                <tr>\r\n                  <TvPostInfoLabel>Status:</TvPostInfoLabel>\r\n                  <TvPostInfoValue>{props.show.status ? props.show.status : 'no data'}</TvPostInfoValue>\r\n                </tr>\r\n                <tr>\r\n                  <TvPostInfoLabel>Rating:</TvPostInfoLabel>\r\n                  <TvPostInfoValue>{props.show.rating.average}</TvPostInfoValue>\r\n                </tr>\r\n                <tr>\r\n                  <TvPostInfoLabel>Genre:</TvPostInfoLabel>\r\n                  <TvPostInfoValue>\r\n                    {props.show.genres.map((value, index) => {\r\n                      return <span key={index}>{value} &nbsp;</span>\r\n                      })\r\n                    }\r\n                  </TvPostInfoValue>\r\n                </tr>\r\n                <tr>\r\n                  <TvPostInfoLabel>Seasons</TvPostInfoLabel>\r\n                  <TvPostInfoValue>\r\n                    {props.show._embedded.seasons.filter(seasons => seasons.number).length}\r\n                  </TvPostInfoValue>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n          \r\n        </Layout2>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default tvPost;"]},"metadata":{},"sourceType":"module"}