{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\newtest\\\\my-page\\\\pages\\\\provider_data\\\\networkTable.js\";\nimport React, { Component } from 'react';\nimport ReactTable from 'react-table';\nimport \"react-table/react-table.css\";\n\nvar networkdata = require('./newnetwork.json');\n/*counts number of Region types there are in the json\r\nconst uniqueNames = new Set(data.map(item => item.Region)).size;\r\n*/\n//Function for case insensitivity allowing for more flexibility on filter results based\n//on user input.\n\n\nfunction filterCaseInsensitive(filter, row) {\n  var id = filter.pivotId || filter.id;\n  return row[id] !== undefined ? String(row[id].toLowerCase()).startsWith(filter.value.toLowerCase()) : true;\n} //creates dropdown list for each table column listing available selection options for \n//each json listing.  Example: Region - Central, Southwest, East\n\n\nvar customFilter = function customFilter(_ref) {\n  var fieldName = _ref.fieldName,\n      filter = _ref.filter,\n      _onChange = _ref.onChange;\n  return React.createElement(\"select\", {\n    onChange: function onChange(event) {\n      return _onChange(event.target.value);\n    },\n    style: {\n      width: \"100%\"\n    },\n    value: filter ? filter.value : '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Show All\"), networkdata.sort(function (a, b) {\n    var One = a[fieldName];\n    var Two = b[fieldName];\n    return One < Two ? -1 : One > Two ? 1 : 0;\n  }).map(function (item) {\n    return item[fieldName];\n  }).filter(function (item, i, s) {\n    return s.lastIndexOf(item) == i;\n  }).map(function (value) {\n    return React.createElement(\"option\", {\n      key: value,\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, value);\n  }));\n};\n\nvar NetworkList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NetworkList, _Component);\n\n  function NetworkList(props) {\n    _classCallCheck(this, NetworkList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NetworkList).call(this, props));\n  }\n\n  _createClass(NetworkList, [{\n    key: \"render\",\n    value: function render() {\n      return networkdata ? this.renderData(networkdata) : this.renderLoading();\n    }\n  }, {\n    key: \"renderData\",\n    value: function renderData(networkdata) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(ReactTable, {\n        className: \"Provider-table -striped -highlight center shadow-sm\",\n        data: networkdata,\n        defaultPageSize: 20,\n        style: {\n          height: \"800px\"\n        } //sets filtering options in react-table for no dropdown option.  Calls the filtercaseinsensitive\n        //function as mentioned above\n        ,\n        filterable: true,\n        defaultFilterMethod: function defaultFilterMethod(filter, row) {\n          return filterCaseInsensitive(filter, row);\n        },\n        columns: [{\n          Header: \"Provider\",\n          columns: [{\n            Header: \"Name\",\n            id: \"Name\",\n            accessor: function accessor(d) {\n              return d.Name;\n            },\n            width: 140,\n            //*sorting method to allow for listing of numerical order listed in the name\n            sortMethod: function sortMethod(a, b) {\n              if (a.length === b.length) {\n                return a > b ? 1 : -1;\n              }\n\n              return a.length > b.length ? 1 : -1;\n            }\n          }, {\n            Header: \"Address\",\n            id: \"Address\",\n            accessor: function accessor(d) {\n              return d.Address;\n            },\n            width: 200,\n            size: 2,\n            style: {\n              whiteSpace: 'unset',\n              fontSize: '14px'\n            }\n          }, {\n            Header: \"Phone\",\n            id: \"Phone\",\n            accessor: function accessor(d) {\n              return d.Phone;\n            },\n            width: 150\n          }, {\n            Header: \"Email\",\n            id: \"Email\",\n            accessor: function accessor(d) {\n              return d.Email;\n            },\n            width: 200,\n            style: {\n              fontSize: '12px'\n            }\n          }]\n        }, {\n          Header: \"Provider Info\",\n          columns: [{\n            Header: \"Region\",\n            id: \"Region\",\n            accessor: function accessor(d) {\n              return d.Region;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref2) {\n              var filter = _ref2.filter,\n                  onChange = _ref2.onChange;\n              return customFilter({\n                fieldName: 'Region',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }, {\n            Header: \"County\",\n            id: \"County\",\n            style: {\n              'textAlign': 'center'\n            },\n            width: 120,\n            accessor: function accessor(d) {\n              return d.County;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref3) {\n              var filter = _ref3.filter,\n                  onChange = _ref3.onChange;\n              return customFilter({\n                fieldName: 'County',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }]\n        }, {\n          Header: \"Level of Service\",\n          columns: [{\n            Header: \"Ambulatory\",\n            accessor: \"Amb\",\n            style: {\n              'textAlign': 'center'\n            },\n            width: 120,\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref4) {\n              var filter = _ref4.filter,\n                  onChange = _ref4.onChange;\n              return customFilter({\n                fieldName: 'Amb',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }, {\n            Header: \"Wheelchair\",\n            id: \"WCHR\",\n            style: {\n              'textAlign': 'center'\n            },\n            width: 120,\n            accessor: function accessor(d) {\n              return d.WCHR;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref5) {\n              var filter = _ref5.filter,\n                  onChange = _ref5.onChange;\n              return customFilter({\n                fieldName: 'WCHR',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }, {\n            Header: \"Stretcher\",\n            id: \"Stretcher\",\n            style: {\n              'textAlign': 'center'\n            },\n            maxWidth: 120,\n            accessor: function accessor(d) {\n              return d.Stretcher;\n            },\n            filterMethod: function filterMethod(filter, row) {\n              return row[filter.id] === filter.value;\n            },\n            //calls the customfilter function above creating a dropdown list for\n            //filter\n            Filter: function Filter(_ref6) {\n              var filter = _ref6.filter,\n                  onChange = _ref6.onChange;\n              return customFilter({\n                fieldName: 'Stretcher',\n                filter: filter,\n                onChange: onChange\n              });\n            }\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, function (state, makeTable, instance) {\n        var recordsInfoText = \"\";\n        var filtered = state.filtered,\n            pageRows = state.pageRows,\n            pageSize = state.pageSize,\n            sortedData = state.sortedData,\n            page = state.page;\n\n        if (sortedData && sortedData.length > 0) {\n          var isFiltered = filtered.length > 0;\n          var totalRecords = sortedData.length;\n          var recordsCountFrom = page * pageSize + 1;\n          var recordsCountTo = recordsCountFrom + pageRows.length - 1;\n          if (isFiltered) recordsInfoText = \"\".concat(totalRecords, \" filtered Providers\");else recordsInfoText = \"\".concat(recordsCountFrom, \"-\").concat(recordsCountTo, \" of \").concat(totalRecords, \" records\");\n        } else recordsInfoText = \"No records\";\n\n        return React.createElement(\"div\", {\n          className: \"main-grid\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"records-info h3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        }, recordsInfoText)), makeTable());\n      }));\n    }\n  }, {\n    key: \"renderLoading\",\n    value: function renderLoading() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }]);\n\n  return NetworkList;\n}(Component);\n\nexport default NetworkList;","map":{"version":3,"sources":["C:\\Users\\Mark\\Desktop\\newtest\\my-page\\pages\\provider_data\\networkTable.js"],"names":["React","Component","ReactTable","networkdata","require","filterCaseInsensitive","filter","row","id","pivotId","undefined","String","toLowerCase","startsWith","value","customFilter","fieldName","onChange","event","target","width","sort","a","b","One","Two","map","item","i","s","lastIndexOf","NetworkList","props","renderData","renderLoading","height","Header","columns","accessor","d","Name","sortMethod","length","Address","size","style","whiteSpace","fontSize","Phone","Email","Region","filterMethod","Filter","County","WCHR","maxWidth","Stretcher","state","makeTable","instance","recordsInfoText","filtered","pageRows","pageSize","sortedData","page","isFiltered","totalRecords","recordsCountFrom","recordsCountTo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactTable from 'react-table'\r\nimport \"react-table/react-table.css\"\r\n\r\nvar networkdata = require('./newnetwork.json');\r\n\r\n/*counts number of Region types there are in the json\r\nconst uniqueNames = new Set(data.map(item => item.Region)).size;\r\n*/\r\n\r\n//Function for case insensitivity allowing for more flexibility on filter results based\r\n//on user input.\r\nfunction filterCaseInsensitive(filter, row) {\r\n  const id = filter.pivotId || filter.id;\r\n  return (\r\n    row[id] !== undefined ?\r\n      String(row[id].toLowerCase()).startsWith(filter.value.toLowerCase())\r\n    :  true\r\n  );\r\n}\r\n\r\n//creates dropdown list for each table column listing available selection options for \r\n//each json listing.  Example: Region - Central, Southwest, East\r\nconst customFilter = ({ fieldName, filter, onChange }) => {\r\n  return (\r\n    <select\r\n      onChange={event => onChange(event.target.value)}\r\n      style={{ width: \"100%\" }}\r\n      value={filter ? filter.value : ''}> \r\n      <option value= ''>Show All</option>\r\n      {networkdata.sort((a, b) => {\r\n          const One = a[fieldName];\r\n          const Two = b[fieldName];\r\n      \r\n          return (One < Two) ? -1 : (One > Two) ? 1 : 0;\r\n      })\r\n        .map(item => item[fieldName])\r\n        .filter((item, i, s) => s.lastIndexOf(item) == i)\r\n        .map(function (value) {\r\n          return (\r\n            <option key={value} value={value}>\r\n              {value}\r\n            </option>\r\n          );\r\n        })\r\n      }\r\n    </select>\r\n  );\r\n};\r\n\r\n\r\nclass NetworkList extends Component {\r\n  constructor(props) {\r\n    super(props); \r\n  }\r\n \r\n  render() {\r\n    return networkdata ? this.renderData(networkdata) : this.renderLoading();\r\n  }\r\n\r\n  renderData(networkdata) {\r\n    return (\r\n      <div>\r\n        <ReactTable \r\n          className= \"Provider-table -striped -highlight center shadow-sm\"\r\n          data= {networkdata}\r\n          defaultPageSize={20}\r\n          style={{\r\n            height: \"800px\"\r\n          }}\r\n          //sets filtering options in react-table for no dropdown option.  Calls the filtercaseinsensitive\r\n          //function as mentioned above\r\n          filterable defaultFilterMethod=\r\n          {(filter, row) => filterCaseInsensitive(filter, row) }\r\n          columns={[\r\n            {\r\n              Header: \"Provider\",\r\n              columns: [\r\n                {\r\n                  Header: \"Name\",\r\n                  id: \"Name\",\r\n                  accessor: d => d.Name,\r\n                  width: 140,\r\n                  \r\n                  //*sorting method to allow for listing of numerical order listed in the name\r\n                  sortMethod: (a, b) => {\r\n                    if (a.length === b.length) {\r\n                      return a > b ? 1 : -1;\r\n                    }\r\n                    return a.length > b.length ? 1 : -1;\r\n                  },\r\n                   \r\n                },\r\n                \r\n                {\r\n                  Header: \"Address\",\r\n                  id: \"Address\",\r\n                  accessor: d => d.Address,\r\n                  width: 200,\r\n                  size: 2,\r\n                  style: {\r\n                    whiteSpace: 'unset',\r\n                    fontSize: '14px'\r\n                  },\r\n                },\r\n                {\r\n                  Header: \"Phone\",\r\n                  id: \"Phone\",\r\n                  accessor: d => d.Phone,\r\n                  width: 150,\r\n                },\r\n                {\r\n                  Header: \"Email\",\r\n                  id: \"Email\",\r\n                  accessor: d => d.Email,\r\n                  width: 200,\r\n                  style: {fontSize: '12px'},\r\n                }\r\n              ]\r\n            },              \r\n            {\r\n              Header: \"Provider Info\",\r\n              columns: [\r\n                {\r\n                  Header: \"Region\",\r\n                  id: \"Region\",\r\n                  accessor: d => d.Region,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'Region', filter, onChange })\r\n                },\r\n                {\r\n                  Header: \"County\",\r\n                  id: \"County\",\r\n                  style: {'textAlign': 'center'},\r\n                  width: 120,\r\n                  accessor: d => d.County,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'County', filter, onChange })\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              Header: \"Level of Service\",\r\n              columns: [\r\n                {\r\n                  Header: \"Ambulatory\",\r\n                  accessor: \"Amb\",\r\n                  style: {'textAlign': 'center'},\r\n                  width: 120,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'Amb', filter, onChange })\r\n                },\r\n                {\r\n                  Header: \"Wheelchair\",\r\n                  id: \"WCHR\",\r\n                  style: {'textAlign': 'center'},\r\n                  width: 120,\r\n                  accessor: d => d.WCHR,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'WCHR', filter, onChange })\r\n                },\r\n                {\r\n                  Header: \"Stretcher\",\r\n                  id: \"Stretcher\",\r\n                  style: {'textAlign': 'center'},\r\n                  maxWidth: 120,\r\n                  accessor: d => d.Stretcher,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'Stretcher', filter, onChange })\r\n                },\r\n              ]\r\n            },\r\n          ]}\r\n        > \r\n        {/*functions to display totals of filtered data. */}\r\n        {(state, makeTable, instance) => {\r\n          let recordsInfoText = \"\";\r\n          const { filtered, pageRows, pageSize, sortedData, page } = state;\r\n\r\n          if (sortedData && sortedData.length > 0) {\r\n            let isFiltered = filtered.length > 0;\r\n            let totalRecords = sortedData.length;\r\n            let recordsCountFrom = page * pageSize + 1;\r\n            let recordsCountTo = recordsCountFrom + pageRows.length - 1;\r\n\r\n            if (isFiltered)\r\n              recordsInfoText = `${totalRecords} filtered Providers`;\r\n            else\r\n              recordsInfoText = `${recordsCountFrom}-${recordsCountTo} of ${totalRecords} records`;\r\n          } else recordsInfoText = \"No records\";\r\n\r\n          return (\r\n            <div className=\"main-grid\">\r\n                <div>\r\n                  <span className=\"records-info h3\">{recordsInfoText}</span>\r\n                </div>\r\n              {makeTable()}\r\n            </div>\r\n          );\r\n        }}\r\n      </ReactTable>\r\n    </div>\r\n    );\r\n  } \r\n  renderLoading() {\r\n    return <div>Loading...</div>;\r\n  }\r\n}\r\n\r\nexport default NetworkList;\r\n"]},"metadata":{},"sourceType":"module"}