{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport Layout from '../components/layout';\nimport Layout2 from './tv_info/MyLayout';\nimport { Card, CardImg, CardBody, CardTitle, Row, Col, Button } from 'reactstrap';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport { TvImage, TvCast, TvTitle } from './jsxstyles';\nimport fetch from 'isomorphic-unfetch';\nvar noimage = '/static/images/no-img.png';\n\nvar tvPost = function tvPost(props) {\n  return React.createElement(Layout, null, React.createElement(\"h1\", {\n    className: \"text-center\"\n  }, \"the below content has been imported from\", React.createElement(\"a\", {\n    href: \"https://www.tvmaze.com\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"TVmaze.com\")), React.createElement(Layout2, null, React.createElement(\"div\", {\n    className: \"h3 m-3\"\n  }, React.createElement(Row, null, React.createElement(Col, null, React.createElement(\"h1\", null, props.show.name), React.createElement(\"h3\", null, React.createElement(\"b\", null, \"Type:\"), \" \", React.createElement(\"small\", null, props.show.type ? props.show.type : 'no data')), React.createElement(\"h3\", null, React.createElement(\"b\", null, \"Premiered:\"), \" \", React.createElement(\"small\", null, props.show.premiered ? props.show.premiered : 'no data')), React.createElement(\"h3\", null, React.createElement(\"b\", null, \"status:\"), \" \", React.createElement(\"small\", null, props.show.status ? props.show.status : 'no data')), React.createElement(\"h3\", null, React.createElement(\"b\", null, \"Rating:\"), \" \", React.createElement(\"small\", null, props.show.rating.average)), React.createElement(\"h3\", null, React.createElement(\"b\", null, \"Genre:\"), \" \\xA0\", React.createElement(\"small\", null, props.show.genres.map(function (genres) {\n    return React.createElement(\"span\", {\n      key: props.show.genres\n    }, genres, \" \\xA0\");\n  })))), React.createElement(Col, {\n    sm: {\n      size: 'auto',\n      offset: 1\n    },\n    className: \"mr-5 mt-3\"\n  }, React.createElement(\"img\", {\n    src: props.show.image ? props.show.image.medium : noimage,\n    alt: \"no image\"\n  }))), React.createElement(Row, {\n    className: \"m-3\"\n  }, React.createElement(\"h4\", null, \"Summary:\", React.createElement(\"br\", null), React.createElement(\"small\", null, props.show.summary.replace(/<[/]?p>/g, '').replace(/<[/]?b>/g, '').replace(/<[/]?i>/g, '')))), React.createElement(Row, {\n    className: \"m-3\"\n  }, React.createElement(\"h3\", null, \"Link:\", React.createElement(\"small\", {\n    className: \"ml-2\"\n  }, React.createElement(\"a\", {\n    href: props.show.url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    title: props.show.url\n  }, props.show.name ? props.show.name : 'null')))), React.createElement(\"h2\", null, \"Cast:\"), React.createElement(\"div\", {\n    className: \"d-flex flex-wrap justify-content-left\"\n  }, props.show._embedded.cast.map(function (cast) {\n    return React.createElement(\"div\", {\n      key: cast.person.id\n    }, React.createElement(Card, {\n      className: \"m-2\"\n    }, React.createElement(CardTitle, {\n      className: \"m-4 text-center\",\n      style: TvTitle\n    }, cast.person.name), React.createElement(CardBody, null, React.createElement(\"div\", null, React.createElement(CardImg, {\n      className: \"p-2\",\n      style: TvImage,\n      src: cast.character.image === null && cast.person.image.medium || cast.character.image.medium,\n      alt: \"castimage\"\n    })), React.createElement(\"div\", {\n      className: \"text-center my-2\"\n    }, React.createElement(\"h4\", {\n      style: TvCast\n    }, \"As:\", React.createElement(\"small\", {\n      className: \"ml-2\"\n    }, cast.character.name)))), React.createElement(Button, {\n      className: \"btn-dark mt-3\"\n    }, React.createElement(\"a\", {\n      className: \"btn-dark w-100\",\n      href: cast.person.url,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\"\n    }, \"Actor page\"))));\n  })), React.createElement(\"div\", {\n    className: \"mt-4\"\n  }, React.createElement(\"h1\", null, \"Episodes:\"), React.createElement(ReactTable, {\n    className: \"-striped -highlight\",\n    data: props.show._embedded.episodes,\n    defaultPageSize: 20,\n    style: {\n      height: \"600px\",\n      fontSize: \"14px\"\n    },\n    filterable: true,\n    defaultFilterMethod: function defaultFilterMethod(filter, row) {\n      return String(row[filter.id]) === filter.value;\n    },\n    columns: [{\n      Header: \"Season\",\n      id: \"season\",\n      accessor: function accessor(d) {\n        return d.season;\n      },\n      maxWidth: 110,\n      style: {\n        'textAlign': 'center'\n      },\n      Filter: function Filter(_ref) {\n        var filter = _ref.filter,\n            _onChange = _ref.onChange;\n        return React.createElement(\"select\", {\n          onChange: function onChange(event) {\n            return _onChange(event.target.value);\n          },\n          style: {\n            width: \"100%\"\n          },\n          value: filter ? filter.value : ''\n        }, React.createElement(\"option\", {\n          value: \"\"\n        }, \"Show All\"), props.show._embedded.episodes.map(function (item) {\n          return item.season;\n        }).filter(function (item, i, s) {\n          return s.lastIndexOf(item) == i;\n        }).map(function (value) {\n          return React.createElement(\"option\", {\n            key: value,\n            value: value\n          }, value);\n        }));\n      }\n    }, {\n      Header: \"Episode #\",\n      accessor: \"number\",\n      maxWidth: 80,\n      style: {\n        'textAlign': 'center'\n      }\n    }, {\n      Header: \"Name\",\n      id: \"name\",\n      accessor: function accessor(d) {\n        return React.createElement(\"a\", {\n          href: d.url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\"\n        }, d.name);\n      },\n      minWidth: 70,\n      style: {\n        'whiteSpace': 'unset',\n        'textAlign': 'center'\n      }\n    }, {\n      Header: \"Air Date\",\n      id: \"airdate\",\n      accessor: function accessor(d) {\n        return d.airdate;\n      },\n      maxWidth: 120,\n      style: {\n        'whiteSpace': 'unset',\n        'textAlign': 'center'\n      }\n    }, {\n      Header: \"Summary\",\n      id: \"summary\",\n      accessor: function accessor(d) {\n        return d.summary != null && React.createElement(\"span\", null, d.summary.replace(/<[/]?p>/g, ''));\n      },\n      style: {\n        'whiteSpace': 'unset'\n      }\n    }]\n  })))));\n};\n\ntvPost.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var id, res, show;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            id = context.query.id; //pules tvmaze api json based on selected show on the search page.\n\n            _context.next = 3;\n            return fetch(\"https://api.tvmaze.com/shows/\".concat(id, \"?embed[]=episodes&embed[]=cast&embed[]=seasons\"));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            show = _context.sent;\n            console.log(show);\n            console.log(\"Fetched show: \".concat(show.name));\n            return _context.abrupt(\"return\", {\n              show: show\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default tvPost;","map":null,"metadata":{},"sourceType":"module"}