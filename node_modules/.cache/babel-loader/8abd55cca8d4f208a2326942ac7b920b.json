{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\newtest\\\\my-page\\\\pages\\\\tvpost.js\";\nimport React from 'react';\nimport Layout from '../components/layout';\nimport { Row, Col, Table } from 'reactstrap';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport { TvpageStyle } from './jsxstyles';\nimport { TvPostInfoLabel, TvPostInfoValue, NewTabLink, LeftFlexWrapDiv, TvMazePage, CustomTabs, CustomCard } from './customComponents';\nimport fetch from 'isomorphic-unfetch';\nvar noimage = '/static/images/no-img.png';\n\nvar tvPost = function tvPost(props) {\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"the below content has been imported from\", React.createElement(\"a\", {\n    href: \"https://www.tvmaze.com\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"TVmaze.com\")), React.createElement(TvMazePage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"h3 m-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, props.show.name), React.createElement(Table, {\n    borderless: true,\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(TvPostInfoLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Type:\"), React.createElement(TvPostInfoValue, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, props.show.type ? props.show.type : 'no data')), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(TvPostInfoLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Premiered:\"), React.createElement(TvPostInfoValue, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, props.show.premiered ? props.show.premiered : 'no data')), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(TvPostInfoLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Status:\"), React.createElement(TvPostInfoValue, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, props.show.status ? props.show.status : 'no data')), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(TvPostInfoLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Rating:\"), React.createElement(TvPostInfoValue, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, props.show.rating.average ? props.show.rating.average : 'no data')), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(TvPostInfoLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Genre:\"), React.createElement(TvPostInfoValue, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, props.show.genres.map(function (value, index) {\n    return React.createElement(\"span\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, value, \" \\xA0\");\n  }))), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(TvPostInfoLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Seasons\"), React.createElement(TvPostInfoValue, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, props.show._embedded.seasons.filter(function (seasons) {\n    return seasons.number;\n  }).length))))), React.createElement(Col, {\n    sm: {\n      size: 'auto',\n      offset: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"text-center mr-5 mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: props.show.image ? props.show.image.medium : noimage,\n    alt: \"no image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })))), React.createElement(Row, {\n    className: \"m-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Summary:\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, props.show.summary.replace(/<[/]?p>/g, '').replace(/<[/]?b>/g, '').replace(/<[/]?i>/g, '')))), React.createElement(Row, {\n    className: \"m-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Link:\", React.createElement(\"small\", {\n    className: \"ml-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(NewTabLink, {\n    Link: props.show.url,\n    Title: props.show.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, props.show.name ? props.show.name : 'null')))), React.createElement(CustomTabs, {\n    Tab1Name: \"Cast\",\n    Tab2Name: \"Episodes\",\n    Tab1Content: React.createElement(LeftFlexWrapDiv, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, props.show._embedded.cast.map(function (cast) {\n      return React.createElement(\"div\", {\n        className: \"p-3\",\n        key: cast.person.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(CustomCard, {\n        CardStyle: {\n          height: '570px'\n        },\n        TitleClass: \"m-4 text-center\",\n        TitleStyle: TvpageStyle.Title,\n        Title: cast.person.name,\n        ImgClass: \"d-flex justify-content-center\",\n        ImgStyle: TvpageStyle.Image,\n        ImgSrc: cast.person.image === null && noimage || cast.character.image === null && cast.person.image.medium || cast.character.image.medium,\n        ImgAlt: \"castimage\",\n        SubTitleClass: \"text-center my-2\",\n        SubTitleStyle: TvpageStyle.Cast,\n        SubTitle: React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, \"As: \\xA0\", React.createElement(\"small\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, cast.character.name)),\n        Link: React.createElement(NewTabLink, {\n          Style: \"btn btn-dark w-100 mt-3\",\n          Link: cast.person.url,\n          Title: \"Actor Page\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, \"Actor Page\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }));\n    }))\n    /*end of Tab1Content*/\n    ,\n    Tab2Content:\n    /*React Table for Episode List */\n    React.createElement(ReactTable, {\n      className: \"-striped -highlight\",\n      data: props.show._embedded.episodes,\n      defaultPageSize: 20,\n      style: {\n        height: \"600px\",\n        fontSize: \"14px\"\n      },\n      filterable: true,\n      defaultFilterMethod: function defaultFilterMethod(filter, row) {\n        return String(row[filter.id]) === filter.value;\n      },\n      columns: [{\n        Header: \"Season\",\n        id: \"season\",\n        accessor: function accessor(d) {\n          return d.season;\n        },\n        maxWidth: 110,\n        style: {\n          'textAlign': 'center'\n        },\n        //Dropdown list to filter table based on number\n        //of seasons\n        Filter: function Filter(_ref) {\n          var filter = _ref.filter,\n              _onChange = _ref.onChange;\n          return React.createElement(\"select\", {\n            onChange: function onChange(event) {\n              return _onChange(event.target.value);\n            },\n            style: {\n              width: \"100%\"\n            },\n            value: filter ? filter.value : '',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168\n            },\n            __self: this\n          }, \"Show All\"), props.show._embedded.episodes.map(function (item) {\n            return item.season;\n          }).filter(function (item, i, s) {\n            return s.lastIndexOf(item) == i;\n          }).map(function (value) {\n            return React.createElement(\"option\", {\n              key: value,\n              value: value,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 174\n              },\n              __self: this\n            }, value);\n          }));\n        }\n      }, {\n        Header: \"Episode #\",\n        accessor: \"number\",\n        maxWidth: 80,\n        style: {\n          'textAlign': 'center'\n        }\n      }, {\n        Header: \"Name\",\n        id: \"name\",\n        accessor: function accessor(d) {\n          return (//Converts Episode Name into a link to the TvMaze \n            //page for that episode\n            React.createElement(NewTabLink, {\n              Link: d.url,\n              Title: \"Episode Link\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 196\n              },\n              __self: this\n            }, d.name)\n          );\n        },\n        minWidth: 70,\n        style: {\n          'whiteSpace': 'unset',\n          'textAlign': 'center'\n        }\n      }, {\n        Header: \"Air Date\",\n        id: \"airdate\",\n        accessor: function accessor(d) {\n          return d.airdate;\n        },\n        maxWidth: 120,\n        style: {\n          'whiteSpace': 'unset',\n          'textAlign': 'center'\n        }\n      }, {\n        Header: \"Summary\",\n        id: \"summary\",\n        accessor: function accessor(d) {\n          return d.summary != null && React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 216\n            },\n            __self: this\n          }, d.summary.replace(/<[/]?p>/g, ''));\n        },\n        style: {\n          'whiteSpace': 'unset'\n        }\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })\n    /*End of Tab2Content*/\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }))));\n};\n\ntvPost.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var id, res, show;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            id = context.query.id; //pules tvmaze api json based on selected show on the search page.\n\n            _context.next = 3;\n            return fetch(\"https://api.tvmaze.com/shows/\".concat(id, \"?embed[]=episodes&embed[]=cast&embed[]=seasons\"));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            show = _context.sent;\n            console.log(show);\n            console.log(\"Fetched show: \".concat(show.name));\n            return _context.abrupt(\"return\", {\n              show: show\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default tvPost;\n/*\r\n<Card style={{height: '570px'}} className=\"m-2\">\r\n                    <CardTitle \r\n                      className=\"m-4 text-center\" \r\n                      style={TvpageStyle.Title} >\r\n                        {cast.person.name}\r\n                    </CardTitle>\r\n                    <CardBody>\r\n                        <CardImg \r\n                          className=\"d-flex justify-content-center\" \r\n                          style={TvpageStyle.Image} \r\n                          src={\r\n                            cast.person.image === null && noimage ||\r\n                            cast.character.image === null && cast.person.image.medium ||\r\n                            cast.character.image.medium\r\n                          } \r\n                          alt=\"castimage\" \r\n                        />\r\n                      <CardSubtitle className=\"text-center my-2\">\r\n                        <h4 style={TvpageStyle.Cast}>As: &nbsp;\r\n                          <small>{cast.character.name}</small>\r\n                        </h4>\r\n                      </CardSubtitle>\r\n                    </CardBody>\r\n                      <NewTabLink\r\n                        Style=\"btn btn-dark w-100 mt-3\"\r\n                        Link={cast.person.url}\r\n                        Title=\"Actor Page\">\r\n                          Actor Page\r\n                      </NewTabLink>\r\n                  </Card>\r\n*/","map":{"version":3,"sources":["C:\\Users\\Mark\\Desktop\\newtest\\my-page\\pages\\tvpost.js"],"names":["React","Layout","Row","Col","Table","ReactTable","TvpageStyle","TvPostInfoLabel","TvPostInfoValue","NewTabLink","LeftFlexWrapDiv","TvMazePage","CustomTabs","CustomCard","fetch","noimage","tvPost","props","show","name","type","premiered","status","rating","average","genres","map","value","index","_embedded","seasons","filter","number","length","size","offset","image","medium","summary","replace","url","cast","person","id","height","Title","Image","character","Cast","episodes","fontSize","row","String","Header","accessor","d","season","maxWidth","style","Filter","onChange","event","target","width","item","i","s","lastIndexOf","minWidth","airdate","getInitialProps","context","query","res","json","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Layout from '../components/layout'\r\nimport { Row, Col, Table } from 'reactstrap'\r\nimport ReactTable from \"react-table\"\r\nimport \"react-table/react-table.css\"\r\nimport { TvpageStyle } from './jsxstyles'\r\nimport { TvPostInfoLabel, TvPostInfoValue, NewTabLink, \r\n  LeftFlexWrapDiv, TvMazePage, CustomTabs, CustomCard } from './customComponents'\r\nimport fetch from 'isomorphic-unfetch'\r\n\r\nconst noimage = '/static/images/no-img.png'\r\n\r\n\r\nconst tvPost = props => {\r\n  \r\n  return (\r\n    <Layout>\r\n      <h1 className=\"text-center\">the below content has been imported from \r\n        <a href=\"https://www.tvmaze.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          TVmaze.com\r\n        </a>\r\n      </h1>\r\n      <TvMazePage>\r\n        <div className=\"h3 m-3\">\r\n          <Row>\r\n            <Col>\r\n              <h1>{props.show.name}</h1>\r\n              <Table borderless className=\"\">\r\n                <tbody>\r\n                  <tr>\r\n                    <TvPostInfoLabel>Type:</TvPostInfoLabel>\r\n                    <TvPostInfoValue>\r\n                      {props.show.type ? props.show.type : 'no data'}\r\n                    </TvPostInfoValue>\r\n                  </tr>\r\n                  <tr>\r\n                    <TvPostInfoLabel>Premiered:</TvPostInfoLabel>\r\n                    <TvPostInfoValue>\r\n                      {props.show.premiered ? props.show.premiered : 'no data'}\r\n                    </TvPostInfoValue>\r\n                  </tr>\r\n                  <tr>\r\n                    <TvPostInfoLabel>Status:</TvPostInfoLabel>\r\n                    <TvPostInfoValue>\r\n                      {props.show.status ? props.show.status : 'no data'}\r\n                    </TvPostInfoValue>\r\n                  </tr>\r\n                  <tr>\r\n                    <TvPostInfoLabel>Rating:</TvPostInfoLabel>\r\n                    <TvPostInfoValue>\r\n                      {props.show.rating.average? props.show.rating.average : 'no data' }\r\n                    </TvPostInfoValue>\r\n                  </tr>\r\n                  <tr>\r\n                    <TvPostInfoLabel>Genre:</TvPostInfoLabel>\r\n                    <TvPostInfoValue>\r\n                      {props.show.genres.map((value, index) => {\r\n                        return <span key={index}>{value} &nbsp;</span>\r\n                        })\r\n                      }\r\n                    </TvPostInfoValue>\r\n                  </tr>\r\n                  <tr>\r\n                    <TvPostInfoLabel>Seasons</TvPostInfoLabel>\r\n                    <TvPostInfoValue>\r\n                      {props.show._embedded.seasons.filter(seasons => seasons.number).length}\r\n                    </TvPostInfoValue>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n            <Col sm={{ size: 'auto', offset: 1 }}>\r\n              <div className=\"text-center mr-5 mt-2\">\r\n                <img src={props.show.image ? props.show.image.medium : noimage} alt=\"no image\"/>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"m-3\">\r\n            <h4>Summary:<br />\r\n              <small>\r\n                {props.show.summary\r\n                  .replace(/<[/]?p>/g, '')\r\n                  .replace(/<[/]?b>/g, '')\r\n                  .replace(/<[/]?i>/g, '')\r\n                }\r\n              </small>\r\n            </h4>\r\n          </Row>\r\n          <Row className=\"m-3\">\r\n            <h3>Link: \r\n              <small className=\"ml-2\">\r\n                <NewTabLink\r\n                  Link={props.show.url}\r\n                  Title={props.show.url}>\r\n                    {props.show.name ? props.show.name : 'null'}\r\n                </NewTabLink>\r\n              </small>\r\n            </h3>\r\n          </Row>\r\n          <CustomTabs\r\n            Tab1Name = 'Cast'\r\n            Tab2Name = 'Episodes'\r\n            Tab1Content = {\r\n              <LeftFlexWrapDiv>\r\n              {props.show._embedded.cast.map(cast => (\r\n                <div className=\"p-3\" key={cast.person.id}>\r\n                  <CustomCard\r\n                    CardStyle={{height: '570px'}}\r\n                    TitleClass=\"m-4 text-center\"\r\n                    TitleStyle={TvpageStyle.Title}\r\n                    Title={cast.person.name}\r\n                    ImgClass=\"d-flex justify-content-center\"\r\n                    ImgStyle={TvpageStyle.Image}\r\n                    ImgSrc={\r\n                      cast.person.image === null && noimage ||\r\n                      cast.character.image === null && cast.person.image.medium ||\r\n                      cast.character.image.medium\r\n                    }\r\n                    ImgAlt=\"castimage\"\r\n                    SubTitleClass=\"text-center my-2\"\r\n                    SubTitleStyle={TvpageStyle.Cast}\r\n                    SubTitle={\r\n                      <p>As: &nbsp;\r\n                          <small>{cast.character.name}</small></p>\r\n                    }\r\n                    Link={\r\n                      <NewTabLink\r\n                        Style=\"btn btn-dark w-100 mt-3\"\r\n                        Link={cast.person.url}\r\n                        Title=\"Actor Page\">\r\n                          Actor Page\r\n                      </NewTabLink>\r\n                    }\r\n                  />\r\n                </div>\r\n              ))}\r\n            </LeftFlexWrapDiv>\r\n            /*end of Tab1Content*/\r\n            }\r\n            Tab2Content = {\r\n              /*React Table for Episode List */\r\n              <ReactTable\r\n                className= \"-striped -highlight\"\r\n                data= {props.show._embedded.episodes}\r\n                defaultPageSize={20}\r\n                style={{\r\n                  height: \"600px\",\r\n                  fontSize: \"14px\",\r\n                }}\r\n                filterable\r\n                  defaultFilterMethod={(filter, row) =>\r\n                  String(row[filter.id]) === filter.value}\r\n                columns= {[\r\n                  {\r\n                    Header: \"Season\",\r\n                    id: \"season\",\r\n                    accessor: d => d.season,\r\n                    maxWidth: 110,\r\n                    style: {'textAlign': 'center'},\r\n                    //Dropdown list to filter table based on number\r\n                    //of seasons\r\n                    Filter: ({ filter, onChange }) => {\r\n                      return (\r\n                        <select\r\n                          onChange={event => onChange(event.target.value)}\r\n                          style={{ width: \"100%\"}}\r\n                          value={filter ? filter.value : ''}> \r\n                          <option value= ''>Show All</option>\r\n                          {props.show._embedded.episodes\r\n                            .map(item => item.season)\r\n                            .filter((item, i, s) => s.lastIndexOf(item) == i)\r\n                            .map(function (value) {\r\n                              return (\r\n                                <option key={value} value={value}>\r\n                                  {value}\r\n                                </option>\r\n                              );\r\n                            })\r\n                          }\r\n                        </select>\r\n                      );\r\n                    }\r\n                  },\r\n                  {\r\n                    Header: \"Episode #\",\r\n                    accessor: \"number\",\r\n                    maxWidth: 80,\r\n                    style: {'textAlign': 'center'}\r\n                  },\r\n                  {\r\n                    Header:\"Name\",\r\n                    id: \"name\",\r\n                    accessor: d =>\r\n                    //Converts Episode Name into a link to the TvMaze \r\n                    //page for that episode\r\n                    <NewTabLink\r\n                      Link={d.url}\r\n                      Title=\"Episode Link\">\r\n                        {d.name}\r\n                    </NewTabLink>, \r\n                    minWidth: 70,\r\n                    style: {'whiteSpace': 'unset', 'textAlign': 'center'},\r\n                  },\r\n                  {\r\n                    Header:\"Air Date\",\r\n                    id: \"airdate\",\r\n                    accessor: d => d.airdate,\r\n                    maxWidth: 120,\r\n                    style: {'whiteSpace': 'unset', 'textAlign': 'center'},\r\n                  },\r\n                  {\r\n                    Header:\"Summary\",\r\n                    id: \"summary\",\r\n                    accessor: d => \r\n                    d.summary != null && \r\n                      <span>\r\n                        {d.summary.replace(/<[/]?p>/g, '')}\r\n                      </span>,\r\n                    style: {'whiteSpace': 'unset'},\r\n                  }\r\n                ]}\r\n              />\r\n            }\r\n            /*End of Tab2Content*/\r\n          />\r\n          {/*End of CustomTab class */}\r\n        </div>\r\n      </TvMazePage>\r\n    </Layout>\r\n  )\r\n};\r\n\r\n\r\ntvPost.getInitialProps = async function(context) {\r\n  const { id } = context.query;\r\n  //pules tvmaze api json based on selected show on the search page.\r\n  const res = await fetch(`https://api.tvmaze.com/shows/${id}?embed[]=episodes&embed[]=cast&embed[]=seasons`);\r\n  const show = await res.json();\r\n  \r\n  console.log(show);\r\n\r\n  console.log(`Fetched show: ${show.name}`);\r\n\r\n  return { show };\r\n};\r\n\r\nexport default tvPost;\r\n\r\n\r\n/*\r\n<Card style={{height: '570px'}} className=\"m-2\">\r\n                    <CardTitle \r\n                      className=\"m-4 text-center\" \r\n                      style={TvpageStyle.Title} >\r\n                        {cast.person.name}\r\n                    </CardTitle>\r\n                    <CardBody>\r\n                        <CardImg \r\n                          className=\"d-flex justify-content-center\" \r\n                          style={TvpageStyle.Image} \r\n                          src={\r\n                            cast.person.image === null && noimage ||\r\n                            cast.character.image === null && cast.person.image.medium ||\r\n                            cast.character.image.medium\r\n                          } \r\n                          alt=\"castimage\" \r\n                        />\r\n                      <CardSubtitle className=\"text-center my-2\">\r\n                        <h4 style={TvpageStyle.Cast}>As: &nbsp;\r\n                          <small>{cast.character.name}</small>\r\n                        </h4>\r\n                      </CardSubtitle>\r\n                    </CardBody>\r\n                      <NewTabLink\r\n                        Style=\"btn btn-dark w-100 mt-3\"\r\n                        Link={cast.person.url}\r\n                        Title=\"Actor Page\">\r\n                          Actor Page\r\n                      </NewTabLink>\r\n                  </Card>\r\n*/"]},"metadata":{},"sourceType":"module"}