{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\newtest\\\\my-page\\\\pages\\\\test_items\\\\jsonsearch.js\";\nimport React, { Component } from 'react';\nimport fetch from 'isomorphic-unfetch'; //import { createSorter } from './sort';\n//import data from './something.json';\n\nvar List = React.createClass({\n  displayName: \"List\",\n  getInitialState: function getInitialState() {\n    return {\n      'city': '',\n      'zip': '',\n      'temp': ''\n    };\n  },\n  getData: function getData() {\n    $.ajax({\n      url: 'http://api.weather-site.com/api/API_KEY/q/55555.json',\n      dataType: 'jsonp',\n      success: function (parsed_json) {\n        this.setState({\n          city: parsed_json['cityName']\n        });\n        this.setState({\n          zip: parsed_json['zipCode']\n        });\n        this.setState({\n          temp: parsed_json['temperature']\n        });\n      }.bind(this)\n    });\n  },\n  handleQuerySearch: function handleQuerySearch(e) {\n    this.setState({\n      zip: e.target.value\n    });\n  },\n  handleSubmit: function handleSubmit(e) {\n    e.preventDefaults();\n    this.getData(this.state.zip);\n  },\n  render: function render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Search with a zip code\"), React.createElement(\"form\", {\n      className: \"search-form\",\n      on: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Zip Code\",\n      className: \"form-control\",\n      value: this.state.zip,\n      onChange: this.handleQuerySearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \" \", this.state.city, \" \")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \" \", this.state.temp, \" \")));\n  }\n});\n/*\r\nclass List extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const sorters = [{ property: 'name', direction: 'DESC' }];\r\n    this.state = {\r\n        \r\n        sorters: this.props.sorters\r\n    };\r\n}\r\n\r\n  static defaultProps = {\r\n    sorters: [{\r\n      property: 'name'\r\n    }, {\r\n      property: 'company'\r\n    }]\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { sorters } = this.state;\r\n    fetch('/something.json?sort=${JSON.stringify(sorter)}')\r\n    .then(res => res.json())\r\n    .then(this.onLoad.bind(this));\r\n  }\r\n\r\n  parseData(data) {\r\n    const { sorters } = this.state;\r\n\r\n    if (data && data.length) {\r\n      if (Array.isArray(sorters) && sorters.length) {\r\n        data.sort(createSorter(...sorters));\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  onLoad = data => {\r\n    this.setState({\r\n      data: this.parseData(data)\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { data } = this.state;\r\n    \r\n    return data ? this.renderData(data) : this.renderLoading();\r\n  }\r\n\r\n  renderData(data) {\r\n    if (data && data.length > 0) {\r\n      return (\r\n        <div>\r\n          {data.map(item => (\r\n            <div key={item.id}>\r\n              <a href={`mailto:$(item.email)`}>{item.name}</a> {item.company}\r\n              </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>No items found</div>;\r\n    }\r\n  }\r\n\r\n  renderLoading() {\r\n    return <div>Loading...</div>;\r\n  }\r\n}\r\n\r\n\r\n\r\n/* unsorted list....\r\nclass List extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const sorters = [{ property: 'name', direction: 'DESC' }];\r\n        this.state = {\r\n            data\r\n        };\r\n    }\r\n  \r\n    componentDidMount () {\r\n        fetch('/something.json')\r\n        .then(res => res.json())\r\n        .then(this.onLoad);\r\n    }\r\n  \r\n    parseData (response) {\r\n      return response.data;\r\n    }\r\n  \r\n    onLoad = (data) => {\r\n      this.setState({\r\n        data: this.parseData(data)\r\n      });\r\n    }\r\n  \r\n    render () {\r\n      const { data } = this.state;\r\n  \r\n      return data ?\r\n        this.renderData(data) :\r\n        this.renderLoading()\r\n    }\r\n  \r\n    renderData (data) {\r\n      if (data && data.length) {\r\n        return (\r\n          <div>\r\n            {\r\n              data.map(item => (\r\n                <div key={item.id}>\r\n                  <a href={`mailto:${item.email}`}>{item.name}</a> {item.company}\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n        );\r\n      } else {\r\n        return <div>No items found</div>\r\n      }\r\n    }\r\n  \r\n    renderLoading () {\r\n      return <div>Fetch is not working</div>\r\n    }\r\n  }\r\n*/\n\nexport default List;","map":{"version":3,"sources":["C:\\Users\\Mark\\Desktop\\newtest\\my-page\\pages\\test_items\\jsonsearch.js"],"names":["React","Component","fetch","List","createClass","getInitialState","getData","$","ajax","url","dataType","success","parsed_json","setState","city","zip","temp","bind","handleQuerySearch","e","target","value","handleSubmit","preventDefaults","state","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CACA;AACA;;AAGA,IAAIC,IAAI,GAAGH,KAAK,CAACI,WAAN,CAAkB;AAAA;AAC3BC,EAAAA,eAAe,EAAE,2BAAU;AACzB,WAAO;AACL,cAAQ,EADH;AAEL,aAAO,EAFF;AAGL,cAAQ;AAHH,KAAP;AAKD,GAP0B;AAQ3BC,EAAAA,OAAO,EAAE,mBAAU;AACjBC,IAAAA,CAAC,CAACC,IAAF,CAAO;AACPC,MAAAA,GAAG,EAAE,sDADE;AAEPC,MAAAA,QAAQ,EAAE,OAFH;AAGPC,MAAAA,OAAO,EAAE,UAASC,WAAT,EAAqB;AAC5B,aAAKC,QAAL,CAAc;AAACC,UAAAA,IAAI,EAAEF,WAAW,CAAC,UAAD;AAAlB,SAAd;AACA,aAAKC,QAAL,CAAc;AAACE,UAAAA,GAAG,EAAEH,WAAW,CAAC,SAAD;AAAjB,SAAd;AACA,aAAKC,QAAL,CAAc;AAACG,UAAAA,IAAI,EAAEJ,WAAW,CAAC,aAAD;AAAlB,SAAd;AACD,OAJQ,CAIPK,IAJO,CAIF,IAJE;AAHF,KAAP;AASD,GAlB0B;AAmB3BC,EAAAA,iBAAiB,EAAE,2BAASC,CAAT,EAAY;AAC7B,SAAKN,QAAL,CAAc;AAACE,MAAAA,GAAG,EAAEI,CAAC,CAACC,MAAF,CAASC;AAAf,KAAd;AACD,GArB0B;AAsB3BC,EAAAA,YAAY,EAAE,sBAASH,CAAT,EAAY;AACxBA,IAAAA,CAAC,CAACI,eAAF;AACA,SAAKjB,OAAL,CAAa,KAAKkB,KAAL,CAAWT,GAAxB;AACD,GAzB0B;AA0B3BU,EAAAA,MAAM,EAAE,kBAAU;AAChB,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEE;AAAM,MAAA,SAAS,EAAC,aAAhB;AAA8B,MAAA,EAAE,EAAE,KAAKH,YAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,WAAW,EAAC,UAFd;AAGE,MAAA,SAAS,EAAC,cAHZ;AAIE,MAAA,KAAK,EAAE,KAAKE,KAAL,CAAWT,GAJpB;AAKE,MAAA,QAAQ,EAAE,KAAKG,iBALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CAFF,CADF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM,KAAKM,KAAL,CAAWV,IAAjB,MADF,CAfF,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM,KAAKU,KAAL,CAAWR,IAAjB,MADF,CAnBF,CADF;AAyBC;AApDwB,CAAlB,CAAX;AAsDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIA,eAAeb,IAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport fetch from 'isomorphic-unfetch';\r\n//import { createSorter } from './sort';\r\n//import data from './something.json';\r\n\r\n\r\nvar List = React.createClass({\r\n  getInitialState: function(){\r\n    return {\r\n      'city': '',\r\n      'zip': '',\r\n      'temp': ''\r\n    }\r\n  },\r\n  getData: function(){\r\n    $.ajax({\r\n    url: 'http://api.weather-site.com/api/API_KEY/q/55555.json',\r\n    dataType: 'jsonp',\r\n    success: function(parsed_json){\r\n      this.setState({city: parsed_json['cityName']});\r\n      this.setState({zip: parsed_json['zipCode']});\r\n      this.setState({temp: parsed_json['temperature']});\r\n    }.bind(this)\r\n    });\r\n  },\r\n  handleQuerySearch: function(e) {\r\n    this.setState({zip: e.target.value});\r\n  },\r\n  handleSubmit: function(e) {\r\n    e.preventDefaults();\r\n    this.getData(this.state.zip);\r\n  },\r\n  render: function(){\r\n    return(\r\n      <div>\r\n        <div className='search'>\r\n          <h1>Search with a zip code</h1>\r\n          <form className='search-form' on={this.handleSubmit}>\r\n            <input\r\n              type='text'\r\n              placeholder='Zip Code'\r\n              className='form-control'\r\n              value={this.state.zip}\r\n              onChange={this.handleQuerySearch}\r\n            />\r\n            <input type='submit' value='Search' />\r\n          </form>\r\n        </div>\r\n      \r\n        <div>\r\n          <h3> {this.state.city} </h3>\r\n        </div>\r\n  \r\n        <div>\r\n          <h3> {this.state.temp} </h3>\r\n        </div>\r\n      </div>\r\n     );\r\n    }\r\n});\r\n/*\r\nclass List extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const sorters = [{ property: 'name', direction: 'DESC' }];\r\n    this.state = {\r\n        \r\n        sorters: this.props.sorters\r\n    };\r\n}\r\n\r\n  static defaultProps = {\r\n    sorters: [{\r\n      property: 'name'\r\n    }, {\r\n      property: 'company'\r\n    }]\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { sorters } = this.state;\r\n    fetch('/something.json?sort=${JSON.stringify(sorter)}')\r\n    .then(res => res.json())\r\n    .then(this.onLoad.bind(this));\r\n  }\r\n\r\n  parseData(data) {\r\n    const { sorters } = this.state;\r\n\r\n    if (data && data.length) {\r\n      if (Array.isArray(sorters) && sorters.length) {\r\n        data.sort(createSorter(...sorters));\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  onLoad = data => {\r\n    this.setState({\r\n      data: this.parseData(data)\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { data } = this.state;\r\n    \r\n    return data ? this.renderData(data) : this.renderLoading();\r\n  }\r\n\r\n  renderData(data) {\r\n    if (data && data.length > 0) {\r\n      return (\r\n        <div>\r\n          {data.map(item => (\r\n            <div key={item.id}>\r\n              <a href={`mailto:$(item.email)`}>{item.name}</a> {item.company}\r\n              </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>No items found</div>;\r\n    }\r\n  }\r\n\r\n  renderLoading() {\r\n    return <div>Loading...</div>;\r\n  }\r\n}\r\n\r\n\r\n\r\n/* unsorted list....\r\nclass List extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const sorters = [{ property: 'name', direction: 'DESC' }];\r\n        this.state = {\r\n            data\r\n        };\r\n    }\r\n  \r\n    componentDidMount () {\r\n        fetch('/something.json')\r\n        .then(res => res.json())\r\n        .then(this.onLoad);\r\n    }\r\n  \r\n    parseData (response) {\r\n      return response.data;\r\n    }\r\n  \r\n    onLoad = (data) => {\r\n      this.setState({\r\n        data: this.parseData(data)\r\n      });\r\n    }\r\n  \r\n    render () {\r\n      const { data } = this.state;\r\n  \r\n      return data ?\r\n        this.renderData(data) :\r\n        this.renderLoading()\r\n    }\r\n  \r\n    renderData (data) {\r\n      if (data && data.length) {\r\n        return (\r\n          <div>\r\n            {\r\n              data.map(item => (\r\n                <div key={item.id}>\r\n                  <a href={`mailto:${item.email}`}>{item.name}</a> {item.company}\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n        );\r\n      } else {\r\n        return <div>No items found</div>\r\n      }\r\n    }\r\n  \r\n    renderLoading () {\r\n      return <div>Fetch is not working</div>\r\n    }\r\n  }\r\n*/\r\nexport default List;"]},"metadata":{},"sourceType":"module"}