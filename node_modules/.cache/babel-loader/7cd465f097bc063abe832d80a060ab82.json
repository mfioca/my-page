{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\n//sets hitpoints based on constitution stat number.\nexport function SetConstAdj(constitution) {\n  if (constitution == 1) {\n    return -3;\n  }\n\n  if (constitution == 2 || constitution == 3) {\n    return -2;\n  }\n\n  if (constitution >= 4 && constitution <= 6) {\n    return -1;\n  }\n\n  if (constitution >= 7 && constitution <= 14) {\n    return 0;\n  }\n\n  if (constitution == 15) {\n    return 1;\n  }\n\n  if (constitution == 16) {\n    return 2;\n  }\n\n  if (constitution == 17) {\n    return 3;\n  }\n\n  if (constitution == 18) {\n    return 4;\n  }\n\n  if (constitution == 19) {\n    return 5;\n  }\n\n  if (constitution == 20) {\n    return 6;\n  }\n}\n; //sets Armorclass based on dexterity stat number.\n\nexport function SetAcAdj(dexterity) {\n  if (dexterity == 1 || dexterity == 2) {\n    return -5;\n  }\n\n  if (dexterity == 3) {\n    return -4;\n  }\n\n  if (dexterity == 4) {\n    return -3;\n  }\n\n  if (dexterity == 5) {\n    return -2;\n  }\n\n  if (dexterity == 6) {\n    return -1;\n  }\n\n  if (dexterity >= 7 && dexterity <= 14) {\n    return 0;\n  }\n\n  if (dexterity == 15) {\n    return 1;\n  }\n\n  if (dexterity == 16) {\n    return 2;\n  }\n\n  if (dexterity == 17) {\n    return 3;\n  }\n\n  if (dexterity == 18 || dexterity == 19) {\n    return 4;\n  }\n\n  if (dexterity == 20) {\n    return 5;\n  }\n} //sets damage and hit adjustment based on strength stat number.\n\nexport function SetDmgHitAdj(strength) {\n  if (strength == 1) {\n    return -4;\n  }\n\n  if (strength == 2 || strength == 3) {\n    return -3;\n  }\n\n  if (strength == 4 || strength == 5) {\n    return -2;\n  }\n\n  if (strength == 6 || strength == 7) {\n    return -1;\n  }\n\n  if (strength >= 8 && strength <= 16) {\n    return 0;\n  }\n\n  if (strength == 17) {\n    return 1;\n  }\n\n  if (strength == 18) {\n    return 2;\n  }\n\n  if (strength == 19) {\n    return 3;\n  }\n\n  if (strength == 20) {\n    return 4;\n  }\n}\n/* ************************\r\n*   Stat functions        * \r\n**************************/\n//sets stats including base role 1-20 than applies above functions.\n\nexport function setherostats(HP, AC, DMG) {\n  //performs a 1-20 roll for every item in the \"herostats\" object/state\n  for (var Stat in this.state.herostats) {\n    this.state.herostats[Stat] = Math.floor(Math.random() * 20 + 1);\n  }\n\n  ;\n  this.setState({\n    //sets adjusted items based on herostats numbers in the set..adj functions\n    heroHp: HP + this.SetConstAdj(this.state.herostats.Const),\n    heroAc: AC + this.SetAcAdj(this.state.herostats.Dext),\n    heroDmg: DMG + this.SetDmgHitAdj(this.state.herostats.Str),\n    heroHitAdj: this.SetDmgHitAdj(this.state.herostats.Str)\n  });\n} //sets stats including base role 1-20 than applies above functions.\n\nexport function setmonsterstats() {\n  //performs a 1-20 roll for every item in the \"monsterstats\" object/state\n  for (var key in this.state.monsterstats) {\n    this.state.monsterstats[key] = Math.floor(Math.random() * 20 + 1);\n  }\n\n  ;\n  this.setState({\n    //sets adjusted items based on monsterstats numbers in the set..adj functions\n    monsterHp: this.state.monsterbase.Hp + this.SetConstAdj(this.state.monsterstats.Const),\n    monsterAc: this.state.monsterbase.ArmorClass + this.SetAcAdj(this.state.monsterstats.Dext),\n    monsterDmg: this.state.monsterbase.Damage + this.SetDmgHitAdj(this.state.monsterstats.Str),\n    monsterHitAdj: this.SetDmgHitAdj(this.state.monsterstats.Str)\n  });\n}\n/* ***********************\r\n*    Attack functions    * \r\n*************************/\n//initiative shows what character attacks first\n\nexport function RollforIniative() {\n  var heroinit = Math.floor(Math.random() * 10 + 1);\n  var monsterinit = Math.floor(Math.random() * 10 + 1);\n\n  if (heroinit < monsterinit) {\n    this.setState({\n      heroInitiative: 'First',\n      monsterInitiative: 'Second',\n      heroAttackVisible: true //displays attack button\n\n    });\n  } else if (heroinit > monsterinit) {\n    this.setState({\n      monsterInitiative: 'First',\n      heroInitiative: 'Second',\n      monsterAttackVisible: true //displays attack button\n\n    });\n  } else {\n    this.setState({\n      heroInitiative: 'ReRoll',\n      monsterInitiative: 'ReRoll',\n      //hides attck buttons due to reroll\n      heroAttackVisible: false,\n      monsterAttackVisible: false\n    });\n  }\n\n  ; //clears out the hit/miss comments and roll result since it is a new round.\n\n  this.setState({\n    heroDidHit: '',\n    monsterDidHit: '',\n    heroRoll: 0,\n    monsterRoll: 0\n  });\n}\n/* determins if attack is successful depending on attack turn(set by attackvisible state).  adjusts for\r\narmor class and hit adjustment.  on successful attack role, applies damage\r\nto hp and if hp reaches zero alerts that character is dead */\n\nexport function AttackRoll() {\n  if (this.state.heroAttackVisible === true) {\n    var attackroll = _parseInt(Math.random() * 20 + 1);\n\n    var adjattackroll = attackroll + this.state.heroHitAdj;\n    var critstrike = this.state.heroDmg * 2;\n\n    if (attackroll < 20 && adjattackroll >= this.state.monsterAc) {\n      this.setState({\n        heroDidHit: 'Hit',\n        heroRoll: adjattackroll\n      }); //performs check to see if the monster hp after hero damange is 0 or lower\n\n      if (this.state.monsterHp - this.state.heroDmg <= 0) {\n        this.setState({\n          monsterHp: 'Dead',\n          heroRoll: adjattackroll // if yes, monster is dead\n\n        });\n      } else {\n        this.setState({\n          monsterHp: this.state.monsterHp - this.state.heroDmg\n        });\n      }\n    } else if (attackroll === 20) {\n      this.setState({\n        heroDidHit: 'Hit',\n        heroRoll: 'Crit Strike'\n      });\n\n      if (this.state.monsterHp - critstrike <= 0) {\n        this.setState({\n          monsterHp: 'Dead',\n          heroRoll: 'Crit Strike' // if yes, monster is dead\n\n        });\n      } else {\n        this.setState({\n          monsterHp: this.state.monsterHp - critstrike\n        });\n      }\n    } else {\n      this.setState({\n        heroDidHit: 'Miss',\n        heroRoll: adjattackroll\n      });\n    }\n\n    ;\n  }\n\n  if (this.state.monsterAttackVisible === true) {\n    var _attackroll = _parseInt(Math.random() * 20 + 1);\n\n    var _adjattackroll = _attackroll + this.state.monsterHitAdj;\n\n    var _critstrike = this.state.monsterDmg * 2;\n\n    if (_attackroll < 20 && _adjattackroll >= this.state.heroAc) {\n      this.setState({\n        monsterDidHit: 'Hit',\n        monsterRoll: _adjattackroll\n      }); //performs check to see if the hero hp after monster damange is 0 or lower\n\n      if (this.state.heroHp - this.state.monsterDmg <= 0) {\n        this.setState({\n          heroHp: 'Dead',\n          monsterRoll: _adjattackroll // if yes, hero is dead\n\n        });\n      } else {\n        //if no, sets the herohp state to reflect new damage\n        this.setState({\n          heroHp: this.state.heroHp - this.state.monsterDmg\n        });\n      }\n    } else if (_attackroll === 20) {\n      this.setState({\n        monsterDidHit: 'Hit',\n        monsterRoll: 'Crit Strike'\n      });\n\n      if (this.state.heroHp - _critstrike <= 0) {\n        this.setState({\n          heroHp: 'Dead',\n          monsterRoll: 'Crit Strike' // if yes, monster is dead\n\n        });\n      } else {\n        this.setState({\n          heroHp: this.state.heroHp - _critstrike\n        });\n      }\n    } else {\n      this.setState({\n        monsterDidHit: 'Miss',\n        monsterRoll: _adjattackroll\n      });\n    }\n\n    ;\n  }\n}\n/*function to determine where and when the attack button should be displayed based on initiative\r\nsetting. Function is called when the attack button is pressed in attackSection (Attackbutton() ) */\n\nexport function AttackTurn() {\n  if (this.state.heroAttackVisible === true) {\n    if (this.state.monsterHp === 'Dead' || this.state.heroInitiative === 'Second') {\n      this.setState(function (state) {\n        return {\n          heroAttackVisible: !state.heroAttackVisible\n        };\n      });\n    } else {\n      //if hero goes first, makes sure attack button on monster area is hidden \n      //and displays attack button for hero.\n      this.setState(function (state) {\n        return {\n          monsterAttackVisible: !state.monsterAttackVisible,\n          heroAttackVisible: !state.heroAttackVisible\n        };\n      });\n    }\n  }\n\n  if (this.state.monsterAttackVisible === true) {\n    if (this.state.heroHp === 'Dead' || this.state.monsterInitiative === 'Second') {\n      this.setState(function (state) {\n        return {\n          monsterAttackVisible: !state.monsterAttackVisible\n        };\n      });\n    } else {\n      this.setState(function (state) {\n        return (//if monster goes first, makes sure attack button on hero area is hidden \n          //and displays attack button for monster.\n          {\n            monsterAttackVisible: !state.monsterAttackVisible,\n            heroAttackVisible: !state.heroAttackVisible\n          }\n        );\n      });\n    }\n  }\n}\n;","map":{"version":3,"sources":["C:\\Users\\Mark\\Desktop\\newtest\\my-page\\pages\\DandD\\mainfunctions.js"],"names":["SetConstAdj","constitution","SetAcAdj","dexterity","SetDmgHitAdj","strength","setherostats","HP","AC","DMG","Stat","state","herostats","Math","floor","random","setState","heroHp","Const","heroAc","Dext","heroDmg","Str","heroHitAdj","setmonsterstats","key","monsterstats","monsterHp","monsterbase","Hp","monsterAc","ArmorClass","monsterDmg","Damage","monsterHitAdj","RollforIniative","heroinit","monsterinit","heroInitiative","monsterInitiative","heroAttackVisible","monsterAttackVisible","heroDidHit","monsterDidHit","heroRoll","monsterRoll","AttackRoll","attackroll","adjattackroll","critstrike","AttackTurn"],"mappings":"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","sourcesContent":["\r\n//sets hitpoints based on constitution stat number.\r\nexport function SetConstAdj(constitution) {\r\n    if (constitution == 1) {\r\n        return -3;\r\n    }\r\n    if (constitution == 2 || constitution == 3) {\r\n        return -2;\r\n    }\r\n    if (constitution >= 4 && constitution <= 6) {\r\n        return -1;\r\n    }\r\n    if (constitution >= 7 && constitution <= 14) {\r\n        return 0;\r\n    }\r\n    if (constitution == 15) {\r\n        return 1;\r\n    }\r\n    if (constitution == 16) {\r\n        return 2;\r\n    }\r\n    if (constitution == 17) {\r\n        return 3;\r\n    }\r\n    if (constitution == 18) {\r\n        return 4;\r\n    }\r\n    if (constitution == 19) {\r\n        return 5;\r\n    }\r\n    if (constitution == 20) {\r\n        return 6;\r\n    }\r\n};\r\n\r\n//sets Armorclass based on dexterity stat number.\r\nexport function SetAcAdj(dexterity) {\r\n    if (dexterity == 1 || dexterity == 2) {\r\n        return -5;\r\n    }\r\n    if (dexterity == 3) {\r\n        return -4;\r\n    }\r\n    if (dexterity == 4) {\r\n        return -3;\r\n    }\r\n    if (dexterity == 5) {\r\n        return -2;\r\n    }\r\n    if (dexterity == 6) {\r\n        return -1;\r\n    }\r\n    if (dexterity >= 7 && dexterity <= 14) {\r\n        return 0;\r\n    }\r\n    if (dexterity == 15) {\r\n        return 1;\r\n    }\r\n    if (dexterity == 16) {\r\n        return 2;\r\n    }\r\n    if (dexterity == 17) {\r\n        return 3;\r\n    }\r\n    if (dexterity == 18 || dexterity == 19) {\r\n        return 4;\r\n    }\r\n    if (dexterity == 20) {\r\n        return 5;\r\n    }\r\n}\r\n\r\n//sets damage and hit adjustment based on strength stat number.\r\nexport function SetDmgHitAdj(strength) {\r\n    if (strength == 1) {\r\n        return -4;\r\n    }\r\n    if (strength == 2 || strength == 3) {\r\n        return -3;\r\n    }\r\n    if (strength == 4 || strength == 5) {\r\n        return -2;\r\n    }\r\n    if (strength == 6 || strength == 7) {\r\n        return -1;\r\n    }\r\n    if (strength >= 8 && strength <= 16) {\r\n        return 0;\r\n    }\r\n    if (strength == 17 ) {\r\n        return 1;\r\n    }\r\n    if (strength == 18 ) {\r\n        return 2;\r\n    }\r\n    if (strength == 19 ) {\r\n        return 3;\r\n    }\r\n    if (strength == 20 ) {\r\n        return 4;\r\n    }\r\n}\r\n\r\n/* ************************\r\n*   Stat functions        * \r\n**************************/\r\n\r\n//sets stats including base role 1-20 than applies above functions.\r\nexport function setherostats(HP, AC, DMG) {\r\n    //performs a 1-20 roll for every item in the \"herostats\" object/state\r\n    for (let Stat in this.state.herostats) {\r\n        this.state.herostats[Stat] = Math.floor((Math.random() * 20) + 1);\r\n    };\r\n    this.setState ({\r\n        //sets adjusted items based on herostats numbers in the set..adj functions\r\n        heroHp: HP + this.SetConstAdj(this.state.herostats.Const),\r\n        heroAc: AC + this.SetAcAdj(this.state.herostats.Dext),\r\n        heroDmg: DMG + this.SetDmgHitAdj(this.state.herostats.Str),\r\n        heroHitAdj: this.SetDmgHitAdj(this.state.herostats.Str),\r\n    });\r\n}\r\n\r\n//sets stats including base role 1-20 than applies above functions.\r\nexport function setmonsterstats() {\r\n\r\n    //performs a 1-20 roll for every item in the \"monsterstats\" object/state\r\n    for (let key in this.state.monsterstats) {\r\n        this.state.monsterstats[key] = Math.floor((Math.random() * 20) + 1);\r\n    };\r\n    this.setState ({\r\n        //sets adjusted items based on monsterstats numbers in the set..adj functions\r\n        monsterHp: this.state.monsterbase.Hp + this.SetConstAdj(this.state.monsterstats.Const),\r\n        monsterAc: this.state.monsterbase.ArmorClass + this.SetAcAdj(this.state.monsterstats.Dext),\r\n        monsterDmg: this.state.monsterbase.Damage + this.SetDmgHitAdj(this.state.monsterstats.Str),\r\n        monsterHitAdj: this.SetDmgHitAdj(this.state.monsterstats.Str),\r\n    });\r\n}\r\n\r\n/* ***********************\r\n*    Attack functions    * \r\n*************************/\r\n\r\n//initiative shows what character attacks first\r\nexport function RollforIniative() {\r\n    const heroinit = Math.floor((Math.random() * 10) + 1);\r\n    const monsterinit = Math.floor((Math.random() * 10) + 1);\r\n    \r\n    if (heroinit < monsterinit) {\r\n        this.setState ({\r\n            heroInitiative: 'First',\r\n            monsterInitiative: 'Second',\r\n            heroAttackVisible: true  //displays attack button\r\n        });\r\n    } else if (heroinit > monsterinit) {\r\n        this.setState ({\r\n            monsterInitiative: 'First',\r\n            heroInitiative: 'Second',\r\n            monsterAttackVisible: true //displays attack button\r\n        }); \r\n    } else {\r\n        this.setState ({\r\n            heroInitiative: 'ReRoll',\r\n            monsterInitiative: 'ReRoll',\r\n            //hides attck buttons due to reroll\r\n            heroAttackVisible: false,  \r\n            monsterAttackVisible: false\r\n        });\r\n    };\r\n\r\n    //clears out the hit/miss comments and roll result since it is a new round.\r\n    this.setState ({\r\n        heroDidHit: '',\r\n        monsterDidHit: '',\r\n        heroRoll: 0,\r\n        monsterRoll: 0\r\n    });\r\n}\r\n\r\n\r\n/* determins if attack is successful depending on attack turn(set by attackvisible state).  adjusts for\r\narmor class and hit adjustment.  on successful attack role, applies damage\r\nto hp and if hp reaches zero alerts that character is dead */\r\nexport function AttackRoll() {\r\n    if (this.state.heroAttackVisible === true) {\r\n        let attackroll = (parseInt((Math.random() * 20) + 1));\r\n        let adjattackroll = attackroll + (this.state.heroHitAdj); \r\n        let critstrike = (this.state.heroDmg * 2);\r\n    \r\n        if (attackroll < 20 && adjattackroll >= this.state.monsterAc ) {\r\n            this.setState(\r\n                {\r\n                    heroDidHit: 'Hit', heroRoll: adjattackroll\r\n                }\r\n            );\r\n            //performs check to see if the monster hp after hero damange is 0 or lower\r\n            if ((this.state.monsterHp - this.state.heroDmg) <= 0) {\r\n                this.setState (\r\n                    {\r\n                        monsterHp: 'Dead', heroRoll: adjattackroll  // if yes, monster is dead\r\n                    }\r\n                ) \r\n            } else {\r\n                this.setState (\r\n                    {\r\n                        monsterHp: this.state.monsterHp - this.state.heroDmg\r\n                    }\r\n                )\r\n            }\r\n        } else if (attackroll === 20) {\r\n            this.setState(\r\n                {\r\n                    heroDidHit: 'Hit', heroRoll: 'Crit Strike'\r\n                }\r\n            );\r\n            if ((this.state.monsterHp - critstrike) <= 0) {\r\n                this.setState (\r\n                    {\r\n                        monsterHp: 'Dead', heroRoll: 'Crit Strike'  // if yes, monster is dead\r\n                    }\r\n                ) \r\n            } else {\r\n                this.setState (\r\n                    {\r\n                        monsterHp: this.state.monsterHp - critstrike\r\n                    }\r\n                )\r\n            }\r\n        } else {\r\n            this.setState (\r\n                {\r\n                    heroDidHit: 'Miss', heroRoll: adjattackroll\r\n                }\r\n            );\r\n        };\r\n    }\r\n\r\n    if (this.state.monsterAttackVisible === true) {\r\n        let attackroll = (parseInt((Math.random() * 20) + 1));\r\n        let adjattackroll = attackroll + (this.state.monsterHitAdj);\r\n        let critstrike = (this.state.monsterDmg * 2);\r\n    \r\n        if (attackroll < 20 && adjattackroll >= this.state.heroAc) {\r\n            this.setState(\r\n                {\r\n                    monsterDidHit: 'Hit', monsterRoll: adjattackroll\r\n                }\r\n            )\r\n            //performs check to see if the hero hp after monster damange is 0 or lower\r\n            if ((this.state.heroHp - this.state.monsterDmg) <= 0) {\r\n                this.setState (\r\n                    {\r\n                        heroHp: 'Dead', monsterRoll: adjattackroll  // if yes, hero is dead\r\n                    }\r\n                )  \r\n            } else {\r\n                //if no, sets the herohp state to reflect new damage\r\n                this.setState (\r\n                    {\r\n                        heroHp: this.state.heroHp - this.state.monsterDmg\r\n                    }\r\n                )\r\n            }\r\n        } else if (attackroll === 20) {\r\n            this.setState({\r\n                monsterDidHit: 'Hit', monsterRoll: 'Crit Strike'\r\n            });\r\n\r\n            if ((this.state.heroHp - critstrike) <= 0) {\r\n                this.setState (\r\n                    {\r\n                        heroHp: 'Dead', monsterRoll: 'Crit Strike'  // if yes, monster is dead\r\n                    }\r\n                ) \r\n            } else {\r\n                this.setState (\r\n                    {\r\n                        heroHp: this.state.heroHp - critstrike\r\n                    }\r\n                )\r\n            } \r\n        } else {\r\n            this.setState (\r\n                {\r\n                    monsterDidHit: 'Miss', monsterRoll: adjattackroll\r\n                }\r\n            );\r\n        };\r\n    }\r\n}\r\n\r\n/*function to determine where and when the attack button should be displayed based on initiative\r\nsetting. Function is called when the attack button is pressed in attackSection (Attackbutton() ) */ \r\nexport function AttackTurn() {\r\n    if (this.state.heroAttackVisible === true) {\r\n        if (this.state.monsterHp === 'Dead'  || this.state.heroInitiative === 'Second') {\r\n            this.setState(state => (\r\n                {\r\n                    heroAttackVisible: !state.heroAttackVisible\r\n                }\r\n            ));\r\n        } \r\n        else {\r\n            //if hero goes first, makes sure attack button on monster area is hidden \r\n            //and displays attack button for hero.\r\n            this.setState(state => (\r\n                {\r\n                    monsterAttackVisible: !state.monsterAttackVisible, \r\n                    heroAttackVisible: !state.heroAttackVisible\r\n                }\r\n            ));\r\n        }\r\n    }\r\n    if (this.state.monsterAttackVisible === true) {\r\n        if (this.state.heroHp === 'Dead' || this.state.monsterInitiative === 'Second') {\r\n            this.setState(state => (\r\n                {\r\n                    monsterAttackVisible: !state.monsterAttackVisible\r\n                }\r\n            ));\r\n        }\r\n        else {\r\n            this.setState(state => (\r\n                //if monster goes first, makes sure attack button on hero area is hidden \r\n                //and displays attack button for monster.\r\n                {\r\n                    monsterAttackVisible: !state.monsterAttackVisible, \r\n                    heroAttackVisible: !state.heroAttackVisible\r\n                }\r\n            ));\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}