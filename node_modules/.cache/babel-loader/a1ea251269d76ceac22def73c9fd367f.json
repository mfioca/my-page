{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\newtest\\\\my-page\\\\pages\\\\tvpost.js\";\nimport React from \"react\";\nimport Layout from '../components/layout';\nimport Layout2 from './tv_info/MyLayout';\nimport fetch from 'isomorphic-unfetch';\nvar noimage = '/static/images/no-img.png';\n\nvar tvPost = function tvPost(props) {\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"the below content has been imported from \", React.createElement(\"a\", {\n    href: \"https://www.tvmaze.com\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"TVmaze.com\")), React.createElement(Layout2, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, props.show.name), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Type:\"), \" \", React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, props.show.type ? props.show.type : 'no data')), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Premiered:\"), \" \", props.show.premiered ? props.show.premiered : 'no data'), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"status:\"), \" \", props.show.status ? props.show.status : 'no data'), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Rating:\"), \" \", props.show.rating.average ? props.show.average : 'no data'), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Genre:\"), \" \\xA0\", props.show.genres.map(function (genre) {\n    return React.createElement(\"span\", {\n      key: props.show.genres,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, genre, \" \\xA0\");\n  })), React.createElement(\"img\", {\n    src: props.show.image ? props.show.image.medium : noimage,\n    alt: \"no image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, props.show.summary.replace(/<[/]?p>/g, '').replace(/<[/]?b>/g, '').replace(/<[/]?i>/g, '')), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Link:\", React.createElement(\"a\", {\n    href: props.show.url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    title: props.show.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, props.show.url ? props.show.url : 'null')))));\n};\n\ntvPost.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var id, res, show;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            id = context.query.id; //pules tvmaze api json based on selected show on the search page.\n\n            _context.next = 3;\n            return fetch(\"https://api.tvmaze.com/shows/\".concat(id));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            show = _context.sent;\n            console.log(show);\n            console.log(\"Fetched show: \".concat(show.name));\n            return _context.abrupt(\"return\", {\n              show: show\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default tvPost;","map":{"version":3,"sources":["C:\\Users\\Mark\\Desktop\\newtest\\my-page\\pages\\tvpost.js"],"names":["Layout","Layout2","fetch","noimage","tvPost","props","show","name","type","premiered","status","rating","average","genres","map","genre","image","medium","summary","replace","url","getInitialProps","context","id","query","res","json","console","log"],"mappings":"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","sourcesContent":["import Layout from '../components/layout';\r\nimport Layout2 from './tv_info/MyLayout';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\nconst noimage = '/static/images/no-img.png';\r\n\r\n\r\nconst tvPost = props => (\r\n  <Layout>\r\n    <h1 className=\"text-center\">the below content has been imported from <a href=\"https://www.tvmaze.com\" target=\"_blank\" rel=\"noopener noreferrer\">TVmaze.com</a></h1>\r\n    <Layout2>\r\n      <div className=\"h3\">\r\n        <h1>{props.show.name}</h1>\r\n        <h2><b>Type:</b> <small>{props.show.type ? props.show.type : 'no data'}</small></h2>\r\n        <p><b>Premiered:</b> {props.show.premiered ? props.show.premiered : 'no data'}</p>\r\n        <p><b>status:</b> {props.show.status ? props.show.status : 'no data'}</p>\r\n        <p><b>Rating:</b> {props.show.rating.average ? props.show.average : 'no data'}</p>\r\n        <p>\r\n          {/* since tvmaze api json has genre as an imbedded array,\r\n            pulls the data in genres in a key map to list all entries*/}\r\n          <b>Genre:</b> &nbsp;\r\n          {props.show.genres.map(genre => (\r\n            <span key={props.show.genres}>\r\n            {genre} &nbsp;\r\n            </span>\r\n          ))}\r\n        </p>\r\n        <img src={props.show.image ? props.show.image.medium : noimage} alt=\"no image\"/>\r\n        <p>{props.show.summary.replace(/<[/]?p>/g, '').replace(/<[/]?b>/g, '').replace(/<[/]?i>/g, '')}</p>\r\n        <p>Link: \r\n          <a href={props.show.url}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              title={props.show.url}>\r\n          {props.show.url ? props.show.url : 'null'}\r\n          </a>\r\n        </p>\r\n      </div>\r\n    </Layout2>\r\n  </Layout>\r\n);\r\n\r\ntvPost.getInitialProps = async function(context) {\r\n  const { id } = context.query;\r\n  //pules tvmaze api json based on selected show on the search page.\r\n  const res = await fetch(`https://api.tvmaze.com/shows/${id}`);\r\n  const show = await res.json();\r\n  \r\n  console.log(show);\r\n\r\n  console.log(`Fetched show: ${show.name}`);\r\n\r\n  return { show };\r\n};\r\n\r\nexport default tvPost;"]},"metadata":{},"sourceType":"module"}