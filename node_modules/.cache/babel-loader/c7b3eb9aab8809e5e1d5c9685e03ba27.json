{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nexport { SetmonsterConstAdj, SetmonsterDmgAdj, SetmonsterHitAdj, SetmonsteracAdj, setmonsterstats, monsterattackroll, monsterAttackTurn }; //sets monster hit point adjustment based on constitution stat number.\n\nfunction SetmonsterConstAdj() {\n  var Constitution = this.state.monsterstats.Const;\n\n  if (Constitution == 1) {\n    return -3;\n  }\n\n  if (Constitution == 2 || Constitution == 3) {\n    return -2;\n  }\n\n  if (Constitution >= 4 && Constitution <= 6) {\n    return -1;\n  }\n\n  if (Constitution >= 7 && Constitution <= 14) {\n    return 0;\n  }\n\n  if (Constitution == 15) {\n    return 1;\n  }\n\n  if (Constitution == 16) {\n    return 2;\n  }\n\n  if (Constitution == 17) {\n    return 3;\n  }\n\n  if (Constitution == 18) {\n    return 4;\n  }\n\n  if (Constitution == 19) {\n    return 5;\n  }\n\n  if (Constitution == 20) {\n    return 6;\n  }\n}\n\n; //sets monster armor class adjustment based on dexterity stat number.\n\nfunction SetmonsteracAdj() {\n  var Dexterity = this.state.monsterstats.Dext;\n\n  if (Dexterity == 1 || Dexterity == 2) {\n    return -5;\n  }\n\n  if (Dexterity == 3) {\n    return -4;\n  }\n\n  if (Dexterity == 4) {\n    return -3;\n  }\n\n  if (Dexterity == 5) {\n    return -2;\n  }\n\n  if (Dexterity == 6) {\n    return -1;\n  }\n\n  if (Dexterity >= 7 && Dexterity <= 14) {\n    return 0;\n  }\n\n  if (Dexterity == 15) {\n    return 1;\n  }\n\n  if (Dexterity == 16) {\n    return 2;\n  }\n\n  if (Dexterity == 17) {\n    return 3;\n  }\n\n  if (Dexterity == 18 || Dexterity == 19) {\n    return 4;\n  }\n\n  if (Dexterity == 20) {\n    return 5;\n  }\n} //sets monster damage based on strength stat number.\n\n\nfunction SetmonsterDmgAdj() {\n  var Strength = this.state.monsterstats.Str;\n\n  if (Strength == 1) {\n    return -4;\n  }\n\n  if (Strength == 2 || Strength == 3) {\n    return -3;\n  }\n\n  if (Strength == 4 || Strength == 5) {\n    return -2;\n  }\n\n  if (Strength == 6 || Strength == 7) {\n    return -1;\n  }\n\n  if (Strength >= 8 && Strength <= 16) {\n    return 0;\n  }\n\n  if (Strength == 17) {\n    return 1;\n  }\n\n  if (Strength == 18) {\n    return 2;\n  }\n\n  if (Strength == 19) {\n    return 3;\n  }\n\n  if (Strength == 20) {\n    return 4;\n  }\n} //sets monster hit adjustment based on strength stat number.\n\n\nfunction SetmonsterHitAdj() {\n  var Strength = this.state.monsterstats.Str;\n\n  if (Strength == 1) {\n    return -4;\n  }\n\n  if (Strength == 2 || Strength == 3) {\n    return -3;\n  }\n\n  if (Strength == 4 || Strength == 5) {\n    return -2;\n  }\n\n  if (Strength == 6 || Strength == 7) {\n    return -1;\n  }\n\n  if (Strength >= 8 && Strength <= 16) {\n    return 0;\n  }\n\n  if (Strength == 17) {\n    return 1;\n  }\n\n  if (Strength == 18) {\n    return 2;\n  }\n\n  if (Strength == 19) {\n    return 3;\n  }\n\n  if (Strength == 20) {\n    return 4;\n  }\n} //sets stats including base role 1-20 than applies above functions.\n\n\nfunction setmonsterstats() {\n  //performs a 1-20 roll for every item in the \"monsterstats\" object/state\n  for (var key in this.state.monsterstats) {\n    this.state.monsterstats[key] = Math.floor(Math.random() * 20 + 1);\n  }\n\n  ;\n  this.setState({\n    //sets adjusted items based on monsterstats numbers in the set..adj functions\n    monsteradjusted: {\n      Hp: this.state.monsterbase.Hp + this.SetmonsterConstAdj(),\n      Ac: this.state.monsterbase.ArmorClass + this.SetmonsteracAdj(),\n      Dmg: this.state.monsterbase.Damage + this.SetmonsterDmgAdj(),\n      HitAdj: this.state.monsterbase.HitAdj + this.SetmonsterHitAdj()\n    }\n  });\n}\n/* determins if the monster successfully hits the hero.  adjusts for hero\r\narmor class andmonster hit adjustment.  on successful attack role, applies damage\r\nto hero hp and if hp reaches zero alerts that hero is dead */\n\n\nfunction monsterattackroll() {\n  var attackroll = _parseInt(Math.random() * 20 + 1);\n\n  var adjattackroll = attackroll + this.state.monsterHitAdj;\n  var critstrike = this.state.monsterDmg * 2;\n\n  if (attackroll < 20 && adjattackroll >= this.state.heroAc) {\n    this.setState({\n      monsterDidHit: 'Hit',\n      monsterRoll: adjattackroll\n    }); //performs check to see if the hero hp after monster damange is 0 or lower\n\n    if (this.state.heroHp - this.state.monsterDmg <= 0) {\n      this.setState({\n        heroHp: 'Dead',\n        monsterRoll: adjattackroll // if yes, hero is dead\n\n      });\n    } else {\n      //if no, sets the herohp state to reflect new damage\n      this.setState({\n        heroHp: this.state.heroHp - this.state.monsterDmg\n      });\n    }\n  } else if (attackroll >= 20) {\n    this.setState({\n      monsterDidHit: 'Hit',\n      monsterRoll: 'Crit Strike'\n    });\n\n    if (this.state.heroHp - critstrike <= 0) {\n      this.setState({\n        heroHp: 'Dead',\n        monsterRoll: 'Crit Strike' // if yes, monster is dead\n\n      });\n    } else {\n      this.setState({\n        heroHp: this.state.heroHp - critstrike\n      });\n    }\n  } else {\n    this.setState({\n      monsterDidHit: 'Miss',\n      monsterRoll: adjattackroll\n    });\n  }\n\n  ;\n}\n\n;\n/*function to determine if the attack button should be displayed. Function is\r\ncalled when the attack button is pressed in attackSection (Attackbutton() )\r\nif hero dead or monster goes 2nd, attack button should not be visible */\n\nfunction monsterAttackTurn() {\n  if (this.state.heroHp === 'Dead' || this.state.monsterInitiative === 'Second') {\n    this.setState(function (state) {\n      return {\n        monsterAttackVisible: !state.monsterAttackVisible\n      };\n    });\n  } else {\n    this.setState(function (state) {\n      return (//if monster goes first, makes sure attack button on hero area is hidden \n        //and displays attack button for monster.\n        {\n          monsterAttackVisible: !state.monsterAttackVisible,\n          heroAttackVisible: !state.heroAttackVisible\n        }\n      );\n    });\n  }\n}","map":{"version":3,"sources":["C:\\Users\\Mark\\Desktop\\newtest\\my-page\\pages\\DandD\\monsterfunctions.js"],"names":["SetmonsterConstAdj","SetmonsterDmgAdj","SetmonsterHitAdj","SetmonsteracAdj","setmonsterstats","monsterattackroll","monsterAttackTurn","Constitution","state","monsterstats","Const","Dexterity","Dext","Strength","Str","key","Math","floor","random","setState","monsteradjusted","Hp","monsterbase","Ac","ArmorClass","Dmg","Damage","HitAdj","attackroll","adjattackroll","monsterHitAdj","critstrike","monsterDmg","heroAc","monsterDidHit","monsterRoll","heroHp","monsterInitiative","monsterAttackVisible","heroAttackVisible"],"mappings":"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","sourcesContent":["export { SetmonsterConstAdj, SetmonsterDmgAdj, SetmonsterHitAdj, \r\n    SetmonsteracAdj, setmonsterstats, monsterattackroll, monsterAttackTurn\r\n}\r\n\r\n//sets monster hit point adjustment based on constitution stat number.\r\nfunction SetmonsterConstAdj() {\r\n    const Constitution = this.state.monsterstats.Const;\r\n\r\n    if (Constitution == 1) {\r\n        return -3;\r\n    }\r\n    if (Constitution == 2 || Constitution == 3) {\r\n        return -2;\r\n    }\r\n    if (Constitution >= 4 && Constitution <= 6) {\r\n        return -1;\r\n    }\r\n    if (Constitution >= 7 && Constitution <= 14) {\r\n        return 0;\r\n    }\r\n    if (Constitution == 15) {\r\n        return 1;\r\n    }\r\n    if (Constitution == 16) {\r\n        return 2;\r\n    }\r\n    if (Constitution == 17) {\r\n        return 3;\r\n    }\r\n    if (Constitution == 18) {\r\n        return 4;\r\n    }\r\n    if (Constitution == 19) {\r\n        return 5;\r\n    }\r\n    if (Constitution == 20) {\r\n        return 6;\r\n    }\r\n};\r\n\r\n//sets monster armor class adjustment based on dexterity stat number.\r\nfunction SetmonsteracAdj() {\r\n    const Dexterity = this.state.monsterstats.Dext;\r\n\r\n    if (Dexterity == 1 || Dexterity == 2) {\r\n        return -5;\r\n    }\r\n    if (Dexterity == 3) {\r\n        return -4;\r\n    }\r\n    if (Dexterity == 4) {\r\n        return -3;\r\n    }\r\n    if (Dexterity == 5) {\r\n        return -2;\r\n    }\r\n    if (Dexterity == 6) {\r\n        return -1;\r\n    }\r\n    if (Dexterity >= 7 && Dexterity <= 14) {\r\n        return 0;\r\n    }\r\n    if (Dexterity == 15) {\r\n        return 1;\r\n    }\r\n    if (Dexterity == 16) {\r\n        return 2;\r\n    }\r\n    if (Dexterity == 17) {\r\n        return 3;\r\n    }\r\n    if (Dexterity == 18 || Dexterity == 19) {\r\n        return 4;\r\n    }\r\n    if (Dexterity == 20) {\r\n        return 5;\r\n    }\r\n}\r\n\r\n//sets monster damage based on strength stat number.\r\nfunction SetmonsterDmgAdj() {\r\n    const Strength = this.state.monsterstats.Str;\r\n\r\n    if (Strength == 1) {\r\n        return -4;\r\n    }\r\n    if (Strength == 2 || Strength == 3) {\r\n        return -3;\r\n    }\r\n    if (Strength == 4 || Strength == 5) {\r\n        return -2;\r\n    }\r\n    if (Strength == 6 || Strength == 7) {\r\n        return -1;\r\n    }\r\n    if (Strength >= 8 && Strength <= 16) {\r\n        return 0;\r\n    }\r\n    if (Strength == 17 ) {\r\n        return 1;\r\n    }\r\n    if (Strength == 18 ) {\r\n        return 2;\r\n    }\r\n    if (Strength == 19 ) {\r\n        return 3;\r\n    }\r\n    if (Strength == 20 ) {\r\n        return 4;\r\n    }\r\n}\r\n\r\n//sets monster hit adjustment based on strength stat number.\r\nfunction SetmonsterHitAdj() {\r\n    const Strength = this.state.monsterstats.Str;\r\n    \r\n    if (Strength == 1) {\r\n        return -4;\r\n    }\r\n    if (Strength == 2 || Strength == 3) {\r\n        return -3;\r\n    }\r\n    if (Strength == 4 || Strength == 5) {\r\n        return -2;\r\n    }\r\n    if (Strength == 6 || Strength == 7) {\r\n        return -1;\r\n    }\r\n    if (Strength >= 8 && Strength <= 16) {\r\n        return 0;\r\n    }\r\n    if (Strength == 17 ) {\r\n        return 1;\r\n    }\r\n    if (Strength == 18 ) {\r\n        return 2;\r\n    }\r\n    if (Strength == 19 ) {\r\n        return 3;\r\n    }\r\n    if (Strength == 20 ) {\r\n        return 4;\r\n    }\r\n}\r\n\r\n//sets stats including base role 1-20 than applies above functions.\r\nfunction setmonsterstats() {\r\n    //performs a 1-20 roll for every item in the \"monsterstats\" object/state\r\n    for (let key in this.state.monsterstats) {\r\n        this.state.monsterstats[key] = Math.floor((Math.random() * 20) + 1);\r\n    };\r\n    this.setState ({\r\n        //sets adjusted items based on monsterstats numbers in the set..adj functions\r\n        monsteradjusted: {\r\n        Hp: this.state.monsterbase.Hp + this.SetmonsterConstAdj(),\r\n        Ac: this.state.monsterbase.ArmorClass + this.SetmonsteracAdj(),\r\n        Dmg: this.state.monsterbase.Damage + this.SetmonsterDmgAdj(),\r\n        HitAdj: this.state.monsterbase.HitAdj + this.SetmonsterHitAdj(),\r\n        }\r\n    });\r\n}\r\n\r\n/* determins if the monster successfully hits the hero.  adjusts for hero\r\narmor class andmonster hit adjustment.  on successful attack role, applies damage\r\nto hero hp and if hp reaches zero alerts that hero is dead */\r\nfunction monsterattackroll() {\r\n    let attackroll = (parseInt((Math.random() * 20) + 1));\r\n    let adjattackroll = attackroll + (this.state.monsterHitAdj);\r\n    let critstrike = (this.state.monsterDmg * 2);\r\n    \r\n    if (attackroll < 20 && adjattackroll >= this.state.heroAc) {\r\n        this.setState(\r\n            {\r\n                monsterDidHit: 'Hit', monsterRoll: adjattackroll\r\n            }\r\n        )\r\n        //performs check to see if the hero hp after monster damange is 0 or lower\r\n        if ((this.state.heroHp - this.state.monsterDmg) <= 0) {\r\n            this.setState (\r\n                {\r\n                    heroHp: 'Dead', monsterRoll: adjattackroll  // if yes, hero is dead\r\n                }\r\n            )  \r\n        } else {\r\n            //if no, sets the herohp state to reflect new damage\r\n            this.setState (\r\n                {\r\n                    heroHp: this.state.heroHp - this.state.monsterDmg\r\n                }\r\n            )\r\n        }\r\n    } else if (attackroll >= 20) {\r\n        this.setState({monsterDidHit: 'Hit', monsterRoll: 'Crit Strike'});\r\n        if ((this.state.heroHp - critstrike) <= 0) {\r\n            this.setState (\r\n                {\r\n                    heroHp: 'Dead', monsterRoll: 'Crit Strike'  // if yes, monster is dead\r\n                }\r\n            ) \r\n        } else {\r\n            this.setState (\r\n                {\r\n                    heroHp: this.state.heroHp - critstrike\r\n                }\r\n            )\r\n        } \r\n    } else {\r\n        this.setState (\r\n            {\r\n                monsterDidHit: 'Miss', monsterRoll: adjattackroll\r\n            }\r\n        );\r\n    };\r\n};\r\n\r\n/*function to determine if the attack button should be displayed. Function is\r\ncalled when the attack button is pressed in attackSection (Attackbutton() )\r\nif hero dead or monster goes 2nd, attack button should not be visible */\r\nfunction monsterAttackTurn() {\r\n    if (this.state.heroHp === 'Dead' || this.state.monsterInitiative === 'Second') {\r\n        this.setState(state => (\r\n            {\r\n                monsterAttackVisible: !state.monsterAttackVisible\r\n            }\r\n        ));\r\n    }\r\n    else {\r\n        this.setState(state => (\r\n            //if monster goes first, makes sure attack button on hero area is hidden \r\n            //and displays attack button for monster.\r\n            {\r\n                monsterAttackVisible: !state.monsterAttackVisible, \r\n                heroAttackVisible: !state.heroAttackVisible\r\n            }\r\n        ));\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}