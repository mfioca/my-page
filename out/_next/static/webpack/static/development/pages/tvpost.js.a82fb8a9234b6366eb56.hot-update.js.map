{"version":3,"file":"static/webpack/static\\development\\pages\\tvpost.js.a82fb8a9234b6366eb56.hot-update.js","sources":["webpack:///./pages/tvpost.js"],"sourcesContent":["import React from 'react';\r\nimport Layout from '../components/layout'\r\nimport { Row, Col, Table } from 'reactstrap'\r\nimport ReactTable from \"react-table\"\r\nimport \"react-table/react-table.css\"\r\nimport { TvpageStyle } from './jsxstyles'\r\nimport { TvPostInfoLabel, TvPostInfoValue, NewTabLink, \r\n  LeftFlexWrapDiv, TvMazePage, CustomTabs, CustomCard } from './customComponents'\r\nimport fetch from 'isomorphic-unfetch'\r\n\r\nconst noimage = '/static/images/no-img.png'\r\n\r\n\r\nconst tvPost = props => {\r\n  \r\n  return (\r\n    <Layout>\r\n      <h1 className=\"text-center\">the below content has been imported from \r\n        <a href=\"https://www.tvmaze.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          TVmaze.com\r\n        </a>\r\n      </h1>\r\n      <TvMazePage>\r\n        <div className=\" m-3\">\r\n          <Row>\r\n            <Col>\r\n              <h1>{props.show.name}</h1>\r\n              <Table borderless className=\"\">\r\n                <tbody>\r\n                  <tr>\r\n                    <TvPostInfoLabel>Type:</TvPostInfoLabel>\r\n                    <TvPostInfoValue>\r\n                      {props.show.type ? props.show.type : 'no data'}\r\n                    </TvPostInfoValue>\r\n                  </tr>\r\n                  <tr>\r\n                    <TvPostInfoLabel>Premiered:</TvPostInfoLabel>\r\n                    <TvPostInfoValue>\r\n                      {props.show.premiered ? props.show.premiered : 'no data'}\r\n                    </TvPostInfoValue>\r\n                  </tr>\r\n                  <tr>\r\n                    <TvPostInfoLabel>Status:</TvPostInfoLabel>\r\n                    <TvPostInfoValue>\r\n                      {props.show.status ? props.show.status : 'no data'}\r\n                    </TvPostInfoValue>\r\n                  </tr>\r\n                  <tr>\r\n                    <TvPostInfoLabel>Rating:</TvPostInfoLabel>\r\n                    <TvPostInfoValue>\r\n                      {props.show.rating.average? props.show.rating.average : 'no data' }\r\n                    </TvPostInfoValue>\r\n                  </tr>\r\n                  <tr>\r\n                    <TvPostInfoLabel>Genre:</TvPostInfoLabel>\r\n                    <TvPostInfoValue>\r\n                      {props.show.genres.map((value, index) => {\r\n                        return <span key={index}>{value} &nbsp;</span>\r\n                        })\r\n                      }\r\n                    </TvPostInfoValue>\r\n                  </tr>\r\n                  <tr>\r\n                    <TvPostInfoLabel>Seasons</TvPostInfoLabel>\r\n                    <TvPostInfoValue>\r\n                      {props.show._embedded.seasons.filter(seasons => seasons.number).length}\r\n                    </TvPostInfoValue>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n            <Col sm={{ size: 'auto', offset: 1 }}>\r\n              <div className=\"text-center mr-5 mt-2\">\r\n                <img src={props.show.image ? props.show.image.medium : noimage} alt=\"no image\"/>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"m-3\">\r\n            <h4>Summary:<br />\r\n              <small>\r\n                {props.show.summary\r\n                  .replace(/<[/]?p>/g, '')\r\n                  .replace(/<[/]?b>/g, '')\r\n                  .replace(/<[/]?i>/g, '')\r\n                }\r\n              </small>\r\n            </h4>\r\n          </Row>\r\n          <Row className=\"m-3\">\r\n            <h3>Link: \r\n              <small className=\"ml-2\">\r\n                <NewTabLink\r\n                  Link={props.show.url}\r\n                  Title={props.show.url}>\r\n                    {props.show.name ? props.show.name : 'null'}\r\n                </NewTabLink>\r\n              </small>\r\n            </h3>\r\n          </Row>\r\n          <CustomTabs\r\n            Tab1Name = 'Cast'\r\n            Tab2Name = 'Episodes'\r\n            Tab1Content = {\r\n              <LeftFlexWrapDiv>\r\n              {props.show._embedded.cast.map(cast => (\r\n                <div className=\"p-3\" key={cast.person.id}>\r\n                  <CustomCard\r\n                    CardStyle={{height: '570px'}}\r\n                    Title={cast.person.name}\r\n                    ImgSrc={\r\n                      cast.person.image === null && noimage ||\r\n                      cast.character.image === null && cast.person.image.medium ||\r\n                      cast.character.image.medium\r\n                    }\r\n                    ImgAlt=\"castimage\"\r\n                    SubTitle={\r\n                      <p>As: &nbsp;\r\n                          <small>{cast.character.name}</small></p>\r\n                    }\r\n                    Link={\r\n                      <NewTabLink\r\n                        Style=\"btn btn-dark w-100 mt-3\"\r\n                        Link={cast.person.url}\r\n                        Title=\"Actor Page\">\r\n                          Actor Page\r\n                      </NewTabLink>\r\n                    }\r\n                  />\r\n                </div>\r\n              ))}\r\n            </LeftFlexWrapDiv>\r\n            /*end of Tab1Content*/\r\n            }\r\n            Tab2Content = {\r\n              /*React Table for Episode List */\r\n              <ReactTable\r\n                className= \"-striped -highlight\"\r\n                data= {props.show._embedded.episodes}\r\n                defaultPageSize={20}\r\n                style={{\r\n                  height: \"600px\",\r\n                  fontSize: \"14px\",\r\n                }}\r\n                filterable\r\n                  defaultFilterMethod={(filter, row) =>\r\n                  String(row[filter.id]) === filter.value}\r\n                columns= {[\r\n                  {\r\n                    Header: \"Season\",\r\n                    id: \"season\",\r\n                    accessor: d => d.season,\r\n                    maxWidth: 110,\r\n                    style: {'textAlign': 'center'},\r\n                    //Dropdown list to filter table based on number\r\n                    //of seasons\r\n                    Filter: ({ filter, onChange }) => {\r\n                      return (\r\n                        <select\r\n                          onChange={event => onChange(event.target.value)}\r\n                          style={{ width: \"100%\"}}\r\n                          value={filter ? filter.value : ''}> \r\n                          <option value= ''>Show All</option>\r\n                          {props.show._embedded.episodes\r\n                            .map(item => item.season)\r\n                            .filter((item, i, s) => s.lastIndexOf(item) == i)\r\n                            .map(function (value) {\r\n                              return (\r\n                                <option key={value} value={value}>\r\n                                  {value}\r\n                                </option>\r\n                              );\r\n                            })\r\n                          }\r\n                        </select>\r\n                      );\r\n                    }\r\n                  },\r\n                  {\r\n                    Header: \"Episode #\",\r\n                    accessor: \"number\",\r\n                    maxWidth: 80,\r\n                    style: {'textAlign': 'center'}\r\n                  },\r\n                  {\r\n                    Header:\"Name\",\r\n                    id: \"name\",\r\n                    accessor: d =>\r\n                    //Converts Episode Name into a link to the TvMaze \r\n                    //page for that episode\r\n                    <NewTabLink\r\n                      Link={d.url}\r\n                      Title=\"Episode Link\">\r\n                        {d.name}\r\n                    </NewTabLink>, \r\n                    minWidth: 70,\r\n                    style: {'whiteSpace': 'unset', 'textAlign': 'center'},\r\n                  },\r\n                  {\r\n                    Header:\"Air Date\",\r\n                    id: \"airdate\",\r\n                    accessor: d => d.airdate,\r\n                    maxWidth: 120,\r\n                    style: {'whiteSpace': 'unset', 'textAlign': 'center'},\r\n                  },\r\n                  {\r\n                    Header:\"Summary\",\r\n                    id: \"summary\",\r\n                    accessor: d => \r\n                    d.summary != null && \r\n                      <span>\r\n                        {d.summary.replace(/<[/]?p>/g, '')}\r\n                      </span>,\r\n                    style: {'whiteSpace': 'unset'},\r\n                  }\r\n                ]}\r\n              />\r\n            }\r\n            /*End of Tab2Content*/\r\n          />\r\n          {/*End of CustomTab class */}\r\n        </div>\r\n      </TvMazePage>\r\n    </Layout>\r\n  )\r\n};\r\n\r\n\r\ntvPost.getInitialProps = async function(context) {\r\n  const { id } = context.query;\r\n  //pules tvmaze api json based on selected show on the search page.\r\n  const res = await fetch(`https://api.tvmaze.com/shows/${id}?embed[]=episodes&embed[]=cast&embed[]=seasons`);\r\n  const show = await res.json();\r\n  \r\n  console.log(show);\r\n\r\n  console.log(`Fetched show: ${show.name}`);\r\n\r\n  return { show };\r\n};\r\n\r\nexport default tvPost;\r\n\r\n\r\n/*\r\n<Card style={{height: '570px'}} className=\"m-2\">\r\n                    <CardTitle \r\n                      className=\"m-4 text-center\" \r\n                      style={TvpageStyle.Title} >\r\n                        {cast.person.name}\r\n                    </CardTitle>\r\n                    <CardBody>\r\n                        <CardImg \r\n                          className=\"d-flex justify-content-center\" \r\n                          style={TvpageStyle.Image} \r\n                          src={\r\n                            cast.person.image === null && noimage ||\r\n                            cast.character.image === null && cast.person.image.medium ||\r\n                            cast.character.image.medium\r\n                          } \r\n                          alt=\"castimage\" \r\n                        />\r\n                      <CardSubtitle className=\"text-center my-2\">\r\n                        <h4 style={TvpageStyle.Cast}>As: &nbsp;\r\n                          <small>{cast.character.name}</small>\r\n                        </h4>\r\n                      </CardSubtitle>\r\n                    </CardBody>\r\n                      <NewTabLink\r\n                        Style=\"btn btn-dark w-100 mt-3\"\r\n                        Link={cast.person.url}\r\n                        Title=\"Actor Page\">\r\n                          Actor Page\r\n                      </NewTabLink>\r\n                  </Card>\r\n*/"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AA2BA;AAhCA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AA5BA;AA+BA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AAZA;AAeA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AAAA;AAAA;AARA;AArEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkFA;AAtHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6HA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAIA;AAEA;AAEA;AARA;AAUA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAYA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}