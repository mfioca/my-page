{"version":3,"file":"static/webpack/static\\development\\pages\\providerData.js.3bb71fb2deb44e251bb0.hot-update.js","sources":["webpack:///./pages/provider_data/networkTable.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport ReactTable from 'react-table'\r\nimport \"react-table/react-table.css\"\r\n\r\nvar networkdata = require('./network.json');\r\n\r\n/*counts number of Region types there are in the json\r\nconst uniqueNames = new Set(data.map(item => item.Region)).size;\r\n*/\r\n\r\n//Function for case insensitivity allowing for more flexibility on filter results based\r\n//on user input.\r\nfunction filterCaseInsensitive(filter, row) {\r\n  const id = filter.pivotId || filter.id;\r\n  return (\r\n    row[id] !== undefined ?\r\n      String(row[id].toLowerCase()).startsWith(filter.value.toLowerCase())\r\n    :  true\r\n  );\r\n}\r\n\r\n//creates dropdown list for each table column listing available selection options for \r\n//each json listing.  Example: Region - Central, Southwest, East\r\nconst customFilter = ({ fieldName, filter, onChange }) => {\r\n  return (\r\n    <select\r\n      onChange={event => onChange(event.target.value)}\r\n      style={{ width: \"100%\" }}\r\n      value={filter ? filter.value : ''}> \r\n      <option value= ''>Show All</option>\r\n      {networkdata.sort((a, b) => {\r\n          const One = a[fieldName];\r\n          const Two = b[fieldName];\r\n      \r\n          return (One < Two) ? -1 : (One > Two) ? 1 : 0;\r\n        })\r\n        .map(item => item[fieldName])\r\n        .filter((item, i, s) => s.lastIndexOf(item) == i)\r\n        .map(function (value) {\r\n          return (\r\n            <option key={value} value={value}>\r\n              {value}\r\n            </option>\r\n          );\r\n        })\r\n      }\r\n    </select>\r\n  );\r\n};\r\n\r\n\r\nclass NetworkList extends Component {\r\n  constructor(props) {\r\n    super(props); \r\n  }\r\n \r\n  render() {\r\n    return networkdata ? this.renderData(networkdata) : this.renderLoading();\r\n  }\r\n\r\n  renderData(networkdata) {\r\n    return (\r\n      <div>\r\n        <ReactTable \r\n          className= \"Provider-table -striped -highlight center shadow-sm mb-5\"\r\n          data= {networkdata}\r\n          defaultPageSize={20}\r\n          style={{\r\n            height: \"800px\"\r\n          }}\r\n          //sets filtering options in react-table for no dropdown option.  Calls the filtercaseinsensitive\r\n          //function as mentioned above\r\n          filterable defaultFilterMethod=\r\n          {(filter, row) => filterCaseInsensitive(filter, row) }\r\n          columns={[\r\n            {\r\n              Header: \"Provider\",\r\n              columns: [\r\n                {\r\n                  Header: \"Name\",\r\n                  id: \"Name\",\r\n                  accessor: d => d.Name,\r\n                  width: 140,\r\n                  //*sorting method to allow for listing of numerical order listed in the name\r\n                  sortMethod: (a, b) => {\r\n                    if (a.length === b.length) {\r\n                      return a > b ? 1 : -1;\r\n                    }\r\n                    return a.length > b.length ? 1 : -1;\r\n                  },\r\n                },\r\n                {\r\n                  Header: \"Address\",\r\n                  id: \"Address\",\r\n                  accessor: d => d.Address,\r\n                  width: 300,\r\n                  size: 2,\r\n                  style: {\r\n                    whiteSpace: 'unset',\r\n                    fontSize: '14px'\r\n                  },\r\n                },\r\n                {\r\n                  Header: \"Phone\",\r\n                  id: \"Phone\",\r\n                  accessor: d => d.Phone,\r\n                  width: 150,\r\n                },\r\n                {\r\n                  Header: \"Email\",\r\n                  id: \"Email\",\r\n                  accessor: d => d.Email,\r\n                  width: 220,\r\n                  style: {fontSize: '14px'},\r\n                }\r\n              ]\r\n            },              \r\n            {\r\n              Header: \"Provider Info\",\r\n              columns: [\r\n                {\r\n                  Header: \"Region\",\r\n                  id: \"Region\",\r\n                  width: 110,\r\n                  style: {'textAlign': 'center'},\r\n                  accessor: d => d.Region,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'Region', filter, onChange })\r\n                },\r\n                {\r\n                  Header: \"County\",\r\n                  id: \"County\",\r\n                  style: {'textAlign': 'center'},\r\n                  width: 110,\r\n                  accessor: d => d.County,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'County', filter, onChange })\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              Header: \"Level of Service\",\r\n              columns: [\r\n                {\r\n                  Header: \"Ambulatory\",\r\n                  accessor: \"Amb\",\r\n                  style: {'textAlign': 'center'},\r\n                  width: 110,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'Amb', filter, onChange })\r\n                },\r\n                {\r\n                  Header: \"Wheelchair\",\r\n                  id: \"WCHR\",\r\n                  style: {'textAlign': 'center'},\r\n                  width: 110,\r\n                  accessor: d => d.WCHR,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'WCHR', filter, onChange })\r\n                },\r\n                {\r\n                  Header: \"Stretcher\",\r\n                  id: \"Stretcher\",\r\n                  style: {'textAlign': 'center'},\r\n                  width: 110,\r\n                  accessor: d => d.Stretcher,\r\n                  filterMethod: (filter, row) => {\r\n                    return row[filter.id] === filter.value;\r\n                  },\r\n                  //calls the customfilter function above creating a dropdown list for\r\n                  //filter\r\n                  Filter: ({ filter, onChange }) =>\r\n                  customFilter({ fieldName:'Stretcher', filter, onChange })\r\n                },\r\n              ]\r\n            },\r\n          ]}\r\n        > \r\n        {/*functions to display totals of filtered data. */}\r\n        {(state, makeTable, instance) => {\r\n          let recordsInfoText = \"\";\r\n          const { filtered, pageRows, pageSize, sortedData, page } = state;\r\n\r\n          if (sortedData && sortedData.length > 0) {\r\n            let isFiltered = filtered.length > 0;\r\n            let totalRecords = sortedData.length;\r\n            let recordsCountFrom = page * pageSize + 1;\r\n            let recordsCountTo = recordsCountFrom + pageRows.length - 1;\r\n\r\n            if (isFiltered)\r\n              recordsInfoText = `${totalRecords} filtered Providers`;\r\n            else\r\n              recordsInfoText = `${recordsCountFrom}-${recordsCountTo} of ${totalRecords} records`;\r\n          } else recordsInfoText = \"No records\";\r\n\r\n          return (\r\n            <div className=\"main-grid\">\r\n                <div>\r\n                  <span className=\"records-info h3\">{recordsInfoText}</span>\r\n                </div>\r\n              {makeTable()}\r\n            </div>\r\n          );\r\n        }}\r\n      </ReactTable>\r\n    </div>\r\n    );\r\n  } \r\n  renderLoading() {\r\n    return <div>Loading...</div>;\r\n  }\r\n}\r\n\r\nexport default NetworkList;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;;;AAIA;AACA;AACA;AACA;AADA;AACA;AACA;AAKA;AAGA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AARA;AASA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAXA;AAcA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AANA;AAYA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AALA;AAjCA;AA2CA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAXA;AAeA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAXA;AAjBA;AAkCA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAVA;AAcA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAXA;AAeA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAXA;AA9BA;AAvFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyIA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAIA;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAnLA;AACA;AAqLA;;;;A","sourceRoot":""}