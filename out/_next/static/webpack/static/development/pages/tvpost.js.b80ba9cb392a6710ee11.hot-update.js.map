{"version":3,"file":"static/webpack/static\\development\\pages\\tvpost.js.b80ba9cb392a6710ee11.hot-update.js","sources":["webpack:///./pages/tvpost.js"],"sourcesContent":["import Layout from '../components/layout'\r\nimport Layout2 from './tv_info/MyLayout'\r\nimport { Card, CardImg, CardBody, CardTitle, Row, Col } from 'reactstrap'\r\nimport { TvImage } from './jsxstyles'\r\nimport fetch from 'isomorphic-unfetch'\r\n\r\nconst noimage = '/static/images/no-img.png'\r\n\r\n\r\nconst tvPost = props => (\r\n  <Layout>\r\n    <h1 className=\"text-center\">the below content has been imported from \r\n      <a href=\"https://www.tvmaze.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        TVmaze.com\r\n      </a>\r\n    </h1>\r\n    <Layout2>\r\n      <div className=\"h3\">\r\n        <Row>\r\n          <Col className=\"float-left\">\r\n        <h1>{props.show.name}</h1>\r\n        <h3><b>Type:</b> <small>{props.show.type ? props.show.type : 'no data'}</small></h3>\r\n        <h3><b>Premiered:</b> <small>{props.show.premiered ? props.show.premiered : 'no data'}</small></h3>\r\n        <h3><b>status:</b> <small>{props.show.status ? props.show.status : 'no data'}</small></h3>\r\n        <h3><b>Rating:</b> <small>{props.show.rating.average ? props.show.average : 'no data'}</small></h3>\r\n        <h3>\r\n          {/* since tvmaze api json has genre as an imbedded array,\r\n            pulls the data in genres in a key map to list all entries*/}\r\n          <b>Genre:</b> &nbsp;\r\n          <small>\r\n            {props.show.genres.map(genre => (\r\n              <span key={props.show.genres}>\r\n              {genre} &nbsp;\r\n              </span>\r\n            ))}\r\n          </small>\r\n        </h3>\r\n        </Col>\r\n        <Col sm={{ size: 'auto', offset: 1 }} className=\"mr-3 mt-3\">\r\n        <img src={props.show.image ? props.show.image.medium : noimage} alt=\"no image\"/>\r\n        </Col>\r\n        </Row>\r\n        <h4><small>{props.show.summary.replace(/<[/]?p>/g, '').replace(/<[/]?b>/g, '').replace(/<[/]?i>/g, '')}</small></h4>\r\n        <h3>Link: \r\n          <small>\r\n            <a href={props.show.url}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                title={props.show.url}>\r\n            {props.show.name ? props.show.name : 'null'} \r\n            </a>\r\n          </small>\r\n        </h3>\r\n        <h2>Cast:</h2>\r\n        <div className=\"d-flex flex-wrap justify-content-left\">\r\n            {props.show._embedded.cast.map(cast => (\r\n              <div key={cast.person.id}>\r\n                <Card className=\"m-5\">\r\n                  <CardTitle className=\"text-center\">{cast.person.name}</CardTitle>\r\n                  <CardBody>\r\n                    <CardImg style={TvImage} src={cast.person.image.medium? cast.person.image.medium: noimage} alt=\"castimage\" />\r\n                    <h4 className=\"my-2\">As: {cast.character.name}</h4>\r\n                    <div className=\"text-center\">\r\n                    <a href={cast.person.url}> Actor page</a>\r\n                    </div>\r\n                  </CardBody>\r\n                </Card>\r\n                \r\n                </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </Layout2>\r\n  </Layout>\r\n);\r\n\r\ntvPost.getInitialProps = async function(context) {\r\n  const { id } = context.query;\r\n  //pules tvmaze api json based on selected show on the search page.\r\n  const res = await fetch(`https://api.tvmaze.com/shows/${id}?embed[]=cast`);\r\n  const show = await res.json();\r\n  \r\n  console.log(show);\r\n\r\n  console.log(`Fetched show: ${show.name}`);\r\n\r\n  return { show };\r\n};\r\n\r\nexport default tvPost;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AA9CA;AACA;AAkEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAIA;AAEA;AAEA;AARA;AAUA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAYA;;;;A","sourceRoot":""}