{"version":3,"file":"static/webpack/static\\development\\pages\\tvpage.js.d4495ac9e9fc3bc6d016.hot-update.js","sources":["webpack:///./pages/tvpage.js"],"sourcesContent":["import React from 'react'\r\nimport { Button, Form, FormGroup, Label, Input, Card, CardImg, CardBody, CardTitle } from 'reactstrap'\r\nimport { TvImage, TvTitle } from './jsxstyles'\r\nimport Layout from '../components/layout'\r\nimport Layout2 from './tv_info/MyLayout.js'\r\nimport Link from 'next/link'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport { NewTabLink } from './customComponents'\r\n\r\n\r\nconst noimage = '/static/images/no-img.png';\r\nvar Search = '';\r\n\r\nfunction FlexDivCenter(props) {\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">{props.children}</div>\r\n  )\r\n}\r\n\r\nclass Searchbar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: ''};\r\n    this.enterSearch = this.enterSearch.bind(this);\r\n  }\r\n  //handles setting state of search value to render tvmaze json api\r\n  //sets variable search value to state\r\n  enterSearch(event) {\r\n    this.setState({value: event.target.value});\r\n    Search = (event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form inline>\r\n          <div>\r\n            <Label className=\"mr-sm-2\">TV Show search by Name:</Label>\r\n            <Input\r\n              type=\"text\"\r\n              value={this.state.value} \r\n              onChange={this.enterSearch} \r\n              //Prevent enter key submit\r\n              onKeyPress={event => {\r\n                if (event.which === 13 /* Enter */) {\r\n                  event.preventDefault();\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n          {/*due to get initial props async function is only called on page load\r\n            disguised a page link as a search button to call value of search for \r\n            the await fetch api call.*/}\r\n          <Button className=\"ml-4 p-0\">\r\n            <Link href=\"/tvpage\">\r\n              <a className=\"btn btn-dark\">Click Submit</a>\r\n            </Link>\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst TvPage = props => (\r\n  <Layout>\r\n    <h1 className=\"text-center\">the below content has been imported from \r\n    <NewTabLink\r\n      Link=\"https://www.tvmaze.com\"\r\n      Title=\"TvMaze.com\">\r\n        Tvmaze.com\r\n      </NewTabLink>\r\n    </h1>\r\n    <Searchbar />\r\n    <Layout2>\r\n      <h1>Results for: {Search}</h1>\r\n      <div className=\"d-flex flex-wrap justify-content-left\">\r\n        {props.shows.map(show => (\r\n          <div className=\"p-3 text-center\" key={show.id}>\r\n            <Card>\r\n              <CardTitle \r\n                className=\"m-4 text-center\" \r\n                style={TvTitle}>\r\n                  <b><u>{show.name}</u></b>\r\n              </CardTitle>\r\n              <CardBody>\r\n              <CardImg \r\n                className=\"my-2\" \r\n                style={TvImage} \r\n                src={show.image ? show.image.medium : noimage} \r\n                alt=\"image\" \r\n              />\r\n              </CardBody>\r\n              <Link href={`/tvpost?id=${show.id}`}>\r\n                <a className=\"btn btn-dark w-100\">Select</a>\r\n              </Link>\r\n            </Card>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Layout2>\r\n  </Layout>\r\n);\r\n\r\nTvPage.getInitialProps = async function() {\r\n  //tvmaze search api link.  pulls the json info based on the search variable\r\n  //entered by user in the search field.\r\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=' + Search);\r\n  const data = await res.json();\r\n\r\n  console.log(`Show data fetched. Count: ${data.length}`);\r\n\r\n  return {\r\n    shows: data.map(entry => entry.show)\r\n  };\r\n};\r\n\r\nexport default TvPage;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AAIA;AAEA;AACA;AACA;;;AADA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA1CA;AACA;AA4CA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAbA;AACA;AAuCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAIA;AAEA;AANA;AASA;AAAA;AAAA;AADA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;;;;A","sourceRoot":""}