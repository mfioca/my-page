{"version":3,"file":"static/webpack/static\\development\\pages\\providerData.js.cb7cf723702dbbb08506.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js","webpack:///./pages/provider_data/providerimport.js"],"sourcesContent":["import _Object$defineProperty from \"../../core-js/object/define-property\";\nexport default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import React, { Component } from 'react';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\nimport data from './provider.json'\r\n\r\n//var data = require('./provider.json');\r\n\r\n\r\n\r\n//counts number of Region types there are in the json\r\nconst uniqueNames = new Set(data.map(item => item.Region)).size;\r\n\r\n\r\n//Function for case insensitivity allowing for more flexibility on filter results based\r\n//on user input.\r\nfunction filterCaseInsensitive(filter, row) {\r\n  const id = filter.pivotId || filter.id;\r\n  return (\r\n      row[id] !== undefined ?\r\n        String(row[id].toLowerCase()).startsWith(filter.value.toLowerCase())\r\n        :  true\r\n  );\r\n}\r\n\r\n//creates dropdown list for each table column listing available selection options for \r\n//each json listing.  Example: Region - Central, Southwest, East\r\nconst customFilter = ({ fieldName, filter, onChange }) => {\r\n  return (\r\n    <select\r\n      onChange={event => onChange(event.target.value)}\r\n      style={{ width: \"100%\" }}\r\n      value={filter ? filter.value : ''}> \r\n      <option value= ''>Show All</option>\r\n      {data\r\n        .map(item => item[fieldName])\r\n        .filter((item, i, s) => s.lastIndexOf(item) == i)\r\n        .map(function (value) {\r\n          return (\r\n            <option key={value} value={value}>\r\n              {value}\r\n            </option>\r\n          );\r\n        })}\r\n    </select>\r\n  );\r\n};\r\n\r\n\r\nclass ProviderList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    \r\n}\r\n\r\n\r\n//pulls the json file on initial load\r\n  componentDidMount () {\r\n    fetch(`/provider.json`)\r\n      .then(res => res.json());\r\n  }\r\n\r\n  render() {\r\n    return data ? this.renderData(data) : this.renderLoading();\r\n  }\r\n\r\n  renderData(data) {\r\n    \r\n      return (\r\n        <div>\r\n          \r\n          \r\n          \r\n          <p>{uniqueNames}</p>\r\n          \r\n          \r\n          \r\n          \r\n          <ReactTable \r\n            className= \"Provider-table -striped -highlight\"\r\n            data= {data}\r\n            defaultPageSize={20}\r\n            style={{\r\n              height: \"400px\" // This will force the table body to overflow and scroll, since there is not enough room\r\n            }}\r\n            //sets filtering options in react-table for no dropdown option.  Calls the filtercaseinsensitive\r\n            //function as mentioned above\r\n            filterable defaultFilterMethod=\r\n            {(filter, row) => filterCaseInsensitive(filter, row) }\r\n            columns={[\r\n              {\r\n                Header: \"Provider\",\r\n                columns: [\r\n                  {\r\n                    Header: \"Name\",\r\n                    accessor: \"Name\",\r\n                    //*sorting method to allow for listing of numerical order listed in the name\r\n                    sortMethod: (a, b) => {\r\n                      if (a.length === b.length) {\r\n                        return a > b ? 1 : -1;\r\n                      }\r\n                      return a.length > b.length ? 1 : -1;\r\n                    }\r\n                  },\r\n                  {\r\n                    Header: \"Address\",\r\n                    accessor: \"Address\",\r\n                    accessor: d => d.Address\r\n                  },\r\n                  {\r\n                    Header: \"Phone\",\r\n                    accessor: \"Phone\",\r\n                    accessor: d => d.Phone\r\n                  }\r\n                ]\r\n              },              \r\n              {\r\n                Header: \"Provider Info\",\r\n                columns: [\r\n                  {\r\n                    Header: \"Type\",\r\n                    id: \"Type\",\r\n                    accessor: d => d.Type,\r\n                    filterMethod: (filter, row) => {\r\n                      return row[filter.id] === filter.value;\r\n                    },\r\n                    Filter: ({ filter, onChange }) =>\r\n                    customFilter({ fieldName:'Type', filter, onChange })\r\n                  },\r\n                  {\r\n                    Header: \"Region\",\r\n                    id: \"Region\",\r\n                    accessor: d => d.Region,\r\n                    filterMethod: (filter, row) => {\r\n                      return row[filter.id] === filter.value;\r\n                    },\r\n                    //calls the customfilter function above creating a dropdown list for\r\n                    //filter\r\n                    Filter: ({ filter, onChange }) =>\r\n                    customFilter({ fieldName:'Region', filter, onChange })\r\n                  },\r\n                  {\r\n                    Header: \"County\",\r\n                    id: \"County\",\r\n                    accessor: d => d.County,\r\n                    filterMethod: (filter, row) => {\r\n                      return row[filter.id] === filter.value;\r\n                    },\r\n                    //calls the customfilter function above creating a dropdown list for\r\n                    //filter\r\n                    Filter: ({ filter, onChange }) =>\r\n                    customFilter({ fieldName:'County', filter, onChange })\r\n                  }\r\n                ]\r\n              },\r\n              {\r\n                Header: \"Level of Service\",\r\n                columns: [\r\n                  {\r\n                    Header: \"Ambulatory\",\r\n                    accessor: \"Amb\",\r\n                    filterMethod: (filter, row) => {\r\n                      return row[filter.id] === filter.value;\r\n                    },\r\n                    //calls the customfilter function above creating a dropdown list for\r\n                    //filter\r\n                    Filter: ({ filter, onChange }) =>\r\n                    customFilter({ fieldName:'Amb', filter, onChange })\r\n                  },\r\n                  {\r\n                    Header: \"Wheelchair\",\r\n                    id: \"WCHR\",\r\n                    accessor: d => d.WCHR,\r\n                    filterMethod: (filter, row) => {\r\n                      return row[filter.id] === filter.value;\r\n                    },\r\n                    //calls the customfilter function above creating a dropdown list for\r\n                    //filter\r\n                    Filter: ({ filter, onChange }) =>\r\n                    customFilter({ fieldName:'WCHR', filter, onChange })\r\n                  },\r\n                  {\r\n                    Header: \"Stretcher\",\r\n                    id: \"Stretcher\",\r\n                    accessor: d => d.Stretcher,\r\n                    filterMethod: (filter, row) => {\r\n                      return row[filter.id] === filter.value;\r\n                    },\r\n                    //calls the customfilter function above creating a dropdown list for\r\n                    //filter\r\n                    Filter: ({ filter, onChange }) =>\r\n                    customFilter({ fieldName:'Stretcher', filter, onChange })\r\n                  },\r\n                ]\r\n              },\r\n            ]}\r\n          > \r\n          {/*functions to display totals of filtered data. */}\r\n          {(state, makeTable, instance) => {\r\n            let recordsInfoText = \"\";\r\n\r\n            const { filtered, pageRows, pageSize, sortedData, page } = state;\r\n\r\n            if (sortedData && sortedData.length > 0) {\r\n              let isFiltered = filtered.length > 0;\r\n\r\n              let totalRecords = sortedData.length;\r\n\r\n              let recordsCountFrom = page * pageSize + 1;\r\n\r\n              let recordsCountTo = recordsCountFrom + pageRows.length - 1;\r\n\r\n              if (isFiltered)\r\n                recordsInfoText = `${totalRecords} filtered Providers`;\r\n              else\r\n                recordsInfoText = `${recordsCountFrom}-${recordsCountTo} of ${totalRecords} records`;\r\n            } else recordsInfoText = \"No records\";\r\n\r\n            return (\r\n              <div className=\"main-grid\">\r\n                <div className=\"above-table text-right\">\r\n                  <div className=\"col-sm-12\">\r\n                    <span className=\"records-info\">{recordsInfoText}</span>\r\n                  </div>\r\n                </div>\r\n                {makeTable()}\r\n              </div>\r\n            );\r\n          }}\r\n        </ReactTable>\r\n        </div>\r\n      );\r\n    } \r\n  renderLoading() {\r\n    return <div>Loading...</div>;\r\n  }\r\n}\r\n\r\nexport default ProviderList;\r\n\r\n\r\n \r\n\r\n\r\n\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AAKA;AAGA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AARA;AASA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AATA;AAYA;AACA;AAdA;AAeA;AAAA;AAGA;AACA;AAnBA;AAoBA;AAAA;AAtBA;AA2BA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAPA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AATA;AAaA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AATA;AAzBA;AAwCA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AARA;AAYA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AATA;AAaA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AATA;AA1BA;AA7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyHA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AAEA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAIA;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AA3LA;AACA;AA6LA;;;;A","sourceRoot":""}